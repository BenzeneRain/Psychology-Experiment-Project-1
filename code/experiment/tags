!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$	.\Release\PreTrialScene.obj	/^/;"	v
A	.\Release\Conditions.obj	/^/;"	v
A	.\Release\Overlapped2DViewScene.obj	/^/;"	v
A	.\Release\PostExperimentScene.obj	/^/;"	v
A	.\Release\Screen.obj	/^/;"	v
A	.\Release\StereoViewingFrameV2.obj	/^/;"	v
A	.\Release\TestObject.obj	/^/;"	v
A	.\Release\TestObject.obj	/^:šþ/;"	v
A	.\Release\TestObjectFactory.obj	/^/;"	v
AL	.\Release\Conditions.obj	/^/;"	v
AL	.\Release\Screen.obj	/^/;"	v
AL	.\Release\StereoViewingFrameV2.obj	/^/;"	v
AL	.\Release\TestObjectFactory.obj	/^/;"	v
ALT	.\experiment.rc	/^    "?",            IDM_ABOUT,              ASCII,  ALT$/;"	v
ALY	.\Release\Conditions.obj	/^/;"	v
ALY	.\Release\Overlapped2DViewScene.obj	/^/;"	v
ALY	.\Release\PostExperimentScene.obj	/^/;"	v
ALY	.\Release\Screen.obj	/^/;"	v
ALY	.\Release\StereoViewingFrameV2.obj	/^/;"	v
ALY	.\Release\TestObject.obj	/^/;"	v
ALY	.\Release\TestObjectFactory.obj	/^/;"	v
APSTUDIO_HIDDEN_SYMBOLS	.\experiment.rc	13;"	d	file:
APSTUDIO_HIDDEN_SYMBOLS	.\experiment.rc	15;"	d	file:
APSTUDIO_READONLY_SYMBOLS	.\experiment.rc	18;"	d	file:
APSTUDIO_READONLY_SYMBOLS	.\experiment.rc	5;"	d	file:
ASCII	.\experiment.rc	/^    "?",            IDM_ABOUT,              ASCII,  ALT$/;"	v
ASCII	.\experiment.rc	/^    "\/",            IDM_ABOUT,              ASCII,  ALT$/;"	v
AY	.\Release\Conditions.obj	/^/;"	v
AY	.\Release\Screen.obj	/^/;"	v
AY	.\Release\StereoViewingFrameV2.obj	/^/;"	v
AY	.\Release\TestObject.obj	/^/;"	v
AY	.\Release\TestObjectFactory.obj	/^/;"	v
BEGIN	.\experiment.rc	/^BEGIN$/;"	v
BOTTOMMARGIN	.\experiment.rc	/^        BOTTOMMARGIN, 219$/;"	v
BOTTOMMARGIN	.\experiment.rc	/^        BOTTOMMARGIN, 55$/;"	v
BS_AUTORADIOBUTTON	.\experiment.rc	/^    CONTROL         "Experiment",IDC_RADIO1,"Button",BS_AUTORADIOBUTTON,276,78,52,10$/;"	v
BS_AUTORADIOBUTTON	.\experiment.rc	/^    CONTROL         "Practice",IDC_RADIO2,"Button",BS_AUTORADIOBUTTON,342,78,41,10$/;"	v
C	.\Debug\Separate2D3DViewScene.obj	/^LC/;"	v
C	.\Release\PreTrialScene.obj	/^/;"	v
C	.\Release\Screen.obj	/^/;"	v
C	.\Release\TestObjectFactory.obj	/^/;"	v
CLOCKWISE	.\TestObject.h	/^        enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	e	enum:TestObject::enumRotDirection
CLOCKWISE	.\TestObject.h~	/^        enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	e	enum:TestObject::enumRotDirection	file:
CML_ALWAYS_PROMOTE_TO_DEFAULT_LAYOUT	.\cml_config.h	10;"	d
CML_AUTOMATIC_MATRIX_RESIZE_ON_ASSIGNMENT	.\cml_config.h	14;"	d
CML_AUTOMATIC_VECTOR_RESIZE_ON_ASSIGNMENT	.\cml_config.h	12;"	d
CML_CHECK_MATRIX_EXPR_SIZES	.\cml_config.h	15;"	d
CML_CHECK_VECTOR_EXPR_SIZES	.\cml_config.h	13;"	d
CML_DEFAULT_ARRAY_ALLOC	.\cml_config.h	11;"	d
CML_DEFAULT_ARRAY_LAYOUT	.\cml_config.h	9;"	d
CML_NO_2D_UNROLLER	.\cml_config.h	8;"	d
CML_VECTOR_DOT_UNROLL_LIMIT	.\cml_config.h	7;"	d
CML_VECTOR_UNROLL_LIMIT	.\cml_config.h	6;"	d
CONTINUOUS_DISPLAY	.\ConditionConstraints.h	/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$/;"	e	enum:DisplayMode
CONTINUOUS_DISPLAY	.\ConditionConstraints.h~	/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$/;"	e	enum:DisplayMode	file:
CONTINUOUS_DISPLAY	.\tags	/^CONTINUOUS_DISPLAY	.\\ConditionConstraints.h	\/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$\/;"	e	enum:DisplayMode$/;"	e	enum:DisplayMode	file:
CONTINUOUS_DISPLAY	.\tags	/^CONTINUOUS_DISPLAY	.\\ConditionConstraints.h~	\/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$\/;"	e	enum:DisplayMode	file:$/;"	m	struct:__anon1	file:	access:public
CONTROL	.\experiment.rc	/^    CONTROL         "Experiment",IDC_RADIO1,"Button",BS_AUTORADIOBUTTON,276,78,52,10$/;"	v
CONTROL	.\experiment.rc	/^    CONTROL         "Practice",IDC_RADIO2,"Button",BS_AUTORADIOBUTTON,342,78,41,10$/;"	v
COUNTERCLOCKWISE	.\TestObject.h	/^        enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	e	enum:TestObject::enumRotDirection
COUNTERCLOCKWISE	.\TestObject.h~	/^        enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	e	enum:TestObject::enumRotDirection	file:
Conditions	.\Conditions.cpp	/^Conditions::Conditions(ifstream& rFin, $/;"	f	class:Conditions	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions	.\Conditions.cpp	/^Conditions::Conditions(ifstream& rFin, int numConditions,$/;"	f	class:Conditions	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions	.\Conditions.cpp~	/^Conditions::Conditions(ifstream& rFin, $/;"	f	class:Conditions	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions	.\Conditions.cpp~	/^Conditions::Conditions(ifstream& rFin, int numConditions,$/;"	f	class:Conditions	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions	.\Conditions.h	/^        explicit Conditions(ifstream& rFin, int numConditions,$/;"	p	class:Conditions	access:public	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions	.\Conditions.h	/^        explicit Conditions(ifstream& rFin,$/;"	p	class:Conditions	access:public	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions	.\Conditions.h	/^class Conditions$/;"	c
Conditions	.\Conditions.h~	/^        explicit Conditions(ifstream& rFin, int numConditions,$/;"	p	class:Conditions	file:	access:public	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions	.\Conditions.h~	/^        explicit Conditions(ifstream& rFin,$/;"	p	class:Conditions	file:	access:public	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions	.\Conditions.h~	/^class Conditions$/;"	c	file:
Conditions::Conditions	.\Conditions.cpp	/^Conditions::Conditions(ifstream& rFin, $/;"	f	class:Conditions	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions::Conditions	.\Conditions.cpp	/^Conditions::Conditions(ifstream& rFin, int numConditions,$/;"	f	class:Conditions	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions::Conditions	.\Conditions.cpp~	/^Conditions::Conditions(ifstream& rFin, $/;"	f	class:Conditions	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions::Conditions	.\Conditions.cpp~	/^Conditions::Conditions(ifstream& rFin, int numConditions,$/;"	f	class:Conditions	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions::Conditions	.\Conditions.h	/^        explicit Conditions(ifstream& rFin, int numConditions,$/;"	p	class:Conditions	access:public	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions::Conditions	.\Conditions.h	/^        explicit Conditions(ifstream& rFin,$/;"	p	class:Conditions	access:public	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions::Conditions	.\Conditions.h~	/^        explicit Conditions(ifstream& rFin, int numConditions,$/;"	p	class:Conditions	file:	access:public	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions::Conditions	.\Conditions.h~	/^        explicit Conditions(ifstream& rFin,$/;"	p	class:Conditions	file:	access:public	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
Conditions::addCondition	.\Conditions.cpp	/^int Conditions::addCondition(cond_t* pCondition)$/;"	f	class:Conditions	signature:(cond_t* pCondition)
Conditions::addCondition	.\Conditions.cpp	/^int Conditions::addCondition(int constraintIndex)$/;"	f	class:Conditions	signature:(int constraintIndex)
Conditions::addCondition	.\Conditions.cpp~	/^int Conditions::addCondition(cond_t* pCondition)$/;"	f	class:Conditions	signature:(cond_t* pCondition)
Conditions::addCondition	.\Conditions.cpp~	/^int Conditions::addCondition(int constraintIndex)$/;"	f	class:Conditions	signature:(int constraintIndex)
Conditions::addCondition	.\Conditions.h	/^        int addCondition(cond_t* pCondition);$/;"	p	class:Conditions	access:public	signature:(cond_t* pCondition)
Conditions::addCondition	.\Conditions.h	/^        int addCondition(int constraintIndex);$/;"	p	class:Conditions	access:public	signature:(int constraintIndex)
Conditions::addCondition	.\Conditions.h~	/^        int addCondition(cond_t* pCondition);$/;"	p	class:Conditions	file:	access:public	signature:(cond_t* pCondition)
Conditions::addCondition	.\Conditions.h~	/^        int addCondition(int constraintIndex);$/;"	p	class:Conditions	file:	access:public	signature:(int constraintIndex)
Conditions::addConstraint	.\Conditions.cpp	/^int Conditions::addConstraint(condCons_t* pConstraint)$/;"	f	class:Conditions	signature:(condCons_t* pConstraint)
Conditions::addConstraint	.\Conditions.cpp~	/^int Conditions::addConstraint(condCons_t* pConstraint)$/;"	f	class:Conditions	signature:(condCons_t* pConstraint)
Conditions::addConstraint	.\Conditions.h	/^        int addConstraint(condCons_t* pConstraint);$/;"	p	class:Conditions	access:public	signature:(condCons_t* pConstraint)
Conditions::addConstraint	.\Conditions.h~	/^        int addConstraint(condCons_t* pConstraint);$/;"	p	class:Conditions	file:	access:public	signature:(condCons_t* pConstraint)
Conditions::clearConditions	.\Conditions.cpp	/^BOOL Conditions::clearConditions()$/;"	f	class:Conditions	signature:()
Conditions::clearConditions	.\Conditions.cpp~	/^BOOL Conditions::clearConditions()$/;"	f	class:Conditions	signature:()
Conditions::clearConditions	.\Conditions.h	/^        virtual BOOL clearConditions();$/;"	p	class:Conditions	access:public	signature:()
Conditions::clearConditions	.\Conditions.h~	/^        virtual BOOL clearConditions();$/;"	p	class:Conditions	file:	access:public	signature:()
Conditions::conditionRepeatTimesPerSec	.\Conditions.h	/^        int conditionRepeatTimesPerSec;$/;"	m	class:Conditions	access:protected
Conditions::conditionRepeatTimesPerSec	.\Conditions.h~	/^        int conditionRepeatTimesPerSec;$/;"	m	class:Conditions	file:	access:protected
Conditions::conditions	.\Conditions.h	/^        vector<cond_t *> conditions;$/;"	m	class:Conditions	access:protected
Conditions::conditions	.\Conditions.h~	/^        vector<cond_t *> conditions;$/;"	m	class:Conditions	file:	access:protected
Conditions::constraints	.\Conditions.h	/^        vector<condCons_t *> constraints;$/;"	m	class:Conditions	access:protected
Conditions::constraints	.\Conditions.h~	/^        vector<condCons_t *> constraints;$/;"	m	class:Conditions	file:	access:protected
Conditions::cylinderParameterReadingFunction	.\Conditions.cpp	/^BOOL Conditions::cylinderParameterReadingFunction(ifstream& fin, condCons_t& constraint, int constraintID)$/;"	f	class:Conditions	signature:(ifstream& fin, condCons_t& constraint, int constraintID)
Conditions::cylinderParameterReadingFunction	.\Conditions.cpp~	/^BOOL Conditions::cylinderParameterReadingFunction(ifstream& fin, condCons_t& constraint, int constraintID)$/;"	f	class:Conditions	signature:(ifstream& fin, condCons_t& constraint, int constraintID)
Conditions::cylinderParameterReadingFunction	.\Conditions.h	/^        BOOL cylinderParameterReadingFunction(ifstream& fin, condCons_t& constraint, int constraintID);$/;"	p	class:Conditions	access:protected	signature:(ifstream& fin, condCons_t& constraint, int constraintID)
Conditions::cylinderParameterReadingFunction	.\Conditions.h~	/^        BOOL cylinderParameterReadingFunction(ifstream& fin, condCons_t& constraint, int constraintID);$/;"	p	class:Conditions	file:	access:protected	signature:(ifstream& fin, condCons_t& constraint, int constraintID)
Conditions::generateConditions	.\Conditions.cpp	/^BOOL Conditions::generateConditions()$/;"	f	class:Conditions	signature:()
Conditions::generateConditions	.\Conditions.cpp~	/^BOOL Conditions::generateConditions()$/;"	f	class:Conditions	signature:()
Conditions::generateConditions	.\Conditions.h	/^        virtual BOOL generateConditions();$/;"	p	class:Conditions	access:public	signature:()
Conditions::generateConditions	.\Conditions.h~	/^        virtual BOOL generateConditions();$/;"	p	class:Conditions	file:	access:public	signature:()
Conditions::getAllConditions	.\Conditions.cpp	/^const vector<cond_t *>& Conditions::getAllConditions()$/;"	f	class:Conditions	signature:()
Conditions::getAllConditions	.\Conditions.cpp~	/^const vector<cond_t *>& Conditions::getAllConditions()$/;"	f	class:Conditions	signature:()
Conditions::getAllConditions	.\Conditions.h	/^        virtual const vector<cond_t *>& getAllConditions();$/;"	p	class:Conditions	access:public	signature:()
Conditions::getAllConditions	.\Conditions.h~	/^        virtual const vector<cond_t *>& getAllConditions();$/;"	p	class:Conditions	file:	access:public	signature:()
Conditions::getAllConstraints	.\Conditions.cpp	/^const vector<condCons_t *>& Conditions::getAllConstraints()$/;"	f	class:Conditions	signature:()
Conditions::getAllConstraints	.\Conditions.cpp~	/^const vector<condCons_t *>& Conditions::getAllConstraints()$/;"	f	class:Conditions	signature:()
Conditions::getAllConstraints	.\Conditions.h	/^        const vector<condCons_t *>& getAllConstraints();$/;"	p	class:Conditions	access:public	signature:()
Conditions::getAllConstraints	.\Conditions.h~	/^        const vector<condCons_t *>& getAllConstraints();$/;"	p	class:Conditions	file:	access:public	signature:()
Conditions::initConditions	.\Conditions.cpp	/^BOOL Conditions::initConditions()$/;"	f	class:Conditions	signature:()
Conditions::initConditions	.\Conditions.cpp~	/^BOOL Conditions::initConditions()$/;"	f	class:Conditions	signature:()
Conditions::initConditions	.\Conditions.h	/^        virtual BOOL initConditions();$/;"	p	class:Conditions	access:public	signature:()
Conditions::initConditions	.\Conditions.h~	/^        virtual BOOL initConditions();$/;"	p	class:Conditions	file:	access:public	signature:()
Conditions::numConditions	.\Conditions.h	/^        int numConditions;$/;"	m	class:Conditions	access:protected
Conditions::numConditions	.\Conditions.h~	/^        int numConditions;$/;"	m	class:Conditions	file:	access:protected
Conditions::numSections	.\Conditions.h	/^        int numSections;$/;"	m	class:Conditions	access:public
Conditions::numSections	.\Conditions.h~	/^        int numSections;$/;"	m	class:Conditions	file:	access:public
Conditions::objectFactories	.\Conditions.h	/^        vector<TestObjectFactory *>& objectFactories;$/;"	m	class:Conditions	access:protected
Conditions::objectFactories	.\Conditions.h~	/^        vector<TestObjectFactory *>& objectFactories;$/;"	m	class:Conditions	file:	access:protected
Conditions::objectFactoryNameMap	.\Conditions.h	/^        hash_map<string, TestObjectFactory *> objectFactoryNameMap;$/;"	m	class:Conditions	access:protected
Conditions::objectFactoryNameMap	.\Conditions.h~	/^        hash_map<string, TestObjectFactory *> objectFactoryNameMap;$/;"	m	class:Conditions	file:	access:protected
Conditions::operator =	.\Conditions.h	/^        Conditions& operator=(Conditions& rhs); $/;"	p	class:Conditions	access:protected	signature:(Conditions& rhs)
Conditions::operator =	.\Conditions.h~	/^        Conditions& operator=(Conditions& rhs); $/;"	p	class:Conditions	file:	access:protected	signature:(Conditions& rhs)
Conditions::operator []	.\Conditions.cpp	/^cond_t& Conditions::operator[](int &rhs)$/;"	f	class:Conditions	signature:(int &rhs)
Conditions::operator []	.\Conditions.cpp~	/^cond_t& Conditions::operator[](int &rhs)$/;"	f	class:Conditions	signature:(int &rhs)
Conditions::operator []	.\Conditions.h	/^        virtual cond_t& operator[](int &rhs);$/;"	p	class:Conditions	access:public	signature:(int &rhs)
Conditions::operator []	.\Conditions.h~	/^        virtual cond_t& operator[](int &rhs);$/;"	p	class:Conditions	file:	access:public	signature:(int &rhs)
Conditions::overallFin	.\Conditions.h	/^        ifstream& overallFin;$/;"	m	class:Conditions	access:protected
Conditions::overallFin	.\Conditions.h~	/^        ifstream& overallFin;$/;"	m	class:Conditions	file:	access:protected
Conditions::printReadRangeError	.\Conditions.cpp	/^void Conditions::printReadRangeError(string name, int constraintID)$/;"	f	class:Conditions	signature:(string name, int constraintID)
Conditions::printReadRangeError	.\Conditions.cpp~	/^void Conditions::printReadRangeError(string name, int constraintID)$/;"	f	class:Conditions	signature:(string name, int constraintID)
Conditions::printReadRangeError	.\Conditions.h	/^        void printReadRangeError(string name, int constraintID);$/;"	p	class:Conditions	access:protected	signature:(string name, int constraintID)
Conditions::printReadRangeError	.\Conditions.h~	/^        void printReadRangeError(string name, int constraintID);$/;"	p	class:Conditions	file:	access:protected	signature:(string name, int constraintID)
Conditions::rScreen	.\Conditions.h	/^        Screen& rScreen;$/;"	m	class:Conditions	access:protected
Conditions::rScreen	.\Conditions.h~	/^        Screen& rScreen;$/;"	m	class:Conditions	file:	access:protected
Conditions::readConstraints	.\Conditions.cpp	/^BOOL Conditions::readConstraints(ifstream& fin, vector<condCons_t *>& rConstraints)$/;"	f	class:Conditions	signature:(ifstream& fin, vector<condCons_t *>& rConstraints)
Conditions::readConstraints	.\Conditions.cpp~	/^BOOL Conditions::readConstraints(ifstream& fin, vector<condCons_t *>& rConstraints)$/;"	f	class:Conditions	signature:(ifstream& fin, vector<condCons_t *>& rConstraints)
Conditions::readConstraints	.\Conditions.h	/^        BOOL readConstraints(ifstream& fin, vector<condCons_t *>& rConstraints);$/;"	p	class:Conditions	access:protected	signature:(ifstream& fin, vector<condCons_t *>& rConstraints)
Conditions::readConstraints	.\Conditions.h~	/^        BOOL readConstraints(ifstream& fin, vector<condCons_t *>& rConstraints);$/;"	p	class:Conditions	file:	access:protected	signature:(ifstream& fin, vector<condCons_t *>& rConstraints)
Conditions::readRange	.\Conditions.cpp	/^BOOL Conditions::readRange(ifstream& fin, rangeType<T>& vec)$/;"	f	class:Conditions	signature:(ifstream& fin, rangeType<T>& vec)
Conditions::readRange	.\Conditions.cpp~	/^BOOL Conditions::readRange(ifstream& fin, rangeType<T>& vec)$/;"	f	class:Conditions	signature:(ifstream& fin, rangeType<T>& vec)
Conditions::readRange	.\Conditions.h	/^        BOOL readRange(ifstream& fin, rangeType<T>& vec);$/;"	p	class:Conditions	access:protected	signature:(ifstream& fin, rangeType<T>& vec)
Conditions::readRange	.\Conditions.h~	/^        BOOL readRange(ifstream& fin, rangeType<T>& vec);$/;"	p	class:Conditions	file:	access:protected	signature:(ifstream& fin, rangeType<T>& vec)
Conditions::readTextures	.\Conditions.cpp	/^BOOL Conditions::readTextures(ifstream& fin)$/;"	f	class:Conditions	signature:(ifstream& fin)
Conditions::readTextures	.\Conditions.cpp~	/^BOOL Conditions::readTextures(ifstream& fin)$/;"	f	class:Conditions	signature:(ifstream& fin)
Conditions::readTextures	.\Conditions.h	/^        BOOL readTextures(ifstream& fin);$/;"	p	class:Conditions	access:protected	signature:(ifstream& fin)
Conditions::readTextures	.\Conditions.h~	/^        BOOL readTextures(ifstream& fin);$/;"	p	class:Conditions	file:	access:protected	signature:(ifstream& fin)
Conditions::shuffleConditions	.\Conditions.cpp	/^void Conditions::shuffleConditions(int times)$/;"	f	class:Conditions	signature:(int times)
Conditions::shuffleConditions	.\Conditions.cpp~	/^void Conditions::shuffleConditions(int times)$/;"	f	class:Conditions	signature:(int times)
Conditions::shuffleConditions	.\Conditions.h	/^        virtual void shuffleConditions(int times);$/;"	p	class:Conditions	access:public	signature:(int times)
Conditions::shuffleConditions	.\Conditions.h~	/^        virtual void shuffleConditions(int times);$/;"	p	class:Conditions	file:	access:public	signature:(int times)
Conditions::textureMap	.\Conditions.h	/^        hash_map<string, int> textureMap;$/;"	m	class:Conditions	access:protected
Conditions::textureMap	.\Conditions.h~	/^        hash_map<string, int> textureMap;$/;"	m	class:Conditions	file:	access:protected
Conditions::textures	.\Conditions.h	/^        vector<rTexture_t *> textures;$/;"	m	class:Conditions	access:protected
Conditions::textures	.\Conditions.h~	/^        vector<rTexture_t *> textures;$/;"	m	class:Conditions	file:	access:protected
Conditions::~Conditions	.\Conditions.cpp	/^Conditions::~Conditions(void)$/;"	f	class:Conditions	signature:(void)
Conditions::~Conditions	.\Conditions.cpp~	/^Conditions::~Conditions(void)$/;"	f	class:Conditions	signature:(void)
Conditions::~Conditions	.\Conditions.h	/^        ~Conditions(void);$/;"	p	class:Conditions	access:public	signature:(void)
Conditions::~Conditions	.\Conditions.h~	/^        ~Conditions(void);$/;"	p	class:Conditions	file:	access:public	signature:(void)
ConfWnd	.\ConfWnd.cpp	/^ConfWnd::ConfWnd(void)$/;"	f	class:ConfWnd	signature:(void)
ConfWnd	.\ConfWnd.cpp~	/^ConfWnd::ConfWnd(void)$/;"	f	class:ConfWnd	signature:(void)
ConfWnd	.\ConfWnd.h	/^        ConfWnd();$/;"	p	class:ConfWnd	access:private	signature:()
ConfWnd	.\ConfWnd.h	/^class ConfWnd$/;"	c
ConfWnd	.\ConfWnd.h~	/^        ConfWnd();$/;"	p	class:ConfWnd	file:	access:private	signature:()
ConfWnd	.\ConfWnd.h~	/^class ConfWnd$/;"	c	file:
ConfWnd::ConfWnd	.\ConfWnd.cpp	/^ConfWnd::ConfWnd(void)$/;"	f	class:ConfWnd	signature:(void)
ConfWnd::ConfWnd	.\ConfWnd.cpp~	/^ConfWnd::ConfWnd(void)$/;"	f	class:ConfWnd	signature:(void)
ConfWnd::ConfWnd	.\ConfWnd.h	/^        ConfWnd();$/;"	p	class:ConfWnd	access:private	signature:()
ConfWnd::ConfWnd	.\ConfWnd.h~	/^        ConfWnd();$/;"	p	class:ConfWnd	file:	access:private	signature:()
ConfWnd::confWndProc	.\ConfWnd.cpp	/^INT_PTR CALLBACK ConfWnd::confWndProc(HWND hDlg, UINT message, UINT wParam, LONG lParam)$/;"	f	class:ConfWnd	signature:(HWND hDlg, UINT message, UINT wParam, LONG lParam)
ConfWnd::confWndProc	.\ConfWnd.cpp~	/^INT_PTR CALLBACK ConfWnd::confWndProc(HWND hDlg, UINT message, UINT wParam, LONG lParam)$/;"	f	class:ConfWnd	signature:(HWND hDlg, UINT message, UINT wParam, LONG lParam)
ConfWnd::confWndProc	.\ConfWnd.h	/^        static INT_PTR CALLBACK confWndProc(HWND hWnd, UINT message, UINT wParam, LONG lParam);$/;"	p	class:ConfWnd	access:public	signature:(HWND hWnd, UINT message, UINT wParam, LONG lParam)
ConfWnd::confWndProc	.\ConfWnd.h~	/^        static INT_PTR CALLBACK confWndProc(HWND hWnd, UINT message, UINT wParam, LONG lParam);$/;"	p	class:ConfWnd	file:	access:public	signature:(HWND hWnd, UINT message, UINT wParam, LONG lParam)
ConfWnd::confirmConfiguration	.\ConfWnd.cpp	/^void ConfWnd::confirmConfiguration(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
ConfWnd::confirmConfiguration	.\ConfWnd.cpp~	/^void ConfWnd::confirmConfiguration(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
ConfWnd::confirmConfiguration	.\ConfWnd.h	/^        void confirmConfiguration(HWND hDlg);$/;"	p	class:ConfWnd	access:private	signature:(HWND hDlg)
ConfWnd::confirmConfiguration	.\ConfWnd.h~	/^        void confirmConfiguration(HWND hDlg);$/;"	p	class:ConfWnd	file:	access:private	signature:(HWND hDlg)
ConfWnd::devMode	.\ConfWnd.h	/^        DEVMODE devMode;$/;"	m	class:ConfWnd	access:public
ConfWnd::devMode	.\ConfWnd.h~	/^        DEVMODE devMode;$/;"	m	class:ConfWnd	file:	access:public
ConfWnd::displayConfWnd	.\ConfWnd.cpp	/^INT_PTR ConfWnd::displayConfWnd(HINSTANCE ghInstance)$/;"	f	class:ConfWnd	signature:(HINSTANCE ghInstance)
ConfWnd::displayConfWnd	.\ConfWnd.cpp~	/^INT_PTR ConfWnd::displayConfWnd(HINSTANCE ghInstance)$/;"	f	class:ConfWnd	signature:(HINSTANCE ghInstance)
ConfWnd::displayConfWnd	.\ConfWnd.h	/^        INT_PTR displayConfWnd(HINSTANCE ghInstance);$/;"	p	class:ConfWnd	access:public	signature:(HINSTANCE ghInstance)
ConfWnd::displayConfWnd	.\ConfWnd.h~	/^        INT_PTR displayConfWnd(HINSTANCE ghInstance);$/;"	p	class:ConfWnd	file:	access:public	signature:(HINSTANCE ghInstance)
ConfWnd::experiMode	.\ConfWnd.h	/^        enumExperiMode experiMode; \/\/ 0 -- experiment mode; 1 -- practice mode;$/;"	m	class:ConfWnd	access:public
ConfWnd::experiMode	.\ConfWnd.h~	/^        enumExperiMode experiMode; \/\/ 0 -- experiment mode; 1 -- practice mode;$/;"	m	class:ConfWnd	file:	access:public
ConfWnd::getInstance	.\ConfWnd.cpp	/^ConfWnd* ConfWnd::getInstance()$/;"	f	class:ConfWnd	signature:()
ConfWnd::getInstance	.\ConfWnd.cpp~	/^ConfWnd* ConfWnd::getInstance()$/;"	f	class:ConfWnd	signature:()
ConfWnd::getInstance	.\ConfWnd.h	/^        static ConfWnd *getInstance();$/;"	p	class:ConfWnd	access:public	signature:()
ConfWnd::getInstance	.\ConfWnd.h~	/^        static ConfWnd *getInstance();$/;"	p	class:ConfWnd	file:	access:public	signature:()
ConfWnd::m_pInstance	.\ConfWnd.cpp	/^auto_ptr<ConfWnd> ConfWnd::m_pInstance;$/;"	m	class:ConfWnd	file:
ConfWnd::m_pInstance	.\ConfWnd.cpp~	/^auto_ptr<ConfWnd> ConfWnd::m_pInstance;$/;"	m	class:ConfWnd	file:
ConfWnd::m_pInstance	.\ConfWnd.h	/^        static auto_ptr<ConfWnd> m_pInstance;$/;"	m	class:ConfWnd	access:private
ConfWnd::m_pInstance	.\ConfWnd.h~	/^        static auto_ptr<ConfWnd> m_pInstance;$/;"	m	class:ConfWnd	file:	access:private
ConfWnd::m_secNo	.\ConfWnd.h	/^        string m_secNo;$/;"	m	class:ConfWnd	access:private
ConfWnd::m_secNo	.\ConfWnd.h~	/^        string m_secNo;$/;"	m	class:ConfWnd	file:	access:private
ConfWnd::maxSecNo	.\ConfWnd.h	/^        unsigned int maxSecNo;$/;"	m	class:ConfWnd	access:public
ConfWnd::maxSecNo	.\ConfWnd.h~	/^        unsigned int maxSecNo;$/;"	m	class:ConfWnd	file:	access:public
ConfWnd::outFilename	.\ConfWnd.h	/^        string outFilename;$/;"	m	class:ConfWnd	access:public
ConfWnd::outFilename	.\ConfWnd.h~	/^        string outFilename;$/;"	m	class:ConfWnd	file:	access:public
ConfWnd::ruleKeywords	.\ConfWnd.cpp	/^const string ConfWnd::ruleKeywords[] = {"\/SID\/", "\/Date\/", "\/Time\/"};$/;"	m	class:ConfWnd	file:
ConfWnd::ruleKeywords	.\ConfWnd.cpp~	/^const string ConfWnd::ruleKeywords[] = {"\/SID\/", "\/Date\/", "\/Time\/"};$/;"	m	class:ConfWnd	file:
ConfWnd::ruleKeywords	.\ConfWnd.h	/^        static const string ruleKeywords[];$/;"	m	class:ConfWnd	access:public
ConfWnd::ruleKeywords	.\ConfWnd.h~	/^        static const string ruleKeywords[];$/;"	m	class:ConfWnd	file:	access:public
ConfWnd::ruleKeywordsNo	.\ConfWnd.cpp	/^const int ConfWnd::ruleKeywordsNo = 3;$/;"	m	class:ConfWnd	file:
ConfWnd::ruleKeywordsNo	.\ConfWnd.cpp~	/^const int ConfWnd::ruleKeywordsNo = 3;$/;"	m	class:ConfWnd	file:
ConfWnd::ruleKeywordsNo	.\ConfWnd.h	/^        static const int ruleKeywordsNo;$/;"	m	class:ConfWnd	access:public
ConfWnd::ruleKeywordsNo	.\ConfWnd.h~	/^        static const int ruleKeywordsNo;$/;"	m	class:ConfWnd	file:	access:public
ConfWnd::strDate	.\ConfWnd.h	/^        string strDate;$/;"	m	class:ConfWnd	access:public
ConfWnd::strTime	.\ConfWnd.h	/^        string strTime;$/;"	m	class:ConfWnd	access:public
ConfWnd::subjectID	.\ConfWnd.h	/^        string subjectID;$/;"	m	class:ConfWnd	access:public
ConfWnd::subjectID	.\ConfWnd.h~	/^        string subjectID;$/;"	m	class:ConfWnd	file:	access:public
ConfWnd::trialsInOneSec	.\ConfWnd.h	/^        unsigned int trialsInOneSec;$/;"	m	class:ConfWnd	access:public
ConfWnd::trialsInOneSec	.\ConfWnd.h~	/^        unsigned int trialsInOneSec;$/;"	m	class:ConfWnd	file:	access:public
ConfWnd::updateOutputFilename	.\ConfWnd.cpp	/^void ConfWnd::updateOutputFilename(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
ConfWnd::updateOutputFilename	.\ConfWnd.cpp~	/^void ConfWnd::updateOutputFilename(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
ConfWnd::updateOutputFilename	.\ConfWnd.h	/^        void updateOutputFilename(HWND hDlg);$/;"	p	class:ConfWnd	access:private	signature:(HWND hDlg)
ConfWnd::updateOutputFilename	.\ConfWnd.h~	/^        void updateOutputFilename(HWND hDlg);$/;"	p	class:ConfWnd	file:	access:private	signature:(HWND hDlg)
ConfWnd::updateTrialNo	.\ConfWnd.cpp	/^void ConfWnd::updateTrialNo(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
ConfWnd::updateTrialNo	.\ConfWnd.cpp~	/^void ConfWnd::updateTrialNo(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
ConfWnd::updateTrialNo	.\ConfWnd.h	/^        void updateTrialNo(HWND hDlg);$/;"	p	class:ConfWnd	access:private	signature:(HWND hDlg)
ConfWnd::updateTrialNo	.\ConfWnd.h~	/^        void updateTrialNo(HWND hDlg);$/;"	p	class:ConfWnd	file:	access:private	signature:(HWND hDlg)
ConfWnd::validateBlanks	.\ConfWnd.cpp	/^int ConfWnd::validateBlanks(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
ConfWnd::validateBlanks	.\ConfWnd.cpp~	/^int ConfWnd::validateBlanks(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
ConfWnd::validateBlanks	.\ConfWnd.h	/^        int validateBlanks(HWND hDlg);$/;"	p	class:ConfWnd	access:private	signature:(HWND hDlg)
ConfWnd::validateBlanks	.\ConfWnd.h~	/^        int validateBlanks(HWND hDlg);$/;"	p	class:ConfWnd	file:	access:private	signature:(HWND hDlg)
ConfWnd::validateFileExistance	.\ConfWnd.cpp	/^int ConfWnd::validateFileExistance(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
ConfWnd::validateFileExistance	.\ConfWnd.cpp~	/^int ConfWnd::validateFileExistance(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
ConfWnd::validateFileExistance	.\ConfWnd.h	/^        int validateFileExistance(HWND hDlg);$/;"	p	class:ConfWnd	access:private	signature:(HWND hDlg)
ConfWnd::validateFileExistance	.\ConfWnd.h~	/^        int validateFileExistance(HWND hDlg);$/;"	p	class:ConfWnd	file:	access:private	signature:(HWND hDlg)
ConfWnd::~ConfWnd	.\ConfWnd.cpp	/^ConfWnd::~ConfWnd(void)$/;"	f	class:ConfWnd	signature:(void)
ConfWnd::~ConfWnd	.\ConfWnd.cpp~	/^ConfWnd::~ConfWnd(void)$/;"	f	class:ConfWnd	signature:(void)
ConfWnd::~ConfWnd	.\ConfWnd.h	/^        ~ConfWnd();$/;"	p	class:ConfWnd	access:public	signature:()
ConfWnd::~ConfWnd	.\ConfWnd.h~	/^        ~ConfWnd();$/;"	p	class:ConfWnd	file:	access:public	signature:()
CounterFrequency	.\Screen.h	/^        LARGE_INTEGER CounterFrequency;$/;"	m	class:Screen	access:private
CounterFrequency	.\Screen.h~	/^        LARGE_INTEGER CounterFrequency;$/;"	m	class:Screen	file:	access:private
CylinderFactory	.\CylinderFactory.cpp	/^CylinderFactory::CylinderFactory(void)$/;"	f	class:CylinderFactory	signature:(void)
CylinderFactory	.\CylinderFactory.cpp~	/^CylinderFactory::CylinderFactory(void)$/;"	f	class:CylinderFactory	signature:(void)
CylinderFactory	.\CylinderFactory.h	/^        CylinderFactory(void);$/;"	p	class:CylinderFactory	access:public	signature:(void)
CylinderFactory	.\CylinderFactory.h	/^class CylinderFactory :$/;"	c	inherits:TestObjectFactory
CylinderFactory	.\CylinderFactory.h~	/^        CylinderFactory(void);$/;"	p	class:CylinderFactory	file:	access:public	signature:(void)
CylinderFactory	.\CylinderFactory.h~	/^class CylinderFactory :$/;"	c	file:	inherits:TestObjectFactory
CylinderFactory::CylinderFactory	.\CylinderFactory.cpp	/^CylinderFactory::CylinderFactory(void)$/;"	f	class:CylinderFactory	signature:(void)
CylinderFactory::CylinderFactory	.\CylinderFactory.cpp~	/^CylinderFactory::CylinderFactory(void)$/;"	f	class:CylinderFactory	signature:(void)
CylinderFactory::CylinderFactory	.\CylinderFactory.h	/^        CylinderFactory(void);$/;"	p	class:CylinderFactory	access:public	signature:(void)
CylinderFactory::CylinderFactory	.\CylinderFactory.h~	/^        CylinderFactory(void);$/;"	p	class:CylinderFactory	file:	access:public	signature:(void)
CylinderFactory::createObject	.\CylinderFactory.cpp	/^TestObject* CylinderFactory::createObject(condCons_t& constraint, vector<texture_t *>& textures)$/;"	f	class:CylinderFactory	signature:(condCons_t& constraint, vector<texture_t *>& textures)
CylinderFactory::createObject	.\CylinderFactory.cpp~	/^TestObject* CylinderFactory::createObject(condCons_t& constraint, vector<texture_t *>& textures)$/;"	f	class:CylinderFactory	signature:(condCons_t& constraint, vector<texture_t *>& textures)
CylinderFactory::createObject	.\CylinderFactory.h	/^        virtual TestObject* createObject(condCons_t& constraint, vector<texture_t *>& textures);$/;"	p	class:CylinderFactory	access:public	signature:(condCons_t& constraint, vector<texture_t *>& textures)
CylinderFactory::createObject	.\CylinderFactory.h~	/^        virtual TestObject* createObject(condCons_t& constraint, vector<texture_t *>& textureIDs);$/;"	p	class:CylinderFactory	file:	access:public	signature:(condCons_t& constraint, vector<texture_t *>& textureIDs)
CylinderFactory::getProductName	.\CylinderFactory.cpp	/^const string CylinderFactory::getProductName()$/;"	f	class:CylinderFactory	signature:()
CylinderFactory::getProductName	.\CylinderFactory.cpp~	/^const string CylinderFactory::getProductName()$/;"	f	class:CylinderFactory	signature:()
CylinderFactory::getProductName	.\CylinderFactory.h	/^        virtual const string getProductName();$/;"	p	class:CylinderFactory	access:public	signature:()
CylinderFactory::getProductName	.\CylinderFactory.h~	/^        virtual const string getProductName();$/;"	p	class:CylinderFactory	file:	access:public	signature:()
CylinderFactory::productName	.\CylinderFactory.h	/^        string productName;$/;"	m	class:CylinderFactory	access:private
CylinderFactory::productName	.\CylinderFactory.h~	/^        string productName;$/;"	m	class:CylinderFactory	file:	access:private
CylinderFactory::~CylinderFactory	.\CylinderFactory.cpp	/^CylinderFactory::~CylinderFactory(void)$/;"	f	class:CylinderFactory	signature:(void)
CylinderFactory::~CylinderFactory	.\CylinderFactory.cpp~	/^CylinderFactory::~CylinderFactory(void)$/;"	f	class:CylinderFactory	signature:(void)
CylinderFactory::~CylinderFactory	.\CylinderFactory.h	/^        virtual ~CylinderFactory(void);$/;"	p	class:CylinderFactory	access:public	signature:(void)
CylinderFactory::~CylinderFactory	.\CylinderFactory.h~	/^        virtual ~CylinderFactory(void);$/;"	p	class:CylinderFactory	file:	access:public	signature:(void)
CylinderObject	.\CylinderObject.cpp	/^CylinderObject::CylinderObject(CylinderObject &rObj) : TestObject(rObj)$/;"	f	class:CylinderObject	signature:(CylinderObject &rObj)
CylinderObject	.\CylinderObject.cpp	/^CylinderObject::CylinderObject(rangeType<GLfloat>& pitchRange,$/;"	f	class:CylinderObject	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs, rangeType<GLfloat>& radiusRange)
CylinderObject	.\CylinderObject.cpp~	/^CylinderObject::CylinderObject(CylinderObject &rObj) : TestObject(rObj)$/;"	f	class:CylinderObject	signature:(CylinderObject &rObj)
CylinderObject	.\CylinderObject.cpp~	/^CylinderObject::CylinderObject(rangeType<GLfloat>& pitchRange,$/;"	f	class:CylinderObject	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs, rangeType<GLfloat>& radiusRange)
CylinderObject	.\CylinderObject.h	/^        CylinderObject(CylinderObject &rObj);$/;"	p	class:CylinderObject	access:public	signature:(CylinderObject &rObj)
CylinderObject	.\CylinderObject.h	/^        CylinderObject(rangeType<GLfloat>& pitchRange,$/;"	p	class:CylinderObject	access:public	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs, rangeType<GLfloat>& radiusRange)
CylinderObject	.\CylinderObject.h	/^class CylinderObject :$/;"	c	inherits:TestObject
CylinderObject	.\CylinderObject.h~	/^        CylinderObject(CylinderObject &rObj);$/;"	p	class:CylinderObject	file:	access:public	signature:(CylinderObject &rObj)
CylinderObject	.\CylinderObject.h~	/^        CylinderObject(rangeType<GLfloat>& pitchRange,$/;"	p	class:CylinderObject	file:	access:public	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs, rangeType<GLfloat>& radiusRange)
CylinderObject	.\CylinderObject.h~	/^class CylinderObject :$/;"	c	file:	inherits:TestObject
CylinderObject::CylinderObject	.\CylinderObject.cpp	/^CylinderObject::CylinderObject(CylinderObject &rObj) : TestObject(rObj)$/;"	f	class:CylinderObject	signature:(CylinderObject &rObj)
CylinderObject::CylinderObject	.\CylinderObject.cpp	/^CylinderObject::CylinderObject(rangeType<GLfloat>& pitchRange,$/;"	f	class:CylinderObject	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs, rangeType<GLfloat>& radiusRange)
CylinderObject::CylinderObject	.\CylinderObject.cpp~	/^CylinderObject::CylinderObject(CylinderObject &rObj) : TestObject(rObj)$/;"	f	class:CylinderObject	signature:(CylinderObject &rObj)
CylinderObject::CylinderObject	.\CylinderObject.cpp~	/^CylinderObject::CylinderObject(rangeType<GLfloat>& pitchRange,$/;"	f	class:CylinderObject	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs, rangeType<GLfloat>& radiusRange)
CylinderObject::CylinderObject	.\CylinderObject.h	/^        CylinderObject(CylinderObject &rObj);$/;"	p	class:CylinderObject	access:public	signature:(CylinderObject &rObj)
CylinderObject::CylinderObject	.\CylinderObject.h	/^        CylinderObject(rangeType<GLfloat>& pitchRange,$/;"	p	class:CylinderObject	access:public	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs, rangeType<GLfloat>& radiusRange)
CylinderObject::CylinderObject	.\CylinderObject.h~	/^        CylinderObject(CylinderObject &rObj);$/;"	p	class:CylinderObject	file:	access:public	signature:(CylinderObject &rObj)
CylinderObject::CylinderObject	.\CylinderObject.h~	/^        CylinderObject(rangeType<GLfloat>& pitchRange,$/;"	p	class:CylinderObject	file:	access:public	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs, rangeType<GLfloat>& radiusRange)
CylinderObject::adjustAsptRatio	.\CylinderObject.cpp	/^BOOL CylinderObject::adjustAsptRatio(GLfloat delta)$/;"	f	class:CylinderObject	signature:(GLfloat delta)
CylinderObject::adjustAsptRatio	.\CylinderObject.cpp~	/^BOOL CylinderObject::adjustAsptRatio(GLfloat delta)$/;"	f	class:CylinderObject	signature:(GLfloat delta)
CylinderObject::adjustAsptRatio	.\CylinderObject.h	/^        virtual BOOL adjustAsptRatio(GLfloat delta);$/;"	p	class:CylinderObject	access:public	signature:(GLfloat delta)
CylinderObject::adjustAsptRatio	.\CylinderObject.h~	/^        virtual BOOL adjustAsptRatio(GLfloat delta);$/;"	p	class:CylinderObject	file:	access:public	signature:(GLfloat delta)
CylinderObject::bottomTextureID	.\CylinderObject.h	/^        GLuint bottomTextureID;$/;"	m	class:CylinderObject	access:public
CylinderObject::bottomTextureID	.\CylinderObject.h~	/^        GLuint bottomTextureID;$/;"	m	class:CylinderObject	file:	access:public
CylinderObject::draw	.\CylinderObject.cpp	/^void CylinderObject::draw(int drawStyle,$/;"	f	class:CylinderObject	signature:(int drawStyle, BOOL enableTexture, BOOL enablePYRRotation, BOOL enableMotion, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
CylinderObject::draw	.\CylinderObject.cpp~	/^void CylinderObject::draw(int drawStyle,$/;"	f	class:CylinderObject	signature:(int drawStyle, BOOL enableTexture, BOOL enablePYRRotation, BOOL enableMotion, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
CylinderObject::draw	.\CylinderObject.h	/^        virtual void draw(int drawStyle,$/;"	p	class:CylinderObject	access:public	signature:(int drawStyle, BOOL enableTexture, BOOL enablePYRRotation, BOOL enableMotion, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
CylinderObject::draw	.\CylinderObject.h~	/^        virtual void draw(int drawStyle,$/;"	p	class:CylinderObject	file:	access:public	signature:(int drawStyle, BOOL enableTexture, BOOL enablePYRRotation, BOOL enableMotion, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffSet)
CylinderObject::draw2D	.\CylinderObject.cpp	/^void CylinderObject::draw2D(int drawStyle,$/;"	f	class:CylinderObject	signature:(int drawStyle, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
CylinderObject::draw2D	.\CylinderObject.cpp~	/^void CylinderObject::draw2D(int drawStyle,$/;"	f	class:CylinderObject	signature:(int drawStyle, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
CylinderObject::draw2D	.\CylinderObject.h	/^        virtual void draw2D(int drawStyle,$/;"	p	class:CylinderObject	access:public	signature:(int drawStyle, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
CylinderObject::draw2D	.\CylinderObject.h~	/^        virtual void draw2D(int drawStyle,$/;"	p	class:CylinderObject	file:	access:public	signature:(int drawStyle, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
CylinderObject::genObjDesc	.\CylinderObject.cpp	/^string CylinderObject::genObjDesc()$/;"	f	class:CylinderObject	signature:()
CylinderObject::genObjDesc	.\CylinderObject.cpp~	/^string CylinderObject::genObjDesc()$/;"	f	class:CylinderObject	signature:()
CylinderObject::genObjDesc	.\CylinderObject.h	/^        virtual string genObjDesc(void); \/\/ get the object descriptions (fixed part)$/;"	p	class:CylinderObject	access:public	signature:(void)
CylinderObject::genObjDesc	.\CylinderObject.h~	/^        virtual string genObjDesc(void); \/\/ get the object descriptions (fixed part)$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
CylinderObject::genObjDescTitle	.\CylinderObject.cpp	/^string CylinderObject::genObjDescTitle()$/;"	f	class:CylinderObject	signature:()
CylinderObject::genObjDescTitle	.\CylinderObject.cpp~	/^string CylinderObject::genObjDescTitle()$/;"	f	class:CylinderObject	signature:()
CylinderObject::genObjDescTitle	.\CylinderObject.h	/^        virtual string genObjDescTitle(void); \/\/ get the object descriptions (fixed part)$/;"	p	class:CylinderObject	access:public	signature:(void)
CylinderObject::genObjDescTitle	.\CylinderObject.h~	/^        virtual string genObjDescTitle(void); \/\/ get the object descriptions (fixed part)$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
CylinderObject::genObjPara	.\CylinderObject.cpp	/^string CylinderObject::genObjPara()$/;"	f	class:CylinderObject	signature:()
CylinderObject::genObjPara	.\CylinderObject.cpp~	/^string CylinderObject::genObjPara()$/;"	f	class:CylinderObject	signature:()
CylinderObject::genObjPara	.\CylinderObject.h	/^        virtual string genObjPara(void); \/\/ get the object parameters (varied part)$/;"	p	class:CylinderObject	access:public	signature:(void)
CylinderObject::genObjPara	.\CylinderObject.h~	/^        virtual string genObjPara(void); \/\/ get the object parameters (varied part)$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
CylinderObject::genObjParaTitle	.\CylinderObject.cpp	/^string CylinderObject::genObjParaTitle()$/;"	f	class:CylinderObject	signature:()
CylinderObject::genObjParaTitle	.\CylinderObject.cpp~	/^string CylinderObject::genObjParaTitle()$/;"	f	class:CylinderObject	signature:()
CylinderObject::genObjParaTitle	.\CylinderObject.h	/^        virtual string genObjParaTitle(void); \/\/ get the object parameters (varied part)$/;"	p	class:CylinderObject	access:public	signature:(void)
CylinderObject::genObjParaTitle	.\CylinderObject.h~	/^        virtual string genObjParaTitle(void); \/\/ get the object parameters (varied part)$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
CylinderObject::getObjID	.\CylinderObject.cpp	/^UINT CylinderObject::getObjID()$/;"	f	class:CylinderObject	signature:()
CylinderObject::getObjID	.\CylinderObject.cpp~	/^UINT CylinderObject::getObjID()$/;"	f	class:CylinderObject	signature:()
CylinderObject::getObjID	.\CylinderObject.h	/^        virtual UINT getObjID(void);$/;"	p	class:CylinderObject	access:public	signature:(void)
CylinderObject::getObjID	.\CylinderObject.h~	/^        virtual UINT getObjID(void);$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
CylinderObject::getObjName	.\CylinderObject.cpp	/^string CylinderObject::getObjName(void)$/;"	f	class:CylinderObject	signature:(void)
CylinderObject::getObjName	.\CylinderObject.cpp~	/^string CylinderObject::getObjName(void)$/;"	f	class:CylinderObject	signature:(void)
CylinderObject::getObjName	.\CylinderObject.h	/^        virtual string getObjName(void);$/;"	p	class:CylinderObject	access:public	signature:(void)
CylinderObject::getObjName	.\CylinderObject.h~	/^        virtual string getObjName(void);$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
CylinderObject::newObj	.\CylinderObject.cpp	/^TestObject *CylinderObject::newObj(TestObject &rObject)$/;"	f	class:CylinderObject	signature:(TestObject &rObject)
CylinderObject::newObj	.\CylinderObject.cpp~	/^TestObject *CylinderObject::newObj(TestObject &rObject)$/;"	f	class:CylinderObject	signature:(TestObject &rObject)
CylinderObject::newObj	.\CylinderObject.h	/^        virtual TestObject * newObj(TestObject &rObject);$/;"	p	class:CylinderObject	access:public	signature:(TestObject &rObject)
CylinderObject::newObj	.\CylinderObject.h~	/^        virtual TestObject * newObj(TestObject &rObject);$/;"	p	class:CylinderObject	file:	access:public	signature:(TestObject &rObject)
CylinderObject::objName	.\CylinderObject.h	/^        string objName;$/;"	m	class:CylinderObject	access:private
CylinderObject::objName	.\CylinderObject.h~	/^        string objName;$/;"	m	class:CylinderObject	file:	access:private
CylinderObject::objectID	.\CylinderObject.cpp	/^const UINT CylinderObject::objectID = 1;$/;"	m	class:CylinderObject	file:
CylinderObject::objectID	.\CylinderObject.cpp~	/^const UINT CylinderObject::objectID = 1;$/;"	m	class:CylinderObject	file:
CylinderObject::objectID	.\CylinderObject.h	/^        static const UINT objectID;$/;"	m	class:CylinderObject	access:public
CylinderObject::objectID	.\CylinderObject.h~	/^        static const UINT objectID;$/;"	m	class:CylinderObject	file:	access:public
CylinderObject::radius	.\CylinderObject.h	/^        GLfloat radius;$/;"	m	class:CylinderObject	access:public
CylinderObject::radius	.\CylinderObject.h~	/^        GLfloat radius;$/;"	m	class:CylinderObject	file:	access:public
CylinderObject::radiusRange	.\CylinderObject.h	/^        rangeType<GLfloat> radiusRange;$/;"	m	class:CylinderObject	access:public
CylinderObject::radiusRange	.\CylinderObject.h~	/^        rangeType<GLfloat> radiusRange;$/;"	m	class:CylinderObject	file:	access:public
CylinderObject::setRandPara	.\CylinderObject.cpp	/^void CylinderObject::setRandPara()$/;"	f	class:CylinderObject	signature:()
CylinderObject::setRandPara	.\CylinderObject.cpp~	/^void CylinderObject::setRandPara()$/;"	f	class:CylinderObject	signature:()
CylinderObject::setRandPara	.\CylinderObject.h	/^        virtual void setRandPara(void);$/;"	p	class:CylinderObject	access:public	signature:(void)
CylinderObject::setRandPara	.\CylinderObject.h~	/^        virtual void setRandPara(void);$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
CylinderObject::sideTextureID	.\CylinderObject.h	/^        GLuint sideTextureID;$/;"	m	class:CylinderObject	access:public
CylinderObject::sideTextureID	.\CylinderObject.h~	/^        GLuint sideTextureID;$/;"	m	class:CylinderObject	file:	access:public
CylinderObject::topTextureID	.\CylinderObject.h	/^        GLuint topTextureID;$/;"	m	class:CylinderObject	access:public
CylinderObject::topTextureID	.\CylinderObject.h~	/^        GLuint topTextureID;$/;"	m	class:CylinderObject	file:	access:public
CylinderObject::~CylinderObject	.\CylinderObject.cpp	/^CylinderObject::~CylinderObject(void)$/;"	f	class:CylinderObject	signature:(void)
CylinderObject::~CylinderObject	.\CylinderObject.cpp~	/^CylinderObject::~CylinderObject(void)$/;"	f	class:CylinderObject	signature:(void)
CylinderObject::~CylinderObject	.\CylinderObject.h	/^        virtual ~CylinderObject(void);$/;"	p	class:CylinderObject	access:public	signature:(void)
CylinderObject::~CylinderObject	.\CylinderObject.h~	/^        virtual ~CylinderObject(void);$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
D$	.\Release\glew32.dll	/^t</;"	v
DEFPUSHBUTTON	.\experiment.rc	/^    DEFPUSHBUTTON   "Confirm",IDOK,362,205,50,14$/;"	v
DEFPUSHBUTTON	.\experiment.rc	/^    DEFPUSHBUTTON   "Exit",IDEXIT,301,205,50,14$/;"	v
DEFPUSHBUTTON	.\experiment.rc	/^    DEFPUSHBUTTON   "OK",IDOK,113,41,50,14,WS_GROUP$/;"	v
DIALOGEX	.\experiment.rc	/^IDD_ABOUTBOX DIALOGEX 0, 0, 170, 62$/;"	v
DIALOGEX	.\experiment.rc	/^IDD_CONFWND DIALOGEX 0, 0, 419, 226$/;"	v
DISCRETE_DISPLAY	.\ConditionConstraints.h	/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$/;"	e	enum:DisplayMode
DISCRETE_DISPLAY	.\ConditionConstraints.h~	/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$/;"	e	enum:DisplayMode	file:
DISCRETE_DISPLAY	.\tags	/^CONTINUOUS_DISPLAY	.\\ConditionConstraints.h	\/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$\/;"	e	enum:DisplayMode$/;"	e	enum:DisplayMode	file:
DISPLAY_BLACKSCREEN	.\Separate2D3DViewScene.h	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	e	enum:Separate2D3DViewScene::sepSceneStatus
DISPLAY_BLACKSCREEN	.\Separate2D3DViewScene.h~	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	e	enum:Separate2D3DViewScene::sepSceneStatus	file:
DISPLAY_OBJECT	.\Separate2D3DViewScene.h	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	e	enum:Separate2D3DViewScene::sepSceneStatus
DISPLAY_OBJECT	.\Separate2D3DViewScene.h~	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	e	enum:Separate2D3DViewScene::sepSceneStatus	file:
DisplayMode	.\ConditionConstraints.h	/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$/;"	g
DisplayMode	.\ConditionConstraints.h~	/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$/;"	g	file:
DisplayMode	.\tags	/^CONTINUOUS_DISPLAY	.\\ConditionConstraints.h	\/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$\/;"	e	enum:DisplayMode$/;"	g	file:
E	.\Release\Conditions.obj	/^/;"	v
E	.\Release\StereoViewingFrameV2.obj	/^/;"	v
E	.\Release\TestObjectFactory.obj	/^/;"	v
EXPERIMENT	.\experiment.h	/^enum enumExperiMode {EXPERIMENT = 0, PRACTICE = 1};$/;"	e	enum:enumExperiMode
EXPERIMENT	.\experiment.h~	/^enum enumExperiMode {EXPERIMENT = 0, PRACTICE = 1};$/;"	e	enum:enumExperiMode	file:
Experiment	.\experiment.cpp	/^Experiment::Experiment(HINSTANCE hInstance):$/;"	f	class:Experiment	signature:(HINSTANCE hInstance)
Experiment	.\experiment.cpp~	/^Experiment::Experiment(HINSTANCE hInstance)$/;"	f	class:Experiment	signature:(HINSTANCE hInstance)
Experiment	.\experiment.h	/^        Experiment(HINSTANCE hInstance);$/;"	p	class:Experiment	access:private	signature:(HINSTANCE hInstance)
Experiment	.\experiment.h	/^class Experiment$/;"	c
Experiment	.\experiment.h~	/^        Experiment(HINSTANCE hInstance);$/;"	p	class:Experiment	file:	access:private	signature:(HINSTANCE hInstance)
Experiment	.\experiment.h~	/^class Experiment$/;"	c	file:
Experiment::Experiment	.\experiment.cpp	/^Experiment::Experiment(HINSTANCE hInstance):$/;"	f	class:Experiment	signature:(HINSTANCE hInstance)
Experiment::Experiment	.\experiment.cpp~	/^Experiment::Experiment(HINSTANCE hInstance)$/;"	f	class:Experiment	signature:(HINSTANCE hInstance)
Experiment::Experiment	.\experiment.h	/^        Experiment(HINSTANCE hInstance);$/;"	p	class:Experiment	access:private	signature:(HINSTANCE hInstance)
Experiment::Experiment	.\experiment.h~	/^        Experiment(HINSTANCE hInstance);$/;"	p	class:Experiment	file:	access:private	signature:(HINSTANCE hInstance)
Experiment::closeOutputFile	.\experiment.cpp	/^BOOL Experiment::closeOutputFile()$/;"	f	class:Experiment	signature:()
Experiment::closeOutputFile	.\experiment.cpp~	/^BOOL Experiment::closeOutputFile()$/;"	f	class:Experiment	signature:()
Experiment::closeOutputFile	.\experiment.h	/^        BOOL closeOutputFile();$/;"	p	class:Experiment	access:private	signature:()
Experiment::closeOutputFile	.\experiment.h~	/^        BOOL closeOutputFile();$/;"	p	class:Experiment	file:	access:private	signature:()
Experiment::conditionRepeatTimePerSec	.\experiment.h	/^        unsigned int conditionRepeatTimePerSec;$/;"	m	class:Experiment	access:public
Experiment::conditionRepeatTimePerSec	.\experiment.h~	/^        unsigned int conditionRepeatTimePerSec;$/;"	m	class:Experiment	file:	access:public
Experiment::currSecNo	.\experiment.h	/^        unsigned int currSecNo;$/;"	m	class:Experiment	access:public
Experiment::currSecNo	.\experiment.h~	/^        unsigned int currSecNo;$/;"	m	class:Experiment	file:	access:public
Experiment::currTrialID	.\experiment.h	/^        unsigned int currTrialID;$/;"	m	class:Experiment	access:public
Experiment::currTrialID	.\experiment.h~	/^        unsigned int currTrialID;$/;"	m	class:Experiment	file:	access:public
Experiment::debug	.\experiment.cpp	/^int const Experiment::debug = 0;$/;"	m	class:Experiment	file:
Experiment::debug	.\experiment.cpp~	/^int const Experiment::debug = 0;$/;"	m	class:Experiment	file:
Experiment::debug	.\experiment.h	/^        static const int debug;$/;"	m	class:Experiment	access:public
Experiment::debug	.\experiment.h~	/^        static const int debug;$/;"	m	class:Experiment	file:	access:public
Experiment::devMode	.\experiment.h	/^        DEVMODE devMode; \/\/ display settings$/;"	m	class:Experiment	access:public
Experiment::devMode	.\experiment.h~	/^        DEVMODE devMode; \/\/ display settings$/;"	m	class:Experiment	file:	access:public
Experiment::disposeSystem	.\experiment.cpp	/^BOOL Experiment::disposeSystem()$/;"	f	class:Experiment	signature:()
Experiment::disposeSystem	.\experiment.cpp~	/^BOOL Experiment::disposeSystem()$/;"	f	class:Experiment	signature:()
Experiment::disposeSystem	.\experiment.h	/^        BOOL disposeSystem();$/;"	p	class:Experiment	access:private	signature:()
Experiment::disposeSystem	.\experiment.h~	/^        BOOL disposeSystem();$/;"	p	class:Experiment	file:	access:private	signature:()
Experiment::experiMode	.\experiment.h	/^        enumExperiMode experiMode; \/\/ 0 -- experiment mode; 1 -- practice mode;$/;"	m	class:Experiment	access:public
Experiment::experiMode	.\experiment.h~	/^        enumExperiMode experiMode; \/\/ 0 -- experiment mode; 1 -- practice mode;$/;"	m	class:Experiment	file:	access:public
Experiment::experimentConditions	.\experiment.h	/^        Conditions *experimentConditions; $/;"	m	class:Experiment	access:public
Experiment::experimentConditions	.\experiment.h~	/^        Conditions *experimentConditions; $/;"	m	class:Experiment	file:	access:public
Experiment::getInstance	.\experiment.cpp	/^Experiment *Experiment::getInstance(HINSTANCE hInstance)$/;"	f	class:Experiment	signature:(HINSTANCE hInstance)
Experiment::getInstance	.\experiment.cpp~	/^Experiment *Experiment::getInstance(HINSTANCE hInstance)$/;"	f	class:Experiment	signature:(HINSTANCE hInstance)
Experiment::getInstance	.\experiment.h	/^        static Experiment *getInstance(HINSTANCE hInstance);$/;"	p	class:Experiment	access:public	signature:(HINSTANCE hInstance)
Experiment::getInstance	.\experiment.h~	/^        static Experiment *getInstance(HINSTANCE hInstance);$/;"	p	class:Experiment	file:	access:public	signature:(HINSTANCE hInstance)
Experiment::hFileOut	.\experiment.h	/^        fstream hFileOut;$/;"	m	class:Experiment	access:private
Experiment::hFileOut	.\experiment.h~	/^        fstream hFileOut;$/;"	m	class:Experiment	file:	access:private
Experiment::hInst	.\experiment.cpp	/^HINSTANCE Experiment::hInst = NULL;$/;"	m	class:Experiment	file:
Experiment::hInst	.\experiment.cpp~	/^HINSTANCE Experiment::hInst = NULL;$/;"	m	class:Experiment	file:
Experiment::hInst	.\experiment.h	/^        static HINSTANCE hInst;$/;"	m	class:Experiment	access:private
Experiment::hInst	.\experiment.h~	/^        static HINSTANCE hInst;$/;"	m	class:Experiment	file:	access:private
Experiment::initOutputFile	.\experiment.cpp	/^BOOL Experiment::initOutputFile()$/;"	f	class:Experiment	signature:()
Experiment::initOutputFile	.\experiment.cpp~	/^BOOL Experiment::initOutputFile()$/;"	f	class:Experiment	signature:()
Experiment::initOutputFile	.\experiment.h	/^        BOOL initOutputFile();$/;"	p	class:Experiment	access:private	signature:()
Experiment::initOutputFile	.\experiment.h~	/^        BOOL initOutputFile();$/;"	p	class:Experiment	file:	access:private	signature:()
Experiment::initSystem	.\experiment.cpp	/^BOOL Experiment::initSystem()$/;"	f	class:Experiment	signature:()
Experiment::initSystem	.\experiment.cpp~	/^BOOL Experiment::initSystem()$/;"	f	class:Experiment	signature:()
Experiment::initSystem	.\experiment.h	/^        BOOL initSystem();$/;"	p	class:Experiment	access:private	signature:()
Experiment::initSystem	.\experiment.h~	/^        BOOL initSystem();$/;"	p	class:Experiment	file:	access:private	signature:()
Experiment::isNewSection	.\experiment.cpp	/^BOOL Experiment::isNewSection()$/;"	f	class:Experiment	signature:()
Experiment::isNewSection	.\experiment.cpp~	/^BOOL Experiment::isNewSection()$/;"	f	class:Experiment	signature:()
Experiment::isNewSection	.\experiment.h	/^        BOOL isNewSection(); $/;"	p	class:Experiment	access:public	signature:()
Experiment::isNewSection	.\experiment.h~	/^        BOOL isNewSection(); $/;"	p	class:Experiment	file:	access:public	signature:()
Experiment::m_pInstance	.\experiment.cpp	/^auto_ptr<Experiment> Experiment::m_pInstance;$/;"	m	class:Experiment	file:
Experiment::m_pInstance	.\experiment.cpp~	/^auto_ptr<Experiment> Experiment::m_pInstance;$/;"	m	class:Experiment	file:
Experiment::m_pInstance	.\experiment.h	/^        static auto_ptr<Experiment> m_pInstance;$/;"	m	class:Experiment	access:private
Experiment::m_pInstance	.\experiment.h~	/^        static auto_ptr<Experiment> m_pInstance;$/;"	m	class:Experiment	file:	access:private
Experiment::maxSecNo	.\experiment.h	/^        unsigned int maxSecNo;$/;"	m	class:Experiment	access:public
Experiment::maxSecNo	.\experiment.h~	/^        unsigned int maxSecNo;$/;"	m	class:Experiment	file:	access:public
Experiment::objectFactories	.\experiment.h	/^        vector<TestObjectFactory *> objectFactories;$/;"	m	class:Experiment	access:private
Experiment::objectFactories	.\experiment.h~	/^        vector<TestObjectFactory *> objectFactories;$/;"	m	class:Experiment	file:	access:private
Experiment::outFilename	.\experiment.h	/^        string outFilename;$/;"	m	class:Experiment	access:public
Experiment::outFilename	.\experiment.h~	/^        string outFilename;$/;"	m	class:Experiment	file:	access:public
Experiment::pScreen	.\experiment.h	/^        Screen  *pScreen;$/;"	m	class:Experiment	access:public
Experiment::pScreen	.\experiment.h~	/^        Screen  *pScreen;$/;"	m	class:Experiment	file:	access:public
Experiment::proceedExperiment	.\experiment.cpp	/^BOOL Experiment::proceedExperiment()$/;"	f	class:Experiment	signature:()
Experiment::proceedExperiment	.\experiment.cpp~	/^BOOL Experiment::proceedExperiment()$/;"	f	class:Experiment	signature:()
Experiment::proceedExperiment	.\experiment.h	/^        BOOL proceedExperiment();$/;"	p	class:Experiment	access:private	signature:()
Experiment::proceedExperiment	.\experiment.h~	/^        BOOL proceedExperiment();$/;"	p	class:Experiment	file:	access:private	signature:()
Experiment::recordConfigurations	.\experiment.cpp	/^BOOL Experiment::recordConfigurations()$/;"	f	class:Experiment	signature:()
Experiment::recordConfigurations	.\experiment.cpp~	/^BOOL Experiment::recordConfigurations()$/;"	f	class:Experiment	signature:()
Experiment::recordConfigurations	.\experiment.h	/^        BOOL recordConfigurations();$/;"	p	class:Experiment	access:private	signature:()
Experiment::recordConfigurations	.\experiment.h~	/^        BOOL recordConfigurations();$/;"	p	class:Experiment	file:	access:private	signature:()
Experiment::recordConstraints	.\experiment.cpp	/^BOOL Experiment::recordConstraints()$/;"	f	class:Experiment	signature:()
Experiment::recordConstraints	.\experiment.cpp~	/^BOOL Experiment::recordConstraints()$/;"	f	class:Experiment	signature:()
Experiment::recordConstraints	.\experiment.h	/^        BOOL recordConstraints();$/;"	p	class:Experiment	access:private	signature:()
Experiment::recordConstraints	.\experiment.h~	/^        BOOL recordConstraints();$/;"	p	class:Experiment	file:	access:private	signature:()
Experiment::startProgram	.\experiment.cpp	/^BOOL Experiment::startProgram()$/;"	f	class:Experiment	signature:()
Experiment::startProgram	.\experiment.cpp~	/^BOOL Experiment::startProgram()$/;"	f	class:Experiment	signature:()
Experiment::startProgram	.\experiment.h	/^        BOOL startProgram();$/;"	p	class:Experiment	access:public	signature:()
Experiment::startProgram	.\experiment.h~	/^        BOOL startProgram();$/;"	p	class:Experiment	file:	access:public	signature:()
Experiment::strDate	.\experiment.h	/^        string strDate;$/;"	m	class:Experiment	access:public
Experiment::strDate	.\experiment.h~	/^        string strDate;$/;"	m	class:Experiment	file:	access:public
Experiment::strTime	.\experiment.h	/^        string strTime;$/;"	m	class:Experiment	access:public
Experiment::strTime	.\experiment.h~	/^        string strTime;$/;"	m	class:Experiment	file:	access:public
Experiment::subjectID	.\experiment.h	/^        string subjectID;$/;"	m	class:Experiment	access:public
Experiment::subjectID	.\experiment.h~	/^        string subjectID;$/;"	m	class:Experiment	file:	access:public
Experiment::trialsPerSec	.\experiment.h	/^        unsigned int trialsPerSec;$/;"	m	class:Experiment	access:public
Experiment::trialsPerSec	.\experiment.h~	/^        unsigned int trialsPerSec;$/;"	m	class:Experiment	file:	access:public
Experiment::writeOutputs	.\experiment.cpp	/^BOOL Experiment::writeOutputs(string& strOutputs)$/;"	f	class:Experiment	signature:(string& strOutputs)
Experiment::writeOutputs	.\experiment.cpp~	/^BOOL Experiment::writeOutputs(string& strOutputs)$/;"	f	class:Experiment	signature:(string& strOutputs)
Experiment::writeOutputs	.\experiment.h	/^        BOOL writeOutputs(string& strOutputs);$/;"	p	class:Experiment	access:public	signature:(string& strOutputs)
Experiment::writeOutputs	.\experiment.h~	/^        BOOL writeOutputs(string& strOutputs);$/;"	p	class:Experiment	file:	access:public	signature:(string& strOutputs)
Experiment::xyz2D	.\experiment.h	/^        vector<GLfloat> xyz2D;$/;"	m	class:Experiment	access:private
Experiment::xyz2D	.\experiment.h~	/^        vector<GLfloat> xyz2D;$/;"	m	class:Experiment	file:	access:private
Experiment::xyz3D	.\experiment.h	/^        vector<GLfloat> xyz3D;$/;"	m	class:Experiment	access:private
Experiment::xyz3D	.\experiment.h~	/^        vector<GLfloat> xyz3D;$/;"	m	class:Experiment	file:	access:private
Experiment::~Experiment	.\experiment.cpp	/^Experiment::~Experiment(void)$/;"	f	class:Experiment	signature:(void)
Experiment::~Experiment	.\experiment.cpp~	/^Experiment::~Experiment(void)$/;"	f	class:Experiment	signature:(void)
Experiment::~Experiment	.\experiment.h	/^        ~Experiment();$/;"	p	class:Experiment	access:public	signature:()
Experiment::~Experiment	.\experiment.h~	/^        ~Experiment();$/;"	p	class:Experiment	file:	access:public	signature:()
FONT	.\experiment.rc	/^FONT 8, "MS Shell Dlg", 0, 0, 0x1$/;"	v
FONT	.\experiment.rc	/^FONT 8, "MS Shell Dlg", 400, 0, 0x1$/;"	v
FPSCount	.\Screen.h	/^        LARGE_INTEGER FPSCount;$/;"	m	class:Screen	access:private
FPSCount	.\Screen.h~	/^        LARGE_INTEGER FPSCount;$/;"	m	class:Screen	file:	access:private
File	.\experiment.sln	/^Microsoft Visual Studio Solution File, Format Version 10.00$/;"	v
G3_Myfb	.\Debug\experiment.obj	/^</;"	v
GROUPBOX	.\experiment.rc	/^    GROUPBOX        "Experiment",IDC_STATIC,213,57,192,39$/;"	v
GROUPBOX	.\experiment.rc	/^    GROUPBOX        "Output",IDC_STATIC,7,102,402,90$/;"	v
GROUPBOX	.\experiment.rc	/^    GROUPBOX        "Screen",IDC_STATIC,213,7,192,40$/;"	v
GROUPBOX	.\experiment.rc	/^    GROUPBOX        "Trials and Sections",IDC_STATIC,6,7,199,89$/;"	v
GenProjectionMatrix	.\StereoViewingFrameV2.cpp	/^void StereoViewingFrame::GenProjectionMatrix(int eyenum)$/;"	f	class:StereoViewingFrame	signature:(int eyenum)
GenProjectionMatrix	.\StereoViewingFrameV2.cpp~	/^void StereoViewingFrame::GenProjectionMatrix(int eyenum)$/;"	f	class:StereoViewingFrame	signature:(int eyenum)
GenProjectionMatrix	.\StereoViewingFrameV2.h	/^	void GenProjectionMatrix(int eyenum);$/;"	p	class:StereoViewingFrame	access:private	signature:(int eyenum)
GenProjectionMatrix	.\StereoViewingFrameV2.h~	/^	void GenProjectionMatrix(int eyenum);$/;"	p	class:StereoViewingFrame	file:	access:private	signature:(int eyenum)
GetScreenPixels	.\StereoViewingFrameV2.cpp	/^void StereoViewingFrame::GetScreenPixels()$/;"	f	class:StereoViewingFrame	signature:()
GetScreenPixels	.\StereoViewingFrameV2.cpp~	/^void StereoViewingFrame::GetScreenPixels()$/;"	f	class:StereoViewingFrame	signature:()
GetScreenPixels	.\StereoViewingFrameV2.h	/^	void GetScreenPixels(); \/\/ use GL to get screen pixels$/;"	p	class:StereoViewingFrame	access:public	signature:()
GetScreenPixels	.\StereoViewingFrameV2.h~	/^	void GetScreenPixels(); \/\/ use GL to get screen pixels$/;"	p	class:StereoViewingFrame	file:	access:public	signature:()
ICON	.\experiment.rc	/^    ICON            128,IDC_STATIC,14,14,21,20$/;"	v
IDC_COMBO1	.\experiment.rc	/^    COMBOBOX        IDC_COMBO1,221,30,174,66,CBS_DROPDOWN | CBS_SORT | WS_VSCROLL | WS_TABSTOP$/;"	v
IDC_EDIT1	.\experiment.rc	/^    EDITTEXT        IDC_EDIT1,126,44,68,14,ES_AUTOHSCROLL | WS_DISABLED$/;"	v
IDC_EDIT2	.\experiment.rc	/^    EDITTEXT        IDC_EDIT2,126,24,68,14,ES_AUTOHSCROLL | WS_DISABLED$/;"	v
IDC_EDIT3	.\experiment.rc	/^    EDITTEXT        IDC_EDIT3,126,66,68,14,ES_AUTOHSCROLL | ES_READONLY | WS_DISABLED | NOT WS_TABSTOP$/;"	v
IDC_EDIT4	.\experiment.rc	/^    EDITTEXT        IDC_EDIT4,89,114,96,12,ES_AUTOHSCROLL$/;"	v
IDC_EDIT5	.\experiment.rc	/^    EDITTEXT        IDC_EDIT5,89,150,300,12,ES_AUTOHSCROLL$/;"	v
IDC_EDIT6	.\experiment.rc	/^    EDITTEXT        IDC_EDIT6,89,172,300,12,ES_AUTOHSCROLL$/;"	v
IDC_RADIO1	.\experiment.rc	/^    CONTROL         "Experiment",IDC_RADIO1,"Button",BS_AUTORADIOBUTTON,276,78,52,10$/;"	v
IDC_RADIO2	.\experiment.rc	/^    CONTROL         "Practice",IDC_RADIO2,"Button",BS_AUTORADIOBUTTON,342,78,41,10$/;"	v
IDC_STATIC	.\experiment.rc	/^    GROUPBOX        "Experiment",IDC_STATIC,213,57,192,39$/;"	v
IDC_STATIC	.\experiment.rc	/^    GROUPBOX        "Output",IDC_STATIC,7,102,402,90$/;"	v
IDC_STATIC	.\experiment.rc	/^    GROUPBOX        "Screen",IDC_STATIC,213,7,192,40$/;"	v
IDC_STATIC	.\experiment.rc	/^    GROUPBOX        "Trials and Sections",IDC_STATIC,6,7,199,89$/;"	v
IDC_STATIC	.\experiment.rc	/^    ICON            128,IDC_STATIC,14,14,21,20$/;"	v
IDC_STATIC	.\experiment.rc	/^    LTEXT           """\/SID\/"": Subject ID, ""\/Date\/"": Experiment Date, ""\/Time\/"": Experiment Time",IDC_STATIC,91,138,306,8$/;"	v
IDC_STATIC	.\experiment.rc	/^    LTEXT           "Copyright (C) 2010",IDC_STATIC,42,26,114,8$/;"	v
IDC_STATIC	.\experiment.rc	/^    LTEXT           "Mode:",IDC_STATIC,228,78,18,8$/;"	v
IDC_STATIC	.\experiment.rc	/^    LTEXT           "Number of Sections:",IDC_STATIC,50,27,70,8$/;"	v
IDC_STATIC	.\experiment.rc	/^    LTEXT           "Number of Trials in One Section:",IDC_STATIC,12,47,108,8$/;"	v
IDC_STATIC	.\experiment.rc	/^    LTEXT           "Output Filename Rule:",IDC_STATIC,14,138,72,8$/;"	v
IDC_STATIC	.\experiment.rc	/^    LTEXT           "Output Filename:",IDC_STATIC,30,174,60,8$/;"	v
IDC_STATIC	.\experiment.rc	/^    LTEXT           "Resolution and Refresh Rate",IDC_STATIC,222,18,96,8$/;"	v
IDC_STATIC	.\experiment.rc	/^    LTEXT           "Subject ID:",IDC_STATIC,49,114,36,8$/;"	v
IDC_STATIC	.\experiment.rc	/^    LTEXT           "Total Number of Trials:",IDC_STATIC,42,69,76,8$/;"	v
IDC_STATIC	.\experiment.rc	/^    LTEXT           "experiment, Version 1.0",IDC_STATIC,42,14,114,8,SS_NOPREFIX$/;"	v
IDD_ABOUTBOX	.\experiment.rc	/^    IDD_ABOUTBOX, DIALOG$/;"	v
IDD_CONFWND	.\experiment.rc	/^    IDD_CONFWND, DIALOG$/;"	v
IDEXIT	.\experiment.rc	/^    DEFPUSHBUTTON   "Exit",IDEXIT,301,205,50,14$/;"	v
IDLE	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state
IDLE	.\Trial.h~	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state	file:
IDM_ABOUT	.\experiment.rc	/^    "?",            IDM_ABOUT,              ASCII,  ALT$/;"	v
IDM_ABOUT	.\experiment.rc	/^    "\/",            IDM_ABOUT,              ASCII,  ALT$/;"	v
IDOK	.\experiment.rc	/^    DEFPUSHBUTTON   "Confirm",IDOK,362,205,50,14$/;"	v
IDOK	.\experiment.rc	/^    DEFPUSHBUTTON   "OK",IDOK,113,41,50,14,WS_GROUP$/;"	v
J	.\Debug\CylinderFactory.obj	/^/;"	v
JEFF_STEREO_VIEWING_FRAME	.\StereoViewingFrameV2.h	3;"	d
JEFF_STEREO_VIEWING_FRAME	.\StereoViewingFrameV2.h~	3;"	d	file:
L	.\Release\PreTrialScene.obj	/^/;"	v
L	.\Release\TestObject.obj	/^:šþ/;"	v
L	.\Release\TestObjectFactory.obj	/^/;"	v
L0	.\Release\PreTrialScene.obj	/^/;"	v
LANG_ENGLISH	.\experiment.rc	/^LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US$/;"	v
LEFTMARGIN	.\experiment.rc	/^        LEFTMARGIN, 7$/;"	v
LTEXT	.\experiment.rc	/^    LTEXT           """\/SID\/"": Subject ID, ""\/Date\/"": Experiment Date, ""\/Time\/"": Experiment Time",IDC_STATIC,91,138,306,8$/;"	v
LTEXT	.\experiment.rc	/^    LTEXT           "Copyright (C) 2010",IDC_STATIC,42,26,114,8$/;"	v
LTEXT	.\experiment.rc	/^    LTEXT           "Mode:",IDC_STATIC,228,78,18,8$/;"	v
LTEXT	.\experiment.rc	/^    LTEXT           "Number of Sections:",IDC_STATIC,50,27,70,8$/;"	v
LTEXT	.\experiment.rc	/^    LTEXT           "Number of Trials in One Section:",IDC_STATIC,12,47,108,8$/;"	v
LTEXT	.\experiment.rc	/^    LTEXT           "Output Filename Rule:",IDC_STATIC,14,138,72,8$/;"	v
LTEXT	.\experiment.rc	/^    LTEXT           "Output Filename:",IDC_STATIC,30,174,60,8$/;"	v
LTEXT	.\experiment.rc	/^    LTEXT           "Resolution and Refresh Rate",IDC_STATIC,222,18,96,8$/;"	v
LTEXT	.\experiment.rc	/^    LTEXT           "Subject ID:",IDC_STATIC,49,114,36,8$/;"	v
LTEXT	.\experiment.rc	/^    LTEXT           "Total Number of Trials:",IDC_STATIC,42,69,76,8$/;"	v
LTEXT	.\experiment.rc	/^    LTEXT           "experiment, Version 1.0",IDC_STATIC,42,14,114,8,SS_NOPREFIX$/;"	v
LoadFrame	.\StereoViewingFrameV2.cpp	/^bool StereoViewingFrame::LoadFrame(string filename)$/;"	f	class:StereoViewingFrame	signature:(string filename)
LoadFrame	.\StereoViewingFrameV2.cpp~	/^bool StereoViewingFrame::LoadFrame(string filename)$/;"	f	class:StereoViewingFrame	signature:(string filename)
LoadFrame	.\StereoViewingFrameV2.h	/^	bool LoadFrame(string filename);$/;"	p	class:StereoViewingFrame	access:public	signature:(string filename)
LoadFrame	.\StereoViewingFrameV2.h~	/^	bool LoadFrame(string filename);$/;"	p	class:StereoViewingFrame	file:	access:public	signature:(string filename)
M	.\Debug\TestObject.obj	/^/;"	v
MAIN_SCENE	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state
MAIN_SCENE	.\Trial.h~	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state	file:
MENUITEM	.\experiment.rc	/^        MENUITEM "&About ...",                  IDM_ABOUT$/;"	v
MENUITEM	.\experiment.rc	/^        MENUITEM "E&xit",                       IDM_EXIT$/;"	v
MakeProjectionMatrices	.\StereoViewingFrameV2.h	/^	void MakeProjectionMatrices()$/;"	f	class:StereoViewingFrame	access:public	signature:()
MakeProjectionMatrices	.\StereoViewingFrameV2.h~	/^	void MakeProjectionMatrices()$/;"	f	class:StereoViewingFrame	access:public	signature:()
MixedObjectViewScene	.\MixedObjectViewScene.cpp	/^MixedObjectViewScene::MixedObjectViewScene(void)$/;"	f	class:MixedObjectViewScene	signature:(void)
MixedObjectViewScene	.\MixedObjectViewScene.cpp~	/^MixedObjectViewScene::MixedObjectViewScene(void)$/;"	f	class:MixedObjectViewScene	signature:(void)
MixedObjectViewScene	.\MixedObjectViewScene.h	/^        MixedObjectViewScene(void);$/;"	p	class:MixedObjectViewScene	access:public	signature:(void)
MixedObjectViewScene	.\MixedObjectViewScene.h	/^class MixedObjectViewScene :$/;"	c	inherits:Scene
MixedObjectViewScene	.\MixedObjectViewScene.h~	/^        MixedObjectViewScene(void);$/;"	p	class:MixedObjectViewScene	file:	access:public	signature:(void)
MixedObjectViewScene	.\MixedObjectViewScene.h~	/^class MixedObjectViewScene :$/;"	c	file:	inherits:Scene
MixedObjectViewScene::MixedObjectViewScene	.\MixedObjectViewScene.cpp	/^MixedObjectViewScene::MixedObjectViewScene(void)$/;"	f	class:MixedObjectViewScene	signature:(void)
MixedObjectViewScene::MixedObjectViewScene	.\MixedObjectViewScene.cpp~	/^MixedObjectViewScene::MixedObjectViewScene(void)$/;"	f	class:MixedObjectViewScene	signature:(void)
MixedObjectViewScene::MixedObjectViewScene	.\MixedObjectViewScene.h	/^        MixedObjectViewScene(void);$/;"	p	class:MixedObjectViewScene	access:public	signature:(void)
MixedObjectViewScene::MixedObjectViewScene	.\MixedObjectViewScene.h~	/^        MixedObjectViewScene(void);$/;"	p	class:MixedObjectViewScene	file:	access:public	signature:(void)
MixedObjectViewScene::getRandObj	.\MixedObjectViewScene.h~	/^        TestObject *getRandObj(void);$/;"	p	class:MixedObjectViewScene	file:	access:protected	signature:(void)
MixedObjectViewScene::pObj	.\MixedObjectViewScene.h~	/^        TestObject *pObj;$/;"	m	class:MixedObjectViewScene	file:	access:protected
MixedObjectViewScene::~MixedObjectViewScene	.\MixedObjectViewScene.cpp	/^MixedObjectViewScene::~MixedObjectViewScene(void)$/;"	f	class:MixedObjectViewScene	signature:(void)
MixedObjectViewScene::~MixedObjectViewScene	.\MixedObjectViewScene.cpp~	/^MixedObjectViewScene::~MixedObjectViewScene(void)$/;"	f	class:MixedObjectViewScene	signature:(void)
MixedObjectViewScene::~MixedObjectViewScene	.\MixedObjectViewScene.h	/^        virtual ~MixedObjectViewScene(void);$/;"	p	class:MixedObjectViewScene	access:public	signature:(void)
MixedObjectViewScene::~MixedObjectViewScene	.\MixedObjectViewScene.h~	/^        virtual ~MixedObjectViewScene(void);$/;"	p	class:MixedObjectViewScene	file:	access:public	signature:(void)
O	.\Release\TestObjectFactory.obj	/^/;"	v
ORTHOGONAL	.\TestObject.h	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	e	enum:TestObject::enumProj2DMode
ORTHOGONAL	.\TestObject.h~	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	e	enum:TestObject::enumProj2DMode	file:
Overlapped2DViewScene	.\Overlapped2DViewScene.cpp	/^Overlapped2DViewScene::Overlapped2DViewScene(cond_t& cond):$/;"	f	class:Overlapped2DViewScene	signature:(cond_t& cond)
Overlapped2DViewScene	.\Overlapped2DViewScene.cpp~	/^Overlapped2DViewScene::Overlapped2DViewScene(cond_t& cond):$/;"	f	class:Overlapped2DViewScene	signature:(cond_t& cond)
Overlapped2DViewScene	.\Overlapped2DViewScene.h	/^        Overlapped2DViewScene(cond_t& cond);$/;"	p	class:Overlapped2DViewScene	access:public	signature:(cond_t& cond)
Overlapped2DViewScene	.\Overlapped2DViewScene.h	/^class Overlapped2DViewScene :$/;"	c	inherits:MixedObjectViewScene
Overlapped2DViewScene	.\Overlapped2DViewScene.h~	/^        Overlapped2DViewScene(cond_t& cond);$/;"	p	class:Overlapped2DViewScene	file:	access:public	signature:(cond_t& cond)
Overlapped2DViewScene	.\Overlapped2DViewScene.h~	/^class Overlapped2DViewScene :$/;"	c	file:	inherits:MixedObjectViewScene
Overlapped2DViewScene::Overlapped2DViewScene	.\Overlapped2DViewScene.cpp	/^Overlapped2DViewScene::Overlapped2DViewScene(cond_t& cond):$/;"	f	class:Overlapped2DViewScene	signature:(cond_t& cond)
Overlapped2DViewScene::Overlapped2DViewScene	.\Overlapped2DViewScene.cpp~	/^Overlapped2DViewScene::Overlapped2DViewScene(cond_t& cond):$/;"	f	class:Overlapped2DViewScene	signature:(cond_t& cond)
Overlapped2DViewScene::Overlapped2DViewScene	.\Overlapped2DViewScene.h	/^        Overlapped2DViewScene(cond_t& cond);$/;"	p	class:Overlapped2DViewScene	access:public	signature:(cond_t& cond)
Overlapped2DViewScene::Overlapped2DViewScene	.\Overlapped2DViewScene.h~	/^        Overlapped2DViewScene(cond_t& cond);$/;"	p	class:Overlapped2DViewScene	file:	access:public	signature:(cond_t& cond)
Overlapped2DViewScene::condition	.\Overlapped2DViewScene.h	/^        cond_t& condition;$/;"	m	class:Overlapped2DViewScene	access:private
Overlapped2DViewScene::condition	.\Overlapped2DViewScene.h~	/^        cond_t& condition;$/;"	m	class:Overlapped2DViewScene	file:	access:private
Overlapped2DViewScene::handleKeyboardEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(unsigned char key, int x, int y)
Overlapped2DViewScene::handleKeyboardEvent	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(unsigned char key, int x, int y)
Overlapped2DViewScene::handleKeyboardEvent	.\Overlapped2DViewScene.h	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(unsigned char key, int x, int y)
Overlapped2DViewScene::handleKeyboardEvent	.\Overlapped2DViewScene.h~	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(unsigned char key, int x, int y)
Overlapped2DViewScene::handleKeyboardSpecialEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int key, int x, int y)
Overlapped2DViewScene::handleKeyboardSpecialEvent	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int key, int x, int y)
Overlapped2DViewScene::handleKeyboardSpecialEvent	.\Overlapped2DViewScene.h	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(int key, int x, int y)
Overlapped2DViewScene::handleKeyboardSpecialEvent	.\Overlapped2DViewScene.h~	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(int key, int x, int y)
Overlapped2DViewScene::handleMouseEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int button, int state, int x, int y)
Overlapped2DViewScene::handleMouseEvent	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int button, int state, int x, int y)
Overlapped2DViewScene::handleMouseEvent	.\Overlapped2DViewScene.h	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(int button, int state, int x, int y)
Overlapped2DViewScene::handleMouseEvent	.\Overlapped2DViewScene.h~	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(int button, int state, int x, int y)
Overlapped2DViewScene::handleMouseMotionEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int x, int y)
Overlapped2DViewScene::handleMouseMotionEvent	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int x, int y)
Overlapped2DViewScene::handleMouseMotionEvent	.\Overlapped2DViewScene.h	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(int x, int y)
Overlapped2DViewScene::handleMouseMotionEvent	.\Overlapped2DViewScene.h~	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(int x, int y)
Overlapped2DViewScene::handleMousePassiveMotionEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int x, int y)
Overlapped2DViewScene::handleMousePassiveMotionEvent	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int x, int y)
Overlapped2DViewScene::handleMousePassiveMotionEvent	.\Overlapped2DViewScene.h	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(int x, int y)
Overlapped2DViewScene::handleMousePassiveMotionEvent	.\Overlapped2DViewScene.h~	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(int x, int y)
Overlapped2DViewScene::handleTimerEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleTimerEvent(int timerID)$/;"	f	class:Overlapped2DViewScene	signature:(int timerID)
Overlapped2DViewScene::handleTimerEvent	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::handleTimerEvent(int timerID)$/;"	f	class:Overlapped2DViewScene	signature:(int timerID)
Overlapped2DViewScene::handleTimerEvent	.\Overlapped2DViewScene.h	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(int timerID)
Overlapped2DViewScene::handleTimerEvent	.\Overlapped2DViewScene.h~	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(int timerID)
Overlapped2DViewScene::initDisplay	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::initDisplay()$/;"	f	class:Overlapped2DViewScene	signature:()
Overlapped2DViewScene::initDisplay	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::initDisplay()$/;"	f	class:Overlapped2DViewScene	signature:()
Overlapped2DViewScene::initDisplay	.\Overlapped2DViewScene.h	/^        virtual BOOL initDisplay();$/;"	p	class:Overlapped2DViewScene	access:private	signature:()
Overlapped2DViewScene::initDisplay	.\Overlapped2DViewScene.h~	/^        virtual BOOL initDisplay();$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:()
Overlapped2DViewScene::renderScene	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::renderScene()$/;"	f	class:Overlapped2DViewScene	signature:()
Overlapped2DViewScene::renderScene	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::renderScene()$/;"	f	class:Overlapped2DViewScene	signature:()
Overlapped2DViewScene::renderScene	.\Overlapped2DViewScene.h	/^        virtual BOOL renderScene(); $/;"	p	class:Overlapped2DViewScene	access:private	signature:()
Overlapped2DViewScene::renderScene	.\Overlapped2DViewScene.h~	/^        virtual BOOL renderScene(); $/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:()
Overlapped2DViewScene::reshape	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::reshape(int w, int h)$/;"	f	class:Overlapped2DViewScene	signature:(int w, int h)
Overlapped2DViewScene::reshape	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::reshape(int w, int h)$/;"	f	class:Overlapped2DViewScene	signature:(int w, int h)
Overlapped2DViewScene::reshape	.\Overlapped2DViewScene.h	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(int w, int h)
Overlapped2DViewScene::reshape	.\Overlapped2DViewScene.h~	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(int w, int h)
Overlapped2DViewScene::startScene	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::startScene()$/;"	f	class:Overlapped2DViewScene	signature:()
Overlapped2DViewScene::startScene	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::startScene()$/;"	f	class:Overlapped2DViewScene	signature:()
Overlapped2DViewScene::startScene	.\Overlapped2DViewScene.h	/^        virtual BOOL startScene();$/;"	p	class:Overlapped2DViewScene	access:public	signature:()
Overlapped2DViewScene::startScene	.\Overlapped2DViewScene.h~	/^        virtual BOOL startScene();$/;"	p	class:Overlapped2DViewScene	file:	access:public	signature:()
Overlapped2DViewScene::~Overlapped2DViewScene	.\Overlapped2DViewScene.cpp	/^Overlapped2DViewScene::~Overlapped2DViewScene(void)$/;"	f	class:Overlapped2DViewScene	signature:(void)
Overlapped2DViewScene::~Overlapped2DViewScene	.\Overlapped2DViewScene.cpp~	/^Overlapped2DViewScene::~Overlapped2DViewScene(void)$/;"	f	class:Overlapped2DViewScene	signature:(void)
Overlapped2DViewScene::~Overlapped2DViewScene	.\Overlapped2DViewScene.h	/^        virtual ~Overlapped2DViewScene(void);$/;"	p	class:Overlapped2DViewScene	access:public	signature:(void)
Overlapped2DViewScene::~Overlapped2DViewScene	.\Overlapped2DViewScene.h~	/^        virtual ~Overlapped2DViewScene(void);$/;"	p	class:Overlapped2DViewScene	file:	access:public	signature:(void)
PFNGLNAMEDPROGRAMSTRINGEXTPROC	.\Debug\stdafx.obj	/^/;"	v
POST_TRIAL_SCENE	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state
POST_TRIAL_SCENE	.\Trial.h~	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state	file:
PRACTICE	.\experiment.h	/^enum enumExperiMode {EXPERIMENT = 0, PRACTICE = 1};$/;"	e	enum:enumExperiMode
PRACTICE	.\experiment.h~	/^enum enumExperiMode {EXPERIMENT = 0, PRACTICE = 1};$/;"	e	enum:enumExperiMode	file:
PRE_TRIAL_SCENE	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state
PRE_TRIAL_SCENE	.\Trial.h~	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state	file:
PROJECTION	.\TestObject.h	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	e	enum:TestObject::enumProj2DMode
PROJECTION	.\TestObject.h~	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	e	enum:TestObject::enumProj2DMode	file:
PostExperimentScene	.\PostExperimentScene.cpp	/^PostExperimentScene::PostExperimentScene(void)$/;"	f	class:PostExperimentScene	signature:(void)
PostExperimentScene	.\PostExperimentScene.cpp~	/^PostExperimentScene::PostExperimentScene(void)$/;"	f	class:PostExperimentScene	signature:(void)
PostExperimentScene	.\PostExperimentScene.h	/^        PostExperimentScene(void);$/;"	p	class:PostExperimentScene	access:public	signature:(void)
PostExperimentScene	.\PostExperimentScene.h	/^class PostExperimentScene :$/;"	c	inherits:PureWordScene
PostExperimentScene	.\PostExperimentScene.h~	/^        PostExperimentScene(void);$/;"	p	class:PostExperimentScene	file:	access:public	signature:(void)
PostExperimentScene	.\PostExperimentScene.h~	/^class PostExperimentScene :$/;"	c	file:	inherits:PureWordScene
PostExperimentScene::PostExperimentScene	.\PostExperimentScene.cpp	/^PostExperimentScene::PostExperimentScene(void)$/;"	f	class:PostExperimentScene	signature:(void)
PostExperimentScene::PostExperimentScene	.\PostExperimentScene.cpp~	/^PostExperimentScene::PostExperimentScene(void)$/;"	f	class:PostExperimentScene	signature:(void)
PostExperimentScene::PostExperimentScene	.\PostExperimentScene.h	/^        PostExperimentScene(void);$/;"	p	class:PostExperimentScene	access:public	signature:(void)
PostExperimentScene::PostExperimentScene	.\PostExperimentScene.h~	/^        PostExperimentScene(void);$/;"	p	class:PostExperimentScene	file:	access:public	signature:(void)
PostExperimentScene::buildString	.\PostExperimentScene.cpp	/^string PostExperimentScene::buildString()$/;"	f	class:PostExperimentScene	signature:()
PostExperimentScene::buildString	.\PostExperimentScene.cpp~	/^string PostExperimentScene::buildString()$/;"	f	class:PostExperimentScene	signature:()
PostExperimentScene::buildString	.\PostExperimentScene.h	/^        virtual string buildString();$/;"	p	class:PostExperimentScene	access:private	signature:()
PostExperimentScene::buildString	.\PostExperimentScene.h~	/^        virtual string buildString();$/;"	p	class:PostExperimentScene	file:	access:private	signature:()
PostExperimentScene::handleKeyboardEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:PostExperimentScene	signature:(unsigned char key, int x, int y)
PostExperimentScene::handleKeyboardEvent	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:PostExperimentScene	signature:(unsigned char key, int x, int y)
PostExperimentScene::handleKeyboardEvent	.\PostExperimentScene.h	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:PostExperimentScene	access:private	signature:(unsigned char key, int x, int y)
PostExperimentScene::handleKeyboardEvent	.\PostExperimentScene.h~	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(unsigned char key, int x, int y)
PostExperimentScene::handleKeyboardSpecialEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:PostExperimentScene	signature:(int key, int x, int y)
PostExperimentScene::handleKeyboardSpecialEvent	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:PostExperimentScene	signature:(int key, int x, int y)
PostExperimentScene::handleKeyboardSpecialEvent	.\PostExperimentScene.h	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:PostExperimentScene	access:private	signature:(int key, int x, int y)
PostExperimentScene::handleKeyboardSpecialEvent	.\PostExperimentScene.h~	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(int key, int x, int y)
PostExperimentScene::handleMouseEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:PostExperimentScene	signature:(int button, int state, int x, int y)
PostExperimentScene::handleMouseEvent	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:PostExperimentScene	signature:(int button, int state, int x, int y)
PostExperimentScene::handleMouseEvent	.\PostExperimentScene.h	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:PostExperimentScene	access:private	signature:(int button, int state, int x, int y)
PostExperimentScene::handleMouseEvent	.\PostExperimentScene.h~	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(int button, int state, int x, int y)
PostExperimentScene::handleMouseMotionEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:PostExperimentScene	signature:(int x, int y)
PostExperimentScene::handleMouseMotionEvent	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:PostExperimentScene	signature:(int x, int y)
PostExperimentScene::handleMouseMotionEvent	.\PostExperimentScene.h	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:PostExperimentScene	access:private	signature:(int x, int y)
PostExperimentScene::handleMouseMotionEvent	.\PostExperimentScene.h~	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(int x, int y)
PostExperimentScene::handleMousePassiveMotionEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:PostExperimentScene	signature:(int x, int y)
PostExperimentScene::handleMousePassiveMotionEvent	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:PostExperimentScene	signature:(int x, int y)
PostExperimentScene::handleMousePassiveMotionEvent	.\PostExperimentScene.h	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:PostExperimentScene	access:private	signature:(int x, int y)
PostExperimentScene::handleMousePassiveMotionEvent	.\PostExperimentScene.h~	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(int x, int y)
PostExperimentScene::handleTimerEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleTimerEvent(int timerID)$/;"	f	class:PostExperimentScene	signature:(int timerID)
PostExperimentScene::handleTimerEvent	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::handleTimerEvent(int timerID)$/;"	f	class:PostExperimentScene	signature:(int timerID)
PostExperimentScene::handleTimerEvent	.\PostExperimentScene.h	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:PostExperimentScene	access:private	signature:(int timerID)
PostExperimentScene::handleTimerEvent	.\PostExperimentScene.h~	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(int timerID)
PostExperimentScene::initDisplay	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::initDisplay()$/;"	f	class:PostExperimentScene	signature:()
PostExperimentScene::initDisplay	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::initDisplay()$/;"	f	class:PostExperimentScene	signature:()
PostExperimentScene::initDisplay	.\PostExperimentScene.h	/^        virtual BOOL initDisplay();$/;"	p	class:PostExperimentScene	access:private	signature:()
PostExperimentScene::initDisplay	.\PostExperimentScene.h~	/^        virtual BOOL initDisplay();$/;"	p	class:PostExperimentScene	file:	access:private	signature:()
PostExperimentScene::renderScene	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::renderScene()$/;"	f	class:PostExperimentScene	signature:()
PostExperimentScene::renderScene	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::renderScene()$/;"	f	class:PostExperimentScene	signature:()
PostExperimentScene::renderScene	.\PostExperimentScene.h	/^        virtual BOOL renderScene(); $/;"	p	class:PostExperimentScene	access:private	signature:()
PostExperimentScene::renderScene	.\PostExperimentScene.h~	/^        virtual BOOL renderScene(); $/;"	p	class:PostExperimentScene	file:	access:private	signature:()
PostExperimentScene::reshape	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::reshape(int w, int h)$/;"	f	class:PostExperimentScene	signature:(int w, int h)
PostExperimentScene::reshape	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::reshape(int w, int h)$/;"	f	class:PostExperimentScene	signature:(int w, int h)
PostExperimentScene::reshape	.\PostExperimentScene.h	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:PostExperimentScene	access:private	signature:(int w, int h)
PostExperimentScene::reshape	.\PostExperimentScene.h~	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(int w, int h)
PostExperimentScene::startScene	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::startScene()$/;"	f	class:PostExperimentScene	signature:()
PostExperimentScene::startScene	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::startScene()$/;"	f	class:PostExperimentScene	signature:()
PostExperimentScene::startScene	.\PostExperimentScene.h	/^        virtual BOOL startScene();$/;"	p	class:PostExperimentScene	access:public	signature:()
PostExperimentScene::startScene	.\PostExperimentScene.h~	/^        virtual BOOL startScene();$/;"	p	class:PostExperimentScene	file:	access:public	signature:()
PostExperimentScene::~PostExperimentScene	.\PostExperimentScene.cpp	/^PostExperimentScene::~PostExperimentScene(void)$/;"	f	class:PostExperimentScene	signature:(void)
PostExperimentScene::~PostExperimentScene	.\PostExperimentScene.cpp~	/^PostExperimentScene::~PostExperimentScene(void)$/;"	f	class:PostExperimentScene	signature:(void)
PostExperimentScene::~PostExperimentScene	.\PostExperimentScene.h	/^        virtual ~PostExperimentScene(void);$/;"	p	class:PostExperimentScene	access:public	signature:(void)
PostExperimentScene::~PostExperimentScene	.\PostExperimentScene.h~	/^        virtual ~PostExperimentScene(void);$/;"	p	class:PostExperimentScene	file:	access:public	signature:(void)
PreTrialScene	.\PreTrialScene.cpp	/^PreTrialScene::PreTrialScene()$/;"	f	class:PreTrialScene	signature:()
PreTrialScene	.\PreTrialScene.cpp~	/^PreTrialScene::PreTrialScene()$/;"	f	class:PreTrialScene	signature:()
PreTrialScene	.\PreTrialScene.h	/^        PreTrialScene();$/;"	p	class:PreTrialScene	access:public	signature:()
PreTrialScene	.\PreTrialScene.h	/^class PreTrialScene :$/;"	c	inherits:PureWordScene
PreTrialScene	.\PreTrialScene.h~	/^        PreTrialScene();$/;"	p	class:PreTrialScene	file:	access:public	signature:()
PreTrialScene	.\PreTrialScene.h~	/^class PreTrialScene :$/;"	c	file:	inherits:PureWordScene
PreTrialScene::PreTrialScene	.\PreTrialScene.cpp	/^PreTrialScene::PreTrialScene()$/;"	f	class:PreTrialScene	signature:()
PreTrialScene::PreTrialScene	.\PreTrialScene.cpp~	/^PreTrialScene::PreTrialScene()$/;"	f	class:PreTrialScene	signature:()
PreTrialScene::PreTrialScene	.\PreTrialScene.h	/^        PreTrialScene();$/;"	p	class:PreTrialScene	access:public	signature:()
PreTrialScene::PreTrialScene	.\PreTrialScene.h~	/^        PreTrialScene();$/;"	p	class:PreTrialScene	file:	access:public	signature:()
PreTrialScene::buildString	.\PreTrialScene.cpp	/^string PreTrialScene::buildString()$/;"	f	class:PreTrialScene	signature:()
PreTrialScene::buildString	.\PreTrialScene.cpp~	/^string PreTrialScene::buildString()$/;"	f	class:PreTrialScene	signature:()
PreTrialScene::buildString	.\PreTrialScene.h	/^        virtual string buildString();$/;"	p	class:PreTrialScene	access:private	signature:()
PreTrialScene::buildString	.\PreTrialScene.h~	/^        virtual string buildString();$/;"	p	class:PreTrialScene	file:	access:private	signature:()
PreTrialScene::handleKeyboardEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:PreTrialScene	signature:(unsigned char key, int x, int y)
PreTrialScene::handleKeyboardEvent	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:PreTrialScene	signature:(unsigned char key, int x, int y)
PreTrialScene::handleKeyboardEvent	.\PreTrialScene.h	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:PreTrialScene	access:private	signature:(unsigned char key, int x, int y)
PreTrialScene::handleKeyboardEvent	.\PreTrialScene.h~	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:PreTrialScene	file:	access:private	signature:(unsigned char key, int x, int y)
PreTrialScene::handleKeyboardSpecialEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:PreTrialScene	signature:(int key, int x, int y)
PreTrialScene::handleKeyboardSpecialEvent	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:PreTrialScene	signature:(int key, int x, int y)
PreTrialScene::handleKeyboardSpecialEvent	.\PreTrialScene.h	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:PreTrialScene	access:private	signature:(int key, int x, int y)
PreTrialScene::handleKeyboardSpecialEvent	.\PreTrialScene.h~	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:PreTrialScene	file:	access:private	signature:(int key, int x, int y)
PreTrialScene::handleMouseEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:PreTrialScene	signature:(int button, int state, int x, int y)
PreTrialScene::handleMouseEvent	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:PreTrialScene	signature:(int button, int state, int x, int y)
PreTrialScene::handleMouseEvent	.\PreTrialScene.h	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:PreTrialScene	access:private	signature:(int button, int state, int x, int y)
PreTrialScene::handleMouseEvent	.\PreTrialScene.h~	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:PreTrialScene	file:	access:private	signature:(int button, int state, int x, int y)
PreTrialScene::handleMouseMotionEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:PreTrialScene	signature:(int x, int y)
PreTrialScene::handleMouseMotionEvent	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:PreTrialScene	signature:(int x, int y)
PreTrialScene::handleMouseMotionEvent	.\PreTrialScene.h	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:PreTrialScene	access:private	signature:(int x, int y)
PreTrialScene::handleMouseMotionEvent	.\PreTrialScene.h~	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:PreTrialScene	file:	access:private	signature:(int x, int y)
PreTrialScene::handleMousePassiveMotionEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:PreTrialScene	signature:(int x, int y)
PreTrialScene::handleMousePassiveMotionEvent	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:PreTrialScene	signature:(int x, int y)
PreTrialScene::handleMousePassiveMotionEvent	.\PreTrialScene.h	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:PreTrialScene	access:private	signature:(int x, int y)
PreTrialScene::handleMousePassiveMotionEvent	.\PreTrialScene.h~	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:PreTrialScene	file:	access:private	signature:(int x, int y)
PreTrialScene::handleTimerEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleTimerEvent(int timerID)$/;"	f	class:PreTrialScene	signature:(int timerID)
PreTrialScene::handleTimerEvent	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::handleTimerEvent(int timerID)$/;"	f	class:PreTrialScene	signature:(int timerID)
PreTrialScene::handleTimerEvent	.\PreTrialScene.h	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:PreTrialScene	access:private	signature:(int timerID)
PreTrialScene::handleTimerEvent	.\PreTrialScene.h~	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:PreTrialScene	file:	access:private	signature:(int timerID)
PreTrialScene::initDisplay	.\PreTrialScene.cpp	/^BOOL PreTrialScene::initDisplay()$/;"	f	class:PreTrialScene	signature:()
PreTrialScene::initDisplay	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::initDisplay()$/;"	f	class:PreTrialScene	signature:()
PreTrialScene::initDisplay	.\PreTrialScene.h	/^        virtual BOOL initDisplay();$/;"	p	class:PreTrialScene	access:private	signature:()
PreTrialScene::initDisplay	.\PreTrialScene.h~	/^        virtual BOOL initDisplay(Screen& scr);$/;"	p	class:PreTrialScene	file:	access:private	signature:(Screen& scr)
PreTrialScene::renderScene	.\PreTrialScene.cpp	/^BOOL PreTrialScene::renderScene()$/;"	f	class:PreTrialScene	signature:()
PreTrialScene::renderScene	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::renderScene()$/;"	f	class:PreTrialScene	signature:()
PreTrialScene::renderScene	.\PreTrialScene.h	/^        virtual BOOL renderScene(); $/;"	p	class:PreTrialScene	access:private	signature:()
PreTrialScene::renderScene	.\PreTrialScene.h~	/^        virtual BOOL renderScene(); $/;"	p	class:PreTrialScene	file:	access:private	signature:()
PreTrialScene::reshape	.\PreTrialScene.cpp	/^BOOL PreTrialScene::reshape(int w, int h)$/;"	f	class:PreTrialScene	signature:(int w, int h)
PreTrialScene::reshape	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::reshape(int w, int h)$/;"	f	class:PreTrialScene	signature:(int w, int h)
PreTrialScene::reshape	.\PreTrialScene.h	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:PreTrialScene	access:private	signature:(int w, int h)
PreTrialScene::reshape	.\PreTrialScene.h~	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:PreTrialScene	file:	access:private	signature:(int w, int h)
PreTrialScene::startScene	.\PreTrialScene.cpp	/^BOOL PreTrialScene::startScene()$/;"	f	class:PreTrialScene	signature:()
PreTrialScene::startScene	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::startScene()$/;"	f	class:PreTrialScene	signature:()
PreTrialScene::startScene	.\PreTrialScene.h	/^        virtual BOOL startScene();$/;"	p	class:PreTrialScene	access:public	signature:()
PreTrialScene::startScene	.\PreTrialScene.h~	/^        virtual BOOL startScene();$/;"	p	class:PreTrialScene	file:	access:public	signature:()
PreTrialScene::~PreTrialScene	.\PreTrialScene.cpp	/^PreTrialScene::~PreTrialScene(void)$/;"	f	class:PreTrialScene	signature:(void)
PreTrialScene::~PreTrialScene	.\PreTrialScene.cpp~	/^PreTrialScene::~PreTrialScene(void)$/;"	f	class:PreTrialScene	signature:(void)
PreTrialScene::~PreTrialScene	.\PreTrialScene.h	/^        virtual ~PreTrialScene(void);$/;"	p	class:PreTrialScene	access:public	signature:(void)
PreTrialScene::~PreTrialScene	.\PreTrialScene.h~	/^        virtual ~PreTrialScene(void);$/;"	p	class:PreTrialScene	file:	access:public	signature:(void)
PureWordScene	.\PureWordScene.cpp	/^PureWordScene::PureWordScene()$/;"	f	class:PureWordScene	signature:()
PureWordScene	.\PureWordScene.cpp~	/^PureWordScene::PureWordScene(void)$/;"	f	class:PureWordScene	signature:(void)
PureWordScene	.\PureWordScene.h	/^        PureWordScene();$/;"	p	class:PureWordScene	access:protected	signature:()
PureWordScene	.\PureWordScene.h	/^class PureWordScene : public Scene$/;"	c	inherits:Scene
PureWordScene	.\PureWordScene.h~	/^        PureWordScene();$/;"	p	class:PureWordScene	file:	access:protected	signature:()
PureWordScene	.\PureWordScene.h~	/^class PureWordScene : public Scene$/;"	c	file:	inherits:Scene
PureWordScene::PureWordScene	.\PureWordScene.cpp	/^PureWordScene::PureWordScene()$/;"	f	class:PureWordScene	signature:()
PureWordScene::PureWordScene	.\PureWordScene.cpp~	/^PureWordScene::PureWordScene(void)$/;"	f	class:PureWordScene	signature:(void)
PureWordScene::PureWordScene	.\PureWordScene.h	/^        PureWordScene();$/;"	p	class:PureWordScene	access:protected	signature:()
PureWordScene::PureWordScene	.\PureWordScene.h~	/^        PureWordScene();$/;"	p	class:PureWordScene	file:	access:protected	signature:()
PureWordScene::buildString	.\PureWordScene.h	/^        virtual string buildString(void) = 0; $/;"	p	class:PureWordScene	access:protected	signature:(void)
PureWordScene::~PureWordScene	.\PureWordScene.cpp	/^PureWordScene::~PureWordScene(void)$/;"	f	class:PureWordScene	signature:(void)
PureWordScene::~PureWordScene	.\PureWordScene.cpp~	/^PureWordScene::~PureWordScene(void)$/;"	f	class:PureWordScene	signature:(void)
PureWordScene::~PureWordScene	.\PureWordScene.h	/^        virtual ~PureWordScene(void);$/;"	p	class:PureWordScene	access:public	signature:(void)
PureWordScene::~PureWordScene	.\PureWordScene.h~	/^        virtual ~PureWordScene(void);$/;"	p	class:PureWordScene	file:	access:public	signature:(void)
RIGHTMARGIN	.\experiment.rc	/^        RIGHTMARGIN, 163$/;"	v
RIGHTMARGIN	.\experiment.rc	/^        RIGHTMARGIN, 412$/;"	v
ROTATION_TIMERID	.\Separate2D3DViewScene.h	/^        const int ROTATION_TIMERID;$/;"	m	class:Separate2D3DViewScene	access:public
ROTATION_TIMERID	.\Separate2D3DViewScene.h~	/^        const int ROTATION_TIMERID;$/;"	m	class:Separate2D3DViewScene	file:	access:public
S	.\Release\glew32.dll	/^$/;"	v
SS	.\Release\Conditions.obj	/^/;"	v
SS	.\Release\TestObjectFactory.obj	/^/;"	v
SWITCH_TIMERID	.\Separate2D3DViewScene.h	/^        const int SWITCH_TIMERID;$/;"	m	class:Separate2D3DViewScene	access:public
SWITCH_TIMERID	.\Separate2D3DViewScene.h~	/^        const int SWITCH_TIMERID;$/;"	m	class:Separate2D3DViewScene	file:	access:public
SaveFrame	.\StereoViewingFrameV2.cpp	/^bool StereoViewingFrame::SaveFrame(string filename)$/;"	f	class:StereoViewingFrame	signature:(string filename)
SaveFrame	.\StereoViewingFrameV2.cpp~	/^bool StereoViewingFrame::SaveFrame(string filename)$/;"	f	class:StereoViewingFrame	signature:(string filename)
SaveFrame	.\StereoViewingFrameV2.h	/^	bool SaveFrame(string filename);$/;"	p	class:StereoViewingFrame	access:public	signature:(string filename)
SaveFrame	.\StereoViewingFrameV2.h~	/^	bool SaveFrame(string filename);$/;"	p	class:StereoViewingFrame	file:	access:public	signature:(string filename)
Scene	.\Scene.cpp~	/^Scene::Scene():$/;"	f	class:Scene	signature:()
Scene	.\Scene.h	/^        Scene();$/;"	p	class:Scene	access:protected	signature:()
Scene	.\Scene.h	/^class Scene$/;"	c
Scene	.\Scene.h~	/^        Scene();$/;"	p	class:Scene	file:	access:protected	signature:()
Scene	.\Scene.h~	/^class Scene$/;"	c	file:
Scene::Scene	.\Scene.cpp~	/^Scene::Scene():$/;"	f	class:Scene	signature:()
Scene::Scene	.\Scene.h	/^        Scene();$/;"	p	class:Scene	access:protected	signature:()
Scene::Scene	.\Scene.h~	/^        Scene();$/;"	p	class:Scene	file:	access:protected	signature:()
Scene::currScene	.\Scene.cpp	/^Scene *Scene::currScene;$/;"	m	class:Scene	file:
Scene::currScene	.\Scene.cpp~	/^Scene *Scene::currScene;$/;"	m	class:Scene	file:
Scene::currScene	.\Scene.h	/^        static Scene *currScene;$/;"	m	class:Scene	access:protected
Scene::currScene	.\Scene.h~	/^        static Scene *currScene;$/;"	m	class:Scene	file:	access:protected
Scene::dispatchKeyboardEvent	.\Scene.cpp~	/^void Scene::dispatchKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:Scene	signature:(unsigned char key, int x, int y)
Scene::dispatchKeyboardEvent	.\Scene.h	/^        static void dispatchKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:Scene	access:public	signature:(unsigned char key, int x, int y)
Scene::dispatchKeyboardEvent	.\Scene.h~	/^        static void dispatchKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:Scene	file:	access:public	signature:(unsigned char key, int x, int y)
Scene::dispatchKeyboardSpecialEvent	.\Scene.cpp~	/^void Scene::dispatchKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:Scene	signature:(int key, int x, int y)
Scene::dispatchKeyboardSpecialEvent	.\Scene.h	/^        static void dispatchKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:Scene	access:public	signature:(int key, int x, int y)
Scene::dispatchKeyboardSpecialEvent	.\Scene.h~	/^        static void dispatchKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:Scene	file:	access:public	signature:(int key, int x, int y)
Scene::dispatchMouseEvent	.\Scene.cpp~	/^void Scene::dispatchMouseEvent(int button, int state, int x, int y)$/;"	f	class:Scene	signature:(int button, int state, int x, int y)
Scene::dispatchMouseEvent	.\Scene.h	/^        static void dispatchMouseEvent(int button, int state, int x, int y);$/;"	p	class:Scene	access:public	signature:(int button, int state, int x, int y)
Scene::dispatchMouseEvent	.\Scene.h~	/^        static void dispatchMouseEvent(int button, int state, int x, int y);$/;"	p	class:Scene	file:	access:public	signature:(int button, int state, int x, int y)
Scene::dispatchMouseMotionEvent	.\Scene.cpp~	/^void Scene::dispatchMouseMotionEvent(int x, int y)$/;"	f	class:Scene	signature:(int x, int y)
Scene::dispatchMouseMotionEvent	.\Scene.h	/^        static void dispatchMouseMotionEvent(int x, int y);$/;"	p	class:Scene	access:public	signature:(int x, int y)
Scene::dispatchMouseMotionEvent	.\Scene.h~	/^        static void dispatchMouseMotionEvent(int x, int y);$/;"	p	class:Scene	file:	access:public	signature:(int x, int y)
Scene::dispatchMousePassiveMotionEvent	.\Scene.cpp~	/^void Scene::dispatchMousePassiveMotionEvent(int x, int y)$/;"	f	class:Scene	signature:(int x, int y)
Scene::dispatchMousePassiveMotionEvent	.\Scene.h	/^        static void dispatchMousePassiveMotionEvent(int x, int y);$/;"	p	class:Scene	access:public	signature:(int x, int y)
Scene::dispatchMousePassiveMotionEvent	.\Scene.h~	/^        static void dispatchMousePassiveMotionEvent(int x, int y);$/;"	p	class:Scene	file:	access:public	signature:(int x, int y)
Scene::dispatchReshape	.\Scene.cpp	/^void Scene::dispatchReshape(int w, int h)$/;"	f	class:Scene	signature:(int w, int h)
Scene::dispatchReshape	.\Scene.cpp~	/^void Scene::dispatchReshape(int w, int h)$/;"	f	class:Scene	signature:(int w, int h)
Scene::dispatchReshape	.\Scene.h	/^        static void dispatchReshape(int w, int h);$/;"	p	class:Scene	access:public	signature:(int w, int h)
Scene::dispatchReshape	.\Scene.h~	/^        static void dispatchReshape(int w, int h);$/;"	p	class:Scene	file:	access:public	signature:(int w, int h)
Scene::dispatchSceneRender	.\Scene.cpp~	/^void Scene::dispatchSceneRender()$/;"	f	class:Scene	signature:()
Scene::dispatchSceneRender	.\Scene.h	/^        static void dispatchSceneRender();$/;"	p	class:Scene	access:public	signature:()
Scene::dispatchSceneRender	.\Scene.h~	/^        static void dispatchSceneRender();$/;"	p	class:Scene	file:	access:public	signature:()
Scene::dispatchTimerEvent	.\Scene.cpp	/^void Scene::dispatchTimerEvent(int timerID)$/;"	f	class:Scene	signature:(int timerID)
Scene::dispatchTimerEvent	.\Scene.cpp~	/^void Scene::dispatchTimerEvent(int timerID)$/;"	f	class:Scene	signature:(int timerID)
Scene::dispatchTimerEvent	.\Scene.h	/^        static void dispatchTimerEvent(int timerID);$/;"	p	class:Scene	access:public	signature:(int timerID)
Scene::dispatchTimerEvent	.\Scene.h~	/^        static void dispatchTimerEvent(int timerID);$/;"	p	class:Scene	file:	access:public	signature:(int timerID)
Scene::fps	.\Scene.h	/^        float fps;$/;"	m	class:Scene	access:public
Scene::fps	.\Scene.h~	/^        float fps;$/;"	m	class:Scene	file:	access:public
Scene::handleKeyboardEvent	.\Scene.h	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y) = 0;$/;"	p	class:Scene	access:protected	signature:(unsigned char key, int x, int y)
Scene::handleKeyboardEvent	.\Scene.h~	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(unsigned char key, int x, int y)
Scene::handleKeyboardSpecialEvent	.\Scene.h	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y) = 0;$/;"	p	class:Scene	access:protected	signature:(int key, int x, int y)
Scene::handleKeyboardSpecialEvent	.\Scene.h~	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(int key, int x, int y)
Scene::handleMouseEvent	.\Scene.h	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y) = 0;$/;"	p	class:Scene	access:protected	signature:(int button, int state, int x, int y)
Scene::handleMouseEvent	.\Scene.h~	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(int button, int state, int x, int y)
Scene::handleMouseMotionEvent	.\Scene.h	/^        virtual BOOL handleMouseMotionEvent(int x, int y) = 0;$/;"	p	class:Scene	access:protected	signature:(int x, int y)
Scene::handleMouseMotionEvent	.\Scene.h~	/^        virtual BOOL handleMouseMotionEvent(int x, int y) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(int x, int y)
Scene::handleMousePassiveMotionEvent	.\Scene.h	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y) = 0;$/;"	p	class:Scene	access:protected	signature:(int x, int y)
Scene::handleMousePassiveMotionEvent	.\Scene.h~	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(int x, int y)
Scene::handleTimerEvent	.\Scene.h	/^        virtual BOOL handleTimerEvent(int timerID) = 0;$/;"	p	class:Scene	access:protected	signature:(int timerID)
Scene::handleTimerEvent	.\Scene.h~	/^        virtual BOOL handleTimerEvent(int timerID) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(int timerID)
Scene::initDisplay	.\Scene.h	/^        virtual BOOL initDisplay() = 0;$/;"	p	class:Scene	access:protected	signature:()
Scene::initDisplay	.\Scene.h~	/^        virtual BOOL initDisplay() = 0;$/;"	p	class:Scene	file:	access:protected	signature:()
Scene::isRegisteredTimer	.\Scene.cpp	/^BOOL Scene::isRegisteredTimer(int timerID)$/;"	f	class:Scene	signature:(int timerID)
Scene::isRegisteredTimer	.\Scene.cpp~	/^BOOL Scene::isRegisteredTimer(int timerID)$/;"	f	class:Scene	signature:(int timerID)
Scene::isRegisteredTimer	.\Scene.h	/^        static BOOL isRegisteredTimer(int timerID);$/;"	p	class:Scene	access:protected	signature:(int timerID)
Scene::isRegisteredTimer	.\Scene.h~	/^        static BOOL isRegisteredTimer(int timerID);$/;"	p	class:Scene	file:	access:protected	signature:(int timerID)
Scene::rScreen	.\Scene.h	/^        Screen& rScreen;$/;"	m	class:Scene	access:public
Scene::rScreen	.\Scene.h~	/^        Screen& rScreen;$/;"	m	class:Scene	file:	access:public
Scene::registerTimer	.\Scene.cpp	/^void Scene::registerTimer(int timerID)$/;"	f	class:Scene	signature:(int timerID)
Scene::registerTimer	.\Scene.cpp~	/^void Scene::registerTimer(int timerID)$/;"	f	class:Scene	signature:(int timerID)
Scene::registerTimer	.\Scene.h	/^        static void registerTimer(int timerID);$/;"	p	class:Scene	access:protected	signature:(int timerID)
Scene::registerTimer	.\Scene.h~	/^        static void registerTimer(int timerID);$/;"	p	class:Scene	file:	access:protected	signature:(int timerID)
Scene::registeredTimerID	.\Scene.cpp	/^hash_map<int, BOOL> Scene::registeredTimerID;$/;"	m	class:Scene	file:
Scene::registeredTimerID	.\Scene.cpp~	/^hash_map<int, BOOL> Scene::registeredTimerID;$/;"	m	class:Scene	file:
Scene::registeredTimerID	.\Scene.h	/^        static hash_map<int, BOOL> registeredTimerID;$/;"	m	class:Scene	access:protected
Scene::registeredTimerID	.\Scene.h~	/^        static hash_map<int, BOOL> registeredTimerID;$/;"	m	class:Scene	file:	access:protected
Scene::renderScene	.\Scene.h	/^        virtual BOOL renderScene() = 0;$/;"	p	class:Scene	access:protected	signature:()
Scene::renderScene	.\Scene.h~	/^        virtual BOOL renderScene() = 0;$/;"	p	class:Scene	file:	access:protected	signature:()
Scene::reset	.\Scene.cpp	/^void Scene::reset()$/;"	f	class:Scene	signature:()
Scene::reset	.\Scene.cpp~	/^void Scene::reset()$/;"	f	class:Scene	signature:()
Scene::reset	.\Scene.h	/^        static void reset();$/;"	p	class:Scene	access:public	signature:()
Scene::reset	.\Scene.h~	/^        static void reset();$/;"	p	class:Scene	file:	access:public	signature:()
Scene::reshape	.\Scene.h	/^        virtual BOOL reshape(int w, int h) = 0;$/;"	p	class:Scene	access:protected	signature:(int w, int h)
Scene::reshape	.\Scene.h~	/^        virtual BOOL reshape(int w, int h) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(int w, int h)
Scene::startScene	.\Scene.h	/^        virtual BOOL startScene() = 0;$/;"	p	class:Scene	access:public	signature:()
Scene::startScene	.\Scene.h~	/^        virtual BOOL startScene() = 0;$/;"	p	class:Scene	file:	access:public	signature:()
Scene::status	.\Scene.h	/^        BOOL status;$/;"	m	class:Scene	access:protected
Scene::unregisterTimer	.\Scene.cpp	/^void Scene::unregisterTimer(int timerID)$/;"	f	class:Scene	signature:(int timerID)
Scene::unregisterTimer	.\Scene.cpp~	/^void Scene::unregisterTimer(int timerID)$/;"	f	class:Scene	signature:(int timerID)
Scene::unregisterTimer	.\Scene.h	/^        static void unregisterTimer(int timerID);$/;"	p	class:Scene	access:protected	signature:(int timerID)
Scene::unregisterTimer	.\Scene.h~	/^        static void unregisterTimer(int timerID);$/;"	p	class:Scene	file:	access:protected	signature:(int timerID)
Scene::~Scene	.\Scene.cpp~	/^Scene::~Scene()$/;"	f	class:Scene	signature:()
Scene::~Scene	.\Scene.h	/^        virtual ~Scene(void) = 0;$/;"	p	class:Scene	access:public	signature:(void)
Scene::~Scene	.\Scene.h~	/^        virtual ~Scene(void) = 0;$/;"	p	class:Scene	file:	access:public	signature:(void)
Screen	.\Screen.cpp	/^Screen::Screen(DEVMODE& devMode):$/;"	f	class:Screen	signature:(DEVMODE& devMode)
Screen	.\Screen.cpp~	/^Screen::Screen(DEVMODE& devMode):$/;"	f	class:Screen	signature:(DEVMODE& devMode)
Screen	.\Screen.h	/^        Screen(DEVMODE&);$/;"	p	class:Screen	access:public	signature:(DEVMODE&)
Screen	.\Screen.h	/^class Screen$/;"	c
Screen	.\Screen.h~	/^        Screen(DEVMODE&);$/;"	p	class:Screen	file:	access:public	signature:(DEVMODE&)
Screen	.\Screen.h~	/^class Screen$/;"	c	file:
Screen::CounterFrequency	.\Screen.h	/^        LARGE_INTEGER CounterFrequency;$/;"	m	class:Screen	access:private
Screen::CounterFrequency	.\Screen.h~	/^        LARGE_INTEGER CounterFrequency;$/;"	m	class:Screen	file:	access:private
Screen::FPSCount	.\Screen.h	/^        LARGE_INTEGER FPSCount;$/;"	m	class:Screen	access:private
Screen::FPSCount	.\Screen.h~	/^        LARGE_INTEGER FPSCount;$/;"	m	class:Screen	file:	access:private
Screen::Screen	.\Screen.cpp	/^Screen::Screen(DEVMODE& devMode):$/;"	f	class:Screen	signature:(DEVMODE& devMode)
Screen::Screen	.\Screen.cpp~	/^Screen::Screen(DEVMODE& devMode):$/;"	f	class:Screen	signature:(DEVMODE& devMode)
Screen::Screen	.\Screen.h	/^        Screen(DEVMODE&);$/;"	p	class:Screen	access:public	signature:(DEVMODE&)
Screen::Screen	.\Screen.h~	/^        Screen(DEVMODE&);$/;"	p	class:Screen	file:	access:public	signature:(DEVMODE&)
Screen::cancelKMBinds	.\Screen.cpp	/^BOOL Screen::cancelKMBinds()$/;"	f	class:Screen	signature:()
Screen::cancelKMBinds	.\Screen.cpp~	/^BOOL Screen::cancelKMBinds()$/;"	f	class:Screen	signature:()
Screen::cancelKMBinds	.\Screen.h	/^        BOOL cancelKMBinds();$/;"	p	class:Screen	access:public	signature:()
Screen::cancelKMBinds	.\Screen.h~	/^        BOOL cancelKMBinds();$/;"	p	class:Screen	file:	access:public	signature:()
Screen::clear	.\Screen.cpp	/^BOOL Screen::clear()$/;"	f	class:Screen	signature:()
Screen::clear	.\Screen.cpp~	/^BOOL Screen::clear()$/;"	f	class:Screen	signature:()
Screen::clear	.\Screen.h	/^        BOOL clear();$/;"	p	class:Screen	access:public	signature:()
Screen::clear	.\Screen.h~	/^        BOOL clear();$/;"	p	class:Screen	file:	access:public	signature:()
Screen::colorIDs	.\Screen.h	/^        vector< vector<GLuint> > colorIDs;$/;"	m	class:Screen	access:public
Screen::colorIDs	.\Screen.h~	/^        vector< vector<GLuint> > colorIDs;$/;"	m	class:Screen	file:	access:public
Screen::displayMode	.\Screen.h	/^        UINT displayMode;$/;"	m	class:Screen	access:private
Screen::displayMode	.\Screen.h~	/^        UINT displayMode;$/;"	m	class:Screen	file:	access:private
Screen::displayString	.\Screen.cpp	/^BOOL Screen::displayString(string str, float x, float y)$/;"	f	class:Screen	signature:(string str, float x, float y)
Screen::displayString	.\Screen.cpp~	/^BOOL Screen::displayString(string str, float x, float y)$/;"	f	class:Screen	signature:(string str, float x, float y)
Screen::displayString	.\Screen.h	/^        BOOL displayString(string str, float x, float y);$/;"	p	class:Screen	access:public	signature:(string str, float x, float y)
Screen::displayString	.\Screen.h~	/^        BOOL displayString(string str, float x, float y);$/;"	p	class:Screen	file:	access:public	signature:(string str, float x, float y)
Screen::fps	.\Screen.h	/^        float fps;$/;"	m	class:Screen	access:private
Screen::fps	.\Screen.h~	/^        float fps;$/;"	m	class:Screen	file:	access:private
Screen::getFPS	.\Screen.cpp	/^float Screen::getFPS()$/;"	f	class:Screen	signature:()
Screen::getFPS	.\Screen.cpp~	/^float Screen::getFPS()$/;"	f	class:Screen	signature:()
Screen::getFPS	.\Screen.h	/^        float getFPS();$/;"	p	class:Screen	access:public	signature:()
Screen::getFPS	.\Screen.h~	/^        float getFPS();$/;"	p	class:Screen	file:	access:public	signature:()
Screen::iFrames	.\Screen.h	/^        int iFrames;$/;"	m	class:Screen	access:private
Screen::iFrames	.\Screen.h~	/^        int iFrames;$/;"	m	class:Screen	file:	access:private
Screen::initGlut	.\Screen.cpp	/^BOOL Screen::initGlut(UINT displayMode, string title)$/;"	f	class:Screen	signature:(UINT displayMode, string title)
Screen::initGlut	.\Screen.cpp~	/^BOOL Screen::initGlut(UINT displayMode, string title)$/;"	f	class:Screen	signature:(UINT displayMode, string title)
Screen::initGlut	.\Screen.h	/^        BOOL initGlut(UINT displayMode, string title);$/;"	p	class:Screen	access:public	signature:(UINT displayMode, string title)
Screen::initGlut	.\Screen.h~	/^        BOOL initGlut(UINT displayMode, string title);$/;"	p	class:Screen	file:	access:public	signature:(UINT displayMode, string title)
Screen::initTextures	.\Screen.cpp	/^BOOL Screen::initTextures(vector<rTexture_t *>& textures)$/;"	f	class:Screen	signature:(vector<rTexture_t *>& textures)
Screen::initTextures	.\Screen.cpp~	/^BOOL Screen::initTextures(vector<rTexture_t *>& textures)$/;"	f	class:Screen	signature:(vector<rTexture_t *>& textures)
Screen::initTextures	.\Screen.h	/^        BOOL initTextures(vector<rTexture_t *>& textures);$/;"	p	class:Screen	access:public	signature:(vector<rTexture_t *>& textures)
Screen::initTextures	.\Screen.h~	/^        BOOL initTextures(vector<rTexture_t *>& textures);$/;"	p	class:Screen	file:	access:public	signature:(vector<rTexture_t *>& textures)
Screen::nullTimerFunc	.\Screen.cpp	/^void Screen::nullTimerFunc(int timerID)$/;"	f	class:Screen	signature:(int timerID)
Screen::nullTimerFunc	.\Screen.cpp~	/^void Screen::nullTimerFunc(int timerID)$/;"	f	class:Screen	signature:(int timerID)
Screen::nullTimerFunc	.\Screen.h	/^        static void nullTimerFunc(int timerID);$/;"	p	class:Screen	access:public	signature:(int timerID)
Screen::nullTimerFunc	.\Screen.h~	/^        static void nullTimerFunc(int timerID);$/;"	p	class:Screen	file:	access:public	signature:(int timerID)
Screen::onSampleFPS	.\Screen.h	/^        BOOL onSampleFPS;$/;"	m	class:Screen	access:private
Screen::onSampleFPS	.\Screen.h~	/^        BOOL onSampleFPS;$/;"	m	class:Screen	file:	access:private
Screen::rDevMode	.\Screen.h	/^        DEVMODE &rDevMode;$/;"	m	class:Screen	access:public
Screen::rDevMode	.\Screen.h~	/^        DEVMODE &rDevMode;$/;"	m	class:Screen	file:	access:public
Screen::render	.\Screen.cpp	/^void Screen::render()$/;"	f	class:Screen	signature:()
Screen::render	.\Screen.cpp~	/^void Screen::render()$/;"	f	class:Screen	signature:()
Screen::render	.\Screen.h	/^        void render();$/;"	p	class:Screen	access:public	signature:()
Screen::render	.\Screen.h~	/^        void render();$/;"	p	class:Screen	file:	access:public	signature:()
Screen::resetAllFunc	.\Screen.cpp	/^BOOL Screen::resetAllFunc()$/;"	f	class:Screen	signature:()
Screen::resetAllFunc	.\Screen.cpp~	/^BOOL Screen::resetAllFunc()$/;"	f	class:Screen	signature:()
Screen::resetAllFunc	.\Screen.h	/^        BOOL resetAllFunc(void);$/;"	p	class:Screen	access:public	signature:(void)
Screen::resetAllFunc	.\Screen.h~	/^        BOOL resetAllFunc(void);$/;"	p	class:Screen	file:	access:public	signature:(void)
Screen::run	.\Screen.cpp	/^BOOL Screen::run()$/;"	f	class:Screen	signature:()
Screen::run	.\Screen.cpp~	/^BOOL Screen::run()$/;"	f	class:Screen	signature:()
Screen::run	.\Screen.h	/^        BOOL run();$/;"	p	class:Screen	access:public	signature:()
Screen::run	.\Screen.h~	/^        BOOL run();$/;"	p	class:Screen	file:	access:public	signature:()
Screen::setDisplayFunc	.\Screen.cpp	/^BOOL Screen::setDisplayFunc(void (*displayFunc)(void))$/;"	f	class:Screen	signature:(void (*displayFunc)(void))
Screen::setDisplayFunc	.\Screen.cpp~	/^BOOL Screen::setDisplayFunc(void (*displayFunc)(void))$/;"	f	class:Screen	signature:(void (*displayFunc)(void))
Screen::setDisplayFunc	.\Screen.h	/^        BOOL setDisplayFunc(void (*displayFunc)(void));$/;"	p	class:Screen	access:public	signature:(void (*displayFunc)(void))
Screen::setDisplayFunc	.\Screen.h~	/^        BOOL setDisplayFunc(void (*displayFunc)(void));$/;"	p	class:Screen	file:	access:public	signature:(void (*displayFunc)(void))
Screen::setIdleFunc	.\Screen.cpp	/^BOOL Screen::setIdleFunc(void (*func)(void))$/;"	f	class:Screen	signature:(void (*func)(void))
Screen::setIdleFunc	.\Screen.cpp~	/^BOOL Screen::setIdleFunc(void (*func)(void))$/;"	f	class:Screen	signature:(void (*func)(void))
Screen::setIdleFunc	.\Screen.h	/^        BOOL setIdleFunc(void (*func)(void));$/;"	p	class:Screen	access:public	signature:(void (*func)(void))
Screen::setIdleFunc	.\Screen.h~	/^        BOOL setIdleFunc(void (*func)(void));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(void))
Screen::setKeyboardFunc	.\Screen.cpp	/^BOOL Screen::setKeyboardFunc(void (*func)(unsigned char key, int x, int y))$/;"	f	class:Screen	signature:(void (*func)(unsigned char key, int x, int y))
Screen::setKeyboardFunc	.\Screen.cpp~	/^BOOL Screen::setKeyboardFunc(void (*func)(unsigned char key, int x, int y))$/;"	f	class:Screen	signature:(void (*func)(unsigned char key, int x, int y))
Screen::setKeyboardFunc	.\Screen.h	/^        BOOL setKeyboardFunc(void (*func)(unsigned char key, int x, int y));$/;"	p	class:Screen	access:public	signature:(void (*func)(unsigned char key, int x, int y))
Screen::setKeyboardFunc	.\Screen.h~	/^        BOOL setKeyboardFunc(void (*func)(unsigned char key, int x, int y));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(unsigned char key, int x, int y))
Screen::setKeyboardSpecialFunc	.\Screen.cpp	/^BOOL Screen::setKeyboardSpecialFunc(void (*func)(int key, int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int key, int x, int y))
Screen::setKeyboardSpecialFunc	.\Screen.cpp~	/^BOOL Screen::setKeyboardSpecialFunc(void (*func)(int key, int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int key, int x, int y))
Screen::setKeyboardSpecialFunc	.\Screen.h	/^        BOOL setKeyboardSpecialFunc(void (*func)(int key, int x, int y));$/;"	p	class:Screen	access:public	signature:(void (*func)(int key, int x, int y))
Screen::setKeyboardSpecialFunc	.\Screen.h~	/^        BOOL setKeyboardSpecialFunc(void (*func)(int key, int x, int y));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(int key, int x, int y))
Screen::setMouseFunc	.\Screen.cpp	/^BOOL Screen::setMouseFunc(void (*func)(int button, int state, int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int button, int state, int x, int y))
Screen::setMouseFunc	.\Screen.cpp~	/^BOOL Screen::setMouseFunc(void (*func)(int button, int state, int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int button, int state, int x, int y))
Screen::setMouseFunc	.\Screen.h	/^        BOOL setMouseFunc(void (*func)(int button, int state, int x, int y));$/;"	p	class:Screen	access:public	signature:(void (*func)(int button, int state, int x, int y))
Screen::setMouseFunc	.\Screen.h~	/^        BOOL setMouseFunc(void (*func)(int button, int state, int x, int y));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(int button, int state, int x, int y))
Screen::setMouseMotionFunc	.\Screen.cpp	/^BOOL Screen::setMouseMotionFunc(void (*func)(int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int x, int y))
Screen::setMouseMotionFunc	.\Screen.cpp~	/^BOOL Screen::setMouseMotionFunc(void (*func)(int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int x, int y))
Screen::setMouseMotionFunc	.\Screen.h	/^        BOOL setMouseMotionFunc(void (*func)(int x, int y));$/;"	p	class:Screen	access:public	signature:(void (*func)(int x, int y))
Screen::setMouseMotionFunc	.\Screen.h~	/^        BOOL setMouseMotionFunc(void (*func)(int x, int y));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(int x, int y))
Screen::setMousePassiveMotionFunc	.\Screen.cpp	/^BOOL Screen::setMousePassiveMotionFunc(void (*func)(int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int x, int y))
Screen::setMousePassiveMotionFunc	.\Screen.cpp~	/^BOOL Screen::setMousePassiveMotionFunc(void (*func)(int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int x, int y))
Screen::setMousePassiveMotionFunc	.\Screen.h	/^        BOOL setMousePassiveMotionFunc(void (*func)(int x, int y));$/;"	p	class:Screen	access:public	signature:(void (*func)(int x, int y))
Screen::setMousePassiveMotionFunc	.\Screen.h~	/^        BOOL setMousePassiveMotionFunc(void (*func)(int x, int y));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(int x, int y))
Screen::setReshapeFunc	.\Screen.cpp	/^BOOL Screen::setReshapeFunc(void (*func)(int w, int h))$/;"	f	class:Screen	signature:(void (*func)(int w, int h))
Screen::setReshapeFunc	.\Screen.cpp~	/^BOOL Screen::setReshapeFunc(void (*func)(int w, int h))$/;"	f	class:Screen	signature:(void (*func)(int w, int h))
Screen::setReshapeFunc	.\Screen.h	/^        BOOL setReshapeFunc(void (*func)(int w, int h));$/;"	p	class:Screen	access:public	signature:(void (*func)(int w, int h))
Screen::setReshapeFunc	.\Screen.h~	/^        BOOL setReshapeFunc(void (*func)(int w, int h));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(int w, int h))
Screen::setTimerFunc	.\Screen.cpp	/^BOOL Screen::setTimerFunc(unsigned int msecs, void (*func)(int timerID), int timerID)$/;"	f	class:Screen	signature:(unsigned int msecs, void (*func)(int timerID), int timerID)
Screen::setTimerFunc	.\Screen.cpp~	/^BOOL Screen::setTimerFunc(unsigned int msecs, void (*func)(int timerID), int timerID)$/;"	f	class:Screen	signature:(unsigned int msecs, void (*func)(int timerID), int timerID)
Screen::setTimerFunc	.\Screen.h	/^        BOOL setTimerFunc(unsigned int msecs, void (*func)(int timerID), int timerID);$/;"	p	class:Screen	access:public	signature:(unsigned int msecs, void (*func)(int timerID), int timerID)
Screen::setTimerFunc	.\Screen.h~	/^        BOOL setTimerFunc(unsigned int msecs, void (*func)(int timerID), int timerID);$/;"	p	class:Screen	file:	access:public	signature:(unsigned int msecs, void (*func)(int timerID), int timerID)
Screen::startSampleFPS	.\Screen.cpp	/^BOOL Screen::startSampleFPS()$/;"	f	class:Screen	signature:()
Screen::startSampleFPS	.\Screen.cpp~	/^BOOL Screen::startSampleFPS()$/;"	f	class:Screen	signature:()
Screen::startSampleFPS	.\Screen.h	/^        BOOL startSampleFPS();$/;"	p	class:Screen	access:public	signature:()
Screen::startSampleFPS	.\Screen.h~	/^        BOOL startSampleFPS();$/;"	p	class:Screen	file:	access:public	signature:()
Screen::stereoFrame	.\Screen.h	/^        StereoViewingFrame stereoFrame;$/;"	m	class:Screen	access:public
Screen::stopSampleFPS	.\Screen.cpp	/^BOOL Screen::stopSampleFPS()$/;"	f	class:Screen	signature:()
Screen::stopSampleFPS	.\Screen.cpp~	/^BOOL Screen::stopSampleFPS()$/;"	f	class:Screen	signature:()
Screen::stopSampleFPS	.\Screen.h	/^        BOOL stopSampleFPS();$/;"	p	class:Screen	access:public	signature:()
Screen::stopSampleFPS	.\Screen.h~	/^        BOOL stopSampleFPS();$/;"	p	class:Screen	file:	access:public	signature:()
Screen::stopped	.\Screen.h	/^        BOOL stopped;$/;"	m	class:Screen	access:public
Screen::stopped	.\Screen.h~	/^        BOOL stopped;$/;"	m	class:Screen	file:	access:public
Screen::testRenderScene	.\Screen.cpp	/^void Screen::testRenderScene()$/;"	f	class:Screen	signature:()
Screen::testRenderScene	.\Screen.cpp~	/^void Screen::testRenderScene()$/;"	f	class:Screen	signature:()
Screen::testRenderScene	.\Screen.h	/^        static void testRenderScene();$/;"	p	class:Screen	access:public	signature:()
Screen::testRenderScene	.\Screen.h~	/^        static void testRenderScene();$/;"	p	class:Screen	file:	access:public	signature:()
Screen::texIDs	.\Screen.h	/^        GLuint *texIDs;$/;"	m	class:Screen	access:public
Screen::texIDs	.\Screen.h~	/^        GLuint *texIDs;$/;"	m	class:Screen	file:	access:public
Screen::texNo	.\Screen.h	/^        int texNo;$/;"	m	class:Screen	access:public
Screen::texNo	.\Screen.h~	/^        int texNo;$/;"	m	class:Screen	file:	access:public
Screen::~Screen	.\Screen.cpp	/^Screen::~Screen(void)$/;"	f	class:Screen	signature:(void)
Screen::~Screen	.\Screen.cpp~	/^Screen::~Screen(void)$/;"	f	class:Screen	signature:(void)
Screen::~Screen	.\Screen.h	/^        ~Screen();$/;"	p	class:Screen	access:public	signature:()
Screen::~Screen	.\Screen.h~	/^        ~Screen();$/;"	p	class:Screen	file:	access:public	signature:()
Separate2D3DViewScene	.\Separate2D3DViewScene.cpp	/^Separate2D3DViewScene::Separate2D3DViewScene(cond_t& cond):$/;"	f	class:Separate2D3DViewScene	signature:(cond_t& cond)
Separate2D3DViewScene	.\Separate2D3DViewScene.cpp~	/^Separate2D3DViewScene::Separate2D3DViewScene(cond_t& cond):$/;"	f	class:Separate2D3DViewScene	signature:(cond_t& cond)
Separate2D3DViewScene	.\Separate2D3DViewScene.h	/^        Separate2D3DViewScene(cond_t& cond);$/;"	p	class:Separate2D3DViewScene	access:public	signature:(cond_t& cond)
Separate2D3DViewScene	.\Separate2D3DViewScene.h	/^class Separate2D3DViewScene :$/;"	c	inherits:MixedObjectViewScene
Separate2D3DViewScene	.\Separate2D3DViewScene.h~	/^        Separate2D3DViewScene(cond_t& cond);$/;"	p	class:Separate2D3DViewScene	file:	access:public	signature:(cond_t& cond)
Separate2D3DViewScene	.\Separate2D3DViewScene.h~	/^class Separate2D3DViewScene :$/;"	c	file:	inherits:MixedObjectViewScene
Separate2D3DViewScene::DISPLAY_BLACKSCREEN	.\Separate2D3DViewScene.h	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	e	enum:Separate2D3DViewScene::sepSceneStatus
Separate2D3DViewScene::DISPLAY_BLACKSCREEN	.\Separate2D3DViewScene.h~	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	e	enum:Separate2D3DViewScene::sepSceneStatus	file:
Separate2D3DViewScene::DISPLAY_OBJECT	.\Separate2D3DViewScene.h	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	e	enum:Separate2D3DViewScene::sepSceneStatus
Separate2D3DViewScene::DISPLAY_OBJECT	.\Separate2D3DViewScene.h~	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	e	enum:Separate2D3DViewScene::sepSceneStatus	file:
Separate2D3DViewScene::ROTATION_TIMERID	.\Separate2D3DViewScene.h	/^        const int ROTATION_TIMERID;$/;"	m	class:Separate2D3DViewScene	access:public
Separate2D3DViewScene::ROTATION_TIMERID	.\Separate2D3DViewScene.h~	/^        const int ROTATION_TIMERID;$/;"	m	class:Separate2D3DViewScene	file:	access:public
Separate2D3DViewScene::SWITCH_TIMERID	.\Separate2D3DViewScene.h	/^        const int SWITCH_TIMERID;$/;"	m	class:Separate2D3DViewScene	access:public
Separate2D3DViewScene::SWITCH_TIMERID	.\Separate2D3DViewScene.h~	/^        const int SWITCH_TIMERID;$/;"	m	class:Separate2D3DViewScene	file:	access:public
Separate2D3DViewScene::Separate2D3DViewScene	.\Separate2D3DViewScene.cpp	/^Separate2D3DViewScene::Separate2D3DViewScene(cond_t& cond):$/;"	f	class:Separate2D3DViewScene	signature:(cond_t& cond)
Separate2D3DViewScene::Separate2D3DViewScene	.\Separate2D3DViewScene.cpp~	/^Separate2D3DViewScene::Separate2D3DViewScene(cond_t& cond):$/;"	f	class:Separate2D3DViewScene	signature:(cond_t& cond)
Separate2D3DViewScene::Separate2D3DViewScene	.\Separate2D3DViewScene.h	/^        Separate2D3DViewScene(cond_t& cond);$/;"	p	class:Separate2D3DViewScene	access:public	signature:(cond_t& cond)
Separate2D3DViewScene::Separate2D3DViewScene	.\Separate2D3DViewScene.h~	/^        Separate2D3DViewScene(cond_t& cond);$/;"	p	class:Separate2D3DViewScene	file:	access:public	signature:(cond_t& cond)
Separate2D3DViewScene::condition	.\Separate2D3DViewScene.h	/^        cond_t& condition;$/;"	m	class:Separate2D3DViewScene	access:private
Separate2D3DViewScene::condition	.\Separate2D3DViewScene.h~	/^        cond_t& condition;$/;"	m	class:Separate2D3DViewScene	file:	access:private
Separate2D3DViewScene::currStatus	.\Separate2D3DViewScene.h	/^        sepSceneStatus_t currStatus;$/;"	m	class:Separate2D3DViewScene	access:private
Separate2D3DViewScene::currStatus	.\Separate2D3DViewScene.h~	/^        sepSceneStatus_t currStatus;$/;"	m	class:Separate2D3DViewScene	file:	access:private
Separate2D3DViewScene::handleKeyboardEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(unsigned char key, int x, int y)
Separate2D3DViewScene::handleKeyboardEvent	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(unsigned char key, int x, int y)
Separate2D3DViewScene::handleKeyboardEvent	.\Separate2D3DViewScene.h	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(unsigned char key, int x, int y)
Separate2D3DViewScene::handleKeyboardEvent	.\Separate2D3DViewScene.h~	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(unsigned char key, int x, int y)
Separate2D3DViewScene::handleKeyboardSpecialEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int key, int x, int y)
Separate2D3DViewScene::handleKeyboardSpecialEvent	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int key, int x, int y)
Separate2D3DViewScene::handleKeyboardSpecialEvent	.\Separate2D3DViewScene.h	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(int key, int x, int y)
Separate2D3DViewScene::handleKeyboardSpecialEvent	.\Separate2D3DViewScene.h~	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(int key, int x, int y)
Separate2D3DViewScene::handleMouseEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int button, int state, int x, int y)
Separate2D3DViewScene::handleMouseEvent	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int button, int state, int x, int y)
Separate2D3DViewScene::handleMouseEvent	.\Separate2D3DViewScene.h	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(int button, int state, int x, int y)
Separate2D3DViewScene::handleMouseEvent	.\Separate2D3DViewScene.h~	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(int button, int state, int x, int y)
Separate2D3DViewScene::handleMouseMotionEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int x, int y)
Separate2D3DViewScene::handleMouseMotionEvent	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int x, int y)
Separate2D3DViewScene::handleMouseMotionEvent	.\Separate2D3DViewScene.h	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(int x, int y)
Separate2D3DViewScene::handleMouseMotionEvent	.\Separate2D3DViewScene.h~	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(int x, int y)
Separate2D3DViewScene::handleMousePassiveMotionEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int x, int y)
Separate2D3DViewScene::handleMousePassiveMotionEvent	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int x, int y)
Separate2D3DViewScene::handleMousePassiveMotionEvent	.\Separate2D3DViewScene.h	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(int x, int y)
Separate2D3DViewScene::handleMousePassiveMotionEvent	.\Separate2D3DViewScene.h~	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(int x, int y)
Separate2D3DViewScene::handleTimerEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleTimerEvent(int timerID)$/;"	f	class:Separate2D3DViewScene	signature:(int timerID)
Separate2D3DViewScene::handleTimerEvent	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::handleTimerEvent(int timerID)$/;"	f	class:Separate2D3DViewScene	signature:(int timerID)
Separate2D3DViewScene::handleTimerEvent	.\Separate2D3DViewScene.h	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(int timerID)
Separate2D3DViewScene::handleTimerEvent	.\Separate2D3DViewScene.h~	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(int timerID)
Separate2D3DViewScene::initDisplay	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::initDisplay()$/;"	f	class:Separate2D3DViewScene	signature:()
Separate2D3DViewScene::initDisplay	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::initDisplay()$/;"	f	class:Separate2D3DViewScene	signature:()
Separate2D3DViewScene::initDisplay	.\Separate2D3DViewScene.h	/^        virtual BOOL initDisplay();$/;"	p	class:Separate2D3DViewScene	access:private	signature:()
Separate2D3DViewScene::initDisplay	.\Separate2D3DViewScene.h~	/^        virtual BOOL initDisplay();$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:()
Separate2D3DViewScene::renderScene	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::renderScene()$/;"	f	class:Separate2D3DViewScene	signature:()
Separate2D3DViewScene::renderScene	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::renderScene()$/;"	f	class:Separate2D3DViewScene	signature:()
Separate2D3DViewScene::renderScene	.\Separate2D3DViewScene.h	/^        virtual BOOL renderScene(); $/;"	p	class:Separate2D3DViewScene	access:private	signature:()
Separate2D3DViewScene::renderScene	.\Separate2D3DViewScene.h~	/^        virtual BOOL renderScene(); $/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:()
Separate2D3DViewScene::reshape	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::reshape(int w, int h)$/;"	f	class:Separate2D3DViewScene	signature:(int w, int h)
Separate2D3DViewScene::reshape	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::reshape(int w, int h)$/;"	f	class:Separate2D3DViewScene	signature:(int w, int h)
Separate2D3DViewScene::reshape	.\Separate2D3DViewScene.h	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(int w, int h)
Separate2D3DViewScene::reshape	.\Separate2D3DViewScene.h~	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(int w, int h)
Separate2D3DViewScene::sepSceneStatus	.\Separate2D3DViewScene.h	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	g	class:Separate2D3DViewScene	access:private
Separate2D3DViewScene::sepSceneStatus	.\Separate2D3DViewScene.h~	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	g	class:Separate2D3DViewScene	file:	access:private
Separate2D3DViewScene::sepSceneStatus_t	.\Separate2D3DViewScene.h	/^        typedef enum sepSceneStatus sepSceneStatus_t;$/;"	t	class:Separate2D3DViewScene	typeref:enum:Separate2D3DViewScene::sepSceneStatus	access:private
Separate2D3DViewScene::sepSceneStatus_t	.\Separate2D3DViewScene.h~	/^        typedef enum sepSceneStatus sepSceneStatus_t;$/;"	t	class:Separate2D3DViewScene	typeref:enum:Separate2D3DViewScene::sepSceneStatus	file:	access:private
Separate2D3DViewScene::startScene	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::startScene()$/;"	f	class:Separate2D3DViewScene	signature:()
Separate2D3DViewScene::startScene	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::startScene()$/;"	f	class:Separate2D3DViewScene	signature:()
Separate2D3DViewScene::startScene	.\Separate2D3DViewScene.h	/^        virtual BOOL startScene();$/;"	p	class:Separate2D3DViewScene	access:public	signature:()
Separate2D3DViewScene::startScene	.\Separate2D3DViewScene.h~	/^        virtual BOOL startScene();$/;"	p	class:Separate2D3DViewScene	file:	access:public	signature:()
Separate2D3DViewScene::~Separate2D3DViewScene	.\Separate2D3DViewScene.cpp	/^Separate2D3DViewScene::~Separate2D3DViewScene(void)$/;"	f	class:Separate2D3DViewScene	signature:(void)
Separate2D3DViewScene::~Separate2D3DViewScene	.\Separate2D3DViewScene.cpp~	/^Separate2D3DViewScene::~Separate2D3DViewScene(void)$/;"	f	class:Separate2D3DViewScene	signature:(void)
Separate2D3DViewScene::~Separate2D3DViewScene	.\Separate2D3DViewScene.h	/^        virtual ~Separate2D3DViewScene(void);$/;"	p	class:Separate2D3DViewScene	access:public	signature:(void)
Separate2D3DViewScene::~Separate2D3DViewScene	.\Separate2D3DViewScene.h~	/^        virtual ~Separate2D3DViewScene(void);$/;"	p	class:Separate2D3DViewScene	file:	access:public	signature:(void)
StereoViewingFrame	.\StereoViewingFrameV2.h	/^	StereoViewingFrame() : $/;"	f	class:StereoViewingFrame	access:public	signature:()
StereoViewingFrame	.\StereoViewingFrameV2.h	/^	StereoViewingFrame(const StereoViewingFrame & vf) { *this = vf; }$/;"	f	class:StereoViewingFrame	access:public	signature:(const StereoViewingFrame & vf)
StereoViewingFrame	.\StereoViewingFrameV2.h	/^class StereoViewingFrame$/;"	c
StereoViewingFrame	.\StereoViewingFrameV2.h~	/^	StereoViewingFrame() : $/;"	f	class:StereoViewingFrame	access:public	signature:()
StereoViewingFrame	.\StereoViewingFrameV2.h~	/^	StereoViewingFrame(const StereoViewingFrame & vf) { *this = vf; }$/;"	f	class:StereoViewingFrame	access:public	signature:(const StereoViewingFrame & vf)
StereoViewingFrame	.\StereoViewingFrameV2.h~	/^class StereoViewingFrame$/;"	c	file:
StereoViewingFrame::GenProjectionMatrix	.\StereoViewingFrameV2.cpp	/^void StereoViewingFrame::GenProjectionMatrix(int eyenum)$/;"	f	class:StereoViewingFrame	signature:(int eyenum)
StereoViewingFrame::GenProjectionMatrix	.\StereoViewingFrameV2.cpp~	/^void StereoViewingFrame::GenProjectionMatrix(int eyenum)$/;"	f	class:StereoViewingFrame	signature:(int eyenum)
StereoViewingFrame::GenProjectionMatrix	.\StereoViewingFrameV2.h	/^	void GenProjectionMatrix(int eyenum);$/;"	p	class:StereoViewingFrame	access:private	signature:(int eyenum)
StereoViewingFrame::GenProjectionMatrix	.\StereoViewingFrameV2.h~	/^	void GenProjectionMatrix(int eyenum);$/;"	p	class:StereoViewingFrame	file:	access:private	signature:(int eyenum)
StereoViewingFrame::GetScreenPixels	.\StereoViewingFrameV2.cpp	/^void StereoViewingFrame::GetScreenPixels()$/;"	f	class:StereoViewingFrame	signature:()
StereoViewingFrame::GetScreenPixels	.\StereoViewingFrameV2.cpp~	/^void StereoViewingFrame::GetScreenPixels()$/;"	f	class:StereoViewingFrame	signature:()
StereoViewingFrame::GetScreenPixels	.\StereoViewingFrameV2.h	/^	void GetScreenPixels(); \/\/ use GL to get screen pixels$/;"	p	class:StereoViewingFrame	access:public	signature:()
StereoViewingFrame::GetScreenPixels	.\StereoViewingFrameV2.h~	/^	void GetScreenPixels(); \/\/ use GL to get screen pixels$/;"	p	class:StereoViewingFrame	file:	access:public	signature:()
StereoViewingFrame::LoadFrame	.\StereoViewingFrameV2.cpp	/^bool StereoViewingFrame::LoadFrame(string filename)$/;"	f	class:StereoViewingFrame	signature:(string filename)
StereoViewingFrame::LoadFrame	.\StereoViewingFrameV2.cpp~	/^bool StereoViewingFrame::LoadFrame(string filename)$/;"	f	class:StereoViewingFrame	signature:(string filename)
StereoViewingFrame::LoadFrame	.\StereoViewingFrameV2.h	/^	bool LoadFrame(string filename);$/;"	p	class:StereoViewingFrame	access:public	signature:(string filename)
StereoViewingFrame::LoadFrame	.\StereoViewingFrameV2.h~	/^	bool LoadFrame(string filename);$/;"	p	class:StereoViewingFrame	file:	access:public	signature:(string filename)
StereoViewingFrame::MakeProjectionMatrices	.\StereoViewingFrameV2.h	/^	void MakeProjectionMatrices()$/;"	f	class:StereoViewingFrame	access:public	signature:()
StereoViewingFrame::MakeProjectionMatrices	.\StereoViewingFrameV2.h~	/^	void MakeProjectionMatrices()$/;"	f	class:StereoViewingFrame	access:public	signature:()
StereoViewingFrame::SaveFrame	.\StereoViewingFrameV2.cpp	/^bool StereoViewingFrame::SaveFrame(string filename)$/;"	f	class:StereoViewingFrame	signature:(string filename)
StereoViewingFrame::SaveFrame	.\StereoViewingFrameV2.cpp~	/^bool StereoViewingFrame::SaveFrame(string filename)$/;"	f	class:StereoViewingFrame	signature:(string filename)
StereoViewingFrame::SaveFrame	.\StereoViewingFrameV2.h	/^	bool SaveFrame(string filename);$/;"	p	class:StereoViewingFrame	access:public	signature:(string filename)
StereoViewingFrame::SaveFrame	.\StereoViewingFrameV2.h~	/^	bool SaveFrame(string filename);$/;"	p	class:StereoViewingFrame	file:	access:public	signature:(string filename)
StereoViewingFrame::StereoViewingFrame	.\StereoViewingFrameV2.h	/^	StereoViewingFrame() : $/;"	f	class:StereoViewingFrame	access:public	signature:()
StereoViewingFrame::StereoViewingFrame	.\StereoViewingFrameV2.h	/^	StereoViewingFrame(const StereoViewingFrame & vf) { *this = vf; }$/;"	f	class:StereoViewingFrame	access:public	signature:(const StereoViewingFrame & vf)
StereoViewingFrame::StereoViewingFrame	.\StereoViewingFrameV2.h~	/^	StereoViewingFrame() : $/;"	f	class:StereoViewingFrame	access:public	signature:()
StereoViewingFrame::StereoViewingFrame	.\StereoViewingFrameV2.h~	/^	StereoViewingFrame(const StereoViewingFrame & vf) { *this = vf; }$/;"	f	class:StereoViewingFrame	access:public	signature:(const StereoViewingFrame & vf)
StereoViewingFrame::centereye	.\StereoViewingFrameV2.h	/^	vector_3d centereye;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::centereye	.\StereoViewingFrameV2.h~	/^	vector_3d centereye;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::centerprojmatrix	.\StereoViewingFrameV2.h	/^	matrix_4x4 centerprojmatrix;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::centerprojmatrix	.\StereoViewingFrameV2.h~	/^	matrix_4x4 centerprojmatrix;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::frame_set	.\StereoViewingFrameV2.h	/^	bool frame_set; \/\/ flag for checking if calibrated$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::frame_set	.\StereoViewingFrameV2.h~	/^	bool frame_set; \/\/ flag for checking if calibrated$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::lefteye	.\StereoViewingFrameV2.h	/^	vector_3d lefteye;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::lefteye	.\StereoViewingFrameV2.h~	/^	vector_3d lefteye;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::leftprojmatrix	.\StereoViewingFrameV2.h	/^	matrix_4x4 leftprojmatrix;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::leftprojmatrix	.\StereoViewingFrameV2.h~	/^	matrix_4x4 leftprojmatrix;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::leftscreenrot	.\StereoViewingFrameV2.h	/^	double leftscreenrot;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::leftscreenrot	.\StereoViewingFrameV2.h~	/^	double leftscreenrot;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::leftscreenshift	.\StereoViewingFrameV2.h	/^	vector_3d leftscreenshift;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::leftscreenshift	.\StereoViewingFrameV2.h~	/^	vector_3d leftscreenshift;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::operator =	.\StereoViewingFrameV2.cpp	/^const StereoViewingFrame & StereoViewingFrame::operator=(const StereoViewingFrame & vf)$/;"	f	class:StereoViewingFrame	signature:(const StereoViewingFrame & vf)
StereoViewingFrame::operator =	.\StereoViewingFrameV2.cpp~	/^const StereoViewingFrame & StereoViewingFrame::operator=(const StereoViewingFrame & vf)$/;"	f	class:StereoViewingFrame	signature:(const StereoViewingFrame & vf)
StereoViewingFrame::operator =	.\StereoViewingFrameV2.h	/^	const StereoViewingFrame & operator=(const StereoViewingFrame & vf);	$/;"	p	class:StereoViewingFrame	access:public	signature:(const StereoViewingFrame & vf)
StereoViewingFrame::operator =	.\StereoViewingFrameV2.h~	/^	const StereoViewingFrame & operator=(const StereoViewingFrame & vf);	$/;"	p	class:StereoViewingFrame	file:	access:public	signature:(const StereoViewingFrame & vf)
StereoViewingFrame::pixelbottom	.\StereoViewingFrameV2.h	/^	unsigned int pixelbottom;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::pixelbottom	.\StereoViewingFrameV2.h~	/^	unsigned int pixelbottom;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::pixelleft	.\StereoViewingFrameV2.h	/^	unsigned int pixelleft;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::pixelleft	.\StereoViewingFrameV2.h~	/^	unsigned int pixelleft;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::pixelright	.\StereoViewingFrameV2.h	/^	unsigned int pixelright;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::pixelright	.\StereoViewingFrameV2.h~	/^	unsigned int pixelright;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::pixeltop	.\StereoViewingFrameV2.h	/^	unsigned int pixeltop;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::pixeltop	.\StereoViewingFrameV2.h~	/^	unsigned int pixeltop;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::righteye	.\StereoViewingFrameV2.h	/^	vector_3d righteye;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::righteye	.\StereoViewingFrameV2.h~	/^	vector_3d righteye;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::rightprojmatrix	.\StereoViewingFrameV2.h	/^	matrix_4x4 rightprojmatrix;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::rightprojmatrix	.\StereoViewingFrameV2.h~	/^	matrix_4x4 rightprojmatrix;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::rightscreenrot	.\StereoViewingFrameV2.h	/^	double rightscreenrot;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::rightscreenrot	.\StereoViewingFrameV2.h~	/^	double rightscreenrot;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::rightscreenshift	.\StereoViewingFrameV2.h	/^	vector_3d rightscreenshift;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::rightscreenshift	.\StereoViewingFrameV2.h~	/^	vector_3d rightscreenshift;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::screencoords	.\StereoViewingFrameV2.h	/^	cml::vector< double, cml::fixed<6> > screencoords;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::screencoords	.\StereoViewingFrameV2.h~	/^	cml::vector< double, cml::fixed<6> > screencoords;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::topCenterEye	.\StereoViewingFrameV2.h	/^    vector_3d topCenterEye;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::topCenterEye	.\StereoViewingFrameV2.h~	/^    vector_3d topCenterEye;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::topLeftEye	.\StereoViewingFrameV2.h	/^    vector_3d topLeftEye;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::topLeftEye	.\StereoViewingFrameV2.h~	/^    vector_3d topLeftEye;$/;"	m	class:StereoViewingFrame	file:	access:public
StereoViewingFrame::topRightEye	.\StereoViewingFrameV2.h	/^    vector_3d topRightEye;$/;"	m	class:StereoViewingFrame	access:public
StereoViewingFrame::topRightEye	.\StereoViewingFrameV2.h~	/^    vector_3d topRightEye;$/;"	m	class:StereoViewingFrame	file:	access:public
T	.\Release\Overlapped2DViewScene.obj	/^/;"	v
T	.\Release\PostExperimentScene.obj	/^/;"	v
TOPMARGIN	.\experiment.rc	/^        TOPMARGIN, 7$/;"	v
TestObject	.\TestObject.cpp	/^TestObject::TestObject(TestObject& rObj)$/;"	f	class:TestObject	signature:(TestObject& rObj)
TestObject	.\TestObject.cpp	/^TestObject::TestObject(rangeType<GLfloat>& pitchRange,$/;"	f	class:TestObject	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs)
TestObject	.\TestObject.cpp~	/^TestObject::TestObject(TestObject& rObj)$/;"	f	class:TestObject	signature:(TestObject& rObj)
TestObject	.\TestObject.cpp~	/^TestObject::TestObject(rangeType<GLfloat>& pitchRange,$/;"	f	class:TestObject	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs)
TestObject	.\TestObject.h	/^        TestObject(TestObject& rObj);$/;"	p	class:TestObject	access:public	signature:(TestObject& rObj)
TestObject	.\TestObject.h	/^        TestObject(rangeType<GLfloat>& pitchRange,$/;"	p	class:TestObject	access:public	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs)
TestObject	.\TestObject.h	/^class TestObject$/;"	c
TestObject	.\TestObject.h~	/^        TestObject(TestObject& rObj);$/;"	p	class:TestObject	file:	access:public	signature:(TestObject& rObj)
TestObject	.\TestObject.h~	/^        TestObject(rangeType<GLfloat>& pitchRange,$/;"	p	class:TestObject	file:	access:public	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs)
TestObject	.\TestObject.h~	/^class TestObject$/;"	c	file:
TestObject::CLOCKWISE	.\TestObject.h	/^        enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	e	enum:TestObject::enumRotDirection
TestObject::CLOCKWISE	.\TestObject.h~	/^        enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	e	enum:TestObject::enumRotDirection	file:
TestObject::COUNTERCLOCKWISE	.\TestObject.h	/^        enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	e	enum:TestObject::enumRotDirection
TestObject::COUNTERCLOCKWISE	.\TestObject.h~	/^        enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	e	enum:TestObject::enumRotDirection	file:
TestObject::ORTHOGONAL	.\TestObject.h	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	e	enum:TestObject::enumProj2DMode
TestObject::ORTHOGONAL	.\TestObject.h~	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	e	enum:TestObject::enumProj2DMode	file:
TestObject::PROJECTION	.\TestObject.h	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	e	enum:TestObject::enumProj2DMode
TestObject::PROJECTION	.\TestObject.h~	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	e	enum:TestObject::enumProj2DMode	file:
TestObject::TestObject	.\TestObject.cpp	/^TestObject::TestObject(TestObject& rObj)$/;"	f	class:TestObject	signature:(TestObject& rObj)
TestObject::TestObject	.\TestObject.cpp	/^TestObject::TestObject(rangeType<GLfloat>& pitchRange,$/;"	f	class:TestObject	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs)
TestObject::TestObject	.\TestObject.cpp~	/^TestObject::TestObject(TestObject& rObj)$/;"	f	class:TestObject	signature:(TestObject& rObj)
TestObject::TestObject	.\TestObject.cpp~	/^TestObject::TestObject(rangeType<GLfloat>& pitchRange,$/;"	f	class:TestObject	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs)
TestObject::TestObject	.\TestObject.h	/^        TestObject(TestObject& rObj);$/;"	p	class:TestObject	access:public	signature:(TestObject& rObj)
TestObject::TestObject	.\TestObject.h	/^        TestObject(rangeType<GLfloat>& pitchRange,$/;"	p	class:TestObject	access:public	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs)
TestObject::TestObject	.\TestObject.h~	/^        TestObject(TestObject& rObj);$/;"	p	class:TestObject	file:	access:public	signature:(TestObject& rObj)
TestObject::TestObject	.\TestObject.h~	/^        TestObject(rangeType<GLfloat>& pitchRange,$/;"	p	class:TestObject	file:	access:public	signature:(rangeType<GLfloat>& pitchRange, rangeType<GLfloat>& yawRange, rangeType<GLfloat>& rollRange, rangeType<GLfloat>& heightRange, rangeType<GLfloat>& initZAsptRatioRange, rangeType<GLfloat>& rotSpeedRange, rangeType<GLfloat>& maxRotDegRange, vector<texture_t *>& texs)
TestObject::adjZAsptRatio	.\TestObject.h	/^        GLfloat adjZAsptRatio;$/;"	m	class:TestObject	access:public
TestObject::adjZAsptRatio	.\TestObject.h~	/^        GLfloat adjZAsptRatio;$/;"	m	class:TestObject	file:	access:public
TestObject::adjustAsptRatio	.\TestObject.h	/^        virtual BOOL adjustAsptRatio(GLfloat delta) = 0;$/;"	p	class:TestObject	access:public	signature:(GLfloat delta)
TestObject::adjustAsptRatio	.\TestObject.h~	/^        virtual BOOL adjustAsptRatio(GLfloat delta) = 0;$/;"	p	class:TestObject	file:	access:public	signature:(GLfloat delta)
TestObject::currRotDeg	.\TestObject.h	/^        GLfloat currRotDeg;$/;"	m	class:TestObject	access:public
TestObject::currRotDeg	.\TestObject.h~	/^        GLfloat currRotDeg;$/;"	m	class:TestObject	file:	access:public
TestObject::draw	.\TestObject.h	/^        virtual void draw(int drawStyle,$/;"	p	class:TestObject	access:public	signature:(int drawStyle, BOOL enableTexture, BOOL enablePYRRotation, BOOL enableMotion, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
TestObject::draw	.\TestObject.h~	/^        virtual void draw(int drawStyle,$/;"	p	class:TestObject	file:	access:public	signature:(int drawStyle, BOOL enableTexture, BOOL enablePYRRotation, BOOL enableMotion, GLfloat zStretch, GLfloat zOffset)
TestObject::draw2D	.\TestObject.h	/^        virtual void draw2D(int drawStyle,$/;"	p	class:TestObject	access:public	signature:(int drawStyle, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
TestObject::draw2D	.\TestObject.h~	/^        virtual void draw2D(int drawStyle,$/;"	p	class:TestObject	file:	access:public	signature:(int drawStyle, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
TestObject::enumProj2DMode	.\TestObject.h	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	g	class:TestObject	access:public
TestObject::enumProj2DMode	.\TestObject.h~	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	g	class:TestObject	file:	access:public
TestObject::enumRotDirection	.\TestObject.h	/^        enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	g	class:TestObject	access:public
TestObject::enumRotDirection	.\TestObject.h~	/^        enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	g	class:TestObject	file:	access:public
TestObject::genObjDesc	.\TestObject.cpp	/^string TestObject::genObjDesc()$/;"	f	class:TestObject	signature:()
TestObject::genObjDesc	.\TestObject.cpp~	/^string TestObject::genObjDesc()$/;"	f	class:TestObject	signature:()
TestObject::genObjDesc	.\TestObject.h	/^        virtual string genObjDesc(); \/\/ get the object descriptions (fixed part)$/;"	p	class:TestObject	access:public	signature:()
TestObject::genObjDesc	.\TestObject.h~	/^        virtual string genObjDesc(); \/\/ get the object descriptions (fixed part)$/;"	p	class:TestObject	file:	access:public	signature:()
TestObject::genObjDescTitle	.\TestObject.cpp	/^string TestObject::genObjDescTitle()$/;"	f	class:TestObject	signature:()
TestObject::genObjDescTitle	.\TestObject.cpp~	/^string TestObject::genObjDescTitle()$/;"	f	class:TestObject	signature:()
TestObject::genObjDescTitle	.\TestObject.h	/^        virtual string genObjDescTitle(); \/\/ get the object descriptions (fixed part)$/;"	p	class:TestObject	access:public	signature:()
TestObject::genObjDescTitle	.\TestObject.h~	/^        virtual string genObjDescTitle(); \/\/ get the object descriptions (fixed part)$/;"	p	class:TestObject	file:	access:public	signature:()
TestObject::genObjPara	.\TestObject.cpp	/^string TestObject::genObjPara()$/;"	f	class:TestObject	signature:()
TestObject::genObjPara	.\TestObject.cpp~	/^string TestObject::genObjPara()$/;"	f	class:TestObject	signature:()
TestObject::genObjPara	.\TestObject.h	/^        virtual string genObjPara(); \/\/ get the object parameters (varied part)$/;"	p	class:TestObject	access:public	signature:()
TestObject::genObjPara	.\TestObject.h~	/^        virtual string genObjPara(); \/\/ get the object parameters (varied part)$/;"	p	class:TestObject	file:	access:public	signature:()
TestObject::genObjParaTitle	.\TestObject.cpp	/^string TestObject::genObjParaTitle()$/;"	f	class:TestObject	signature:()
TestObject::genObjParaTitle	.\TestObject.cpp~	/^string TestObject::genObjParaTitle()$/;"	f	class:TestObject	signature:()
TestObject::genObjParaTitle	.\TestObject.h	/^        virtual string genObjParaTitle(); \/\/ get the object parameters (varied part)$/;"	p	class:TestObject	access:public	signature:()
TestObject::genObjParaTitle	.\TestObject.h~	/^        virtual string genObjParaTitle(); \/\/ get the object parameters (varied part)$/;"	p	class:TestObject	file:	access:public	signature:()
TestObject::getObjID	.\TestObject.h	/^        virtual UINT getObjID(void) = 0;$/;"	p	class:TestObject	access:public	signature:(void)
TestObject::getObjID	.\TestObject.h~	/^        virtual UINT getObjID(void) = 0;$/;"	p	class:TestObject	file:	access:public	signature:(void)
TestObject::getObjName	.\TestObject.h	/^        virtual string getObjName(void) = 0;$/;"	p	class:TestObject	access:public	signature:(void)
TestObject::getObjName	.\TestObject.h~	/^        virtual string getObjName(void) = 0;$/;"	p	class:TestObject	file:	access:public	signature:(void)
TestObject::height	.\TestObject.h	/^        GLfloat height;$/;"	m	class:TestObject	access:public
TestObject::height	.\TestObject.h~	/^        GLfloat height;$/;"	m	class:TestObject	file:	access:public
TestObject::heightRange	.\TestObject.h	/^        rangeType<GLfloat> heightRange;$/;"	m	class:TestObject	access:public
TestObject::heightRange	.\TestObject.h~	/^        rangeType<GLfloat> heightRange;$/;"	m	class:TestObject	file:	access:public
TestObject::initZAsptRatio	.\TestObject.h	/^        GLfloat initZAsptRatio;$/;"	m	class:TestObject	access:public
TestObject::initZAsptRatio	.\TestObject.h~	/^        GLfloat initZAsptRatio;$/;"	m	class:TestObject	file:	access:public
TestObject::initZAsptRatioRange	.\TestObject.h	/^        rangeType<GLfloat> initZAsptRatioRange;$/;"	m	class:TestObject	access:public
TestObject::initZAsptRatioRange	.\TestObject.h~	/^        rangeType<GLfloat> initZAsptRatioRange;$/;"	m	class:TestObject	file:	access:public
TestObject::maxRotDeg	.\TestObject.h	/^        GLfloat maxRotDeg;$/;"	m	class:TestObject	access:public
TestObject::maxRotDeg	.\TestObject.h~	/^        GLfloat maxRotDeg;$/;"	m	class:TestObject	file:	access:public
TestObject::maxRotDegRange	.\TestObject.h	/^        rangeType<GLfloat> maxRotDegRange;$/;"	m	class:TestObject	access:public
TestObject::maxRotDegRange	.\TestObject.h~	/^        rangeType<GLfloat> maxRotDegRange;$/;"	m	class:TestObject	file:	access:public
TestObject::newObj	.\TestObject.h	/^        virtual TestObject * newObj(TestObject& rObject) = 0;$/;"	p	class:TestObject	access:public	signature:(TestObject& rObject)
TestObject::newObj	.\TestObject.h~	/^        virtual TestObject * newObj(TestObject& rObject) = 0;$/;"	p	class:TestObject	file:	access:public	signature:(TestObject& rObject)
TestObject::objName	.\TestObject.h	/^        string objName;$/;"	m	class:TestObject	access:protected
TestObject::objName	.\TestObject.h~	/^        string objName;$/;"	m	class:TestObject	file:	access:protected
TestObject::objectID	.\TestObject.cpp	/^const UINT TestObject::objectID = 0;$/;"	m	class:TestObject	file:
TestObject::objectID	.\TestObject.cpp~	/^const UINT TestObject::objectID = 0;$/;"	m	class:TestObject	file:
TestObject::objectID	.\TestObject.h	/^        static const UINT objectID;$/;"	m	class:TestObject	access:public
TestObject::objectID	.\TestObject.h~	/^        static const UINT objectID;$/;"	m	class:TestObject	file:	access:public
TestObject::pitch	.\TestObject.h	/^        GLfloat pitch;$/;"	m	class:TestObject	access:public
TestObject::pitch	.\TestObject.h~	/^        GLfloat pitch;$/;"	m	class:TestObject	file:	access:public
TestObject::pitchRange	.\TestObject.h	/^        rangeType<GLfloat> pitchRange;$/;"	m	class:TestObject	access:public
TestObject::pitchRange	.\TestObject.h~	/^        rangeType<GLfloat> pitchRange;$/;"	m	class:TestObject	file:	access:public
TestObject::proj2DMode	.\TestObject.h	/^        enumProj2DMode proj2DMode;$/;"	m	class:TestObject	access:public
TestObject::proj2DMode	.\TestObject.h~	/^        enumProj2DMode proj2DMode;$/;"	m	class:TestObject	file:	access:public
TestObject::reset	.\TestObject.cpp	/^void TestObject::reset()$/;"	f	class:TestObject	signature:()
TestObject::reset	.\TestObject.cpp~	/^void TestObject::reset()$/;"	f	class:TestObject	signature:()
TestObject::reset	.\TestObject.h	/^        void reset();$/;"	p	class:TestObject	access:public	signature:()
TestObject::reset	.\TestObject.h~	/^        void reset();$/;"	p	class:TestObject	file:	access:public	signature:()
TestObject::reverseRotDirection	.\TestObject.cpp	/^void TestObject::reverseRotDirection()$/;"	f	class:TestObject	signature:()
TestObject::reverseRotDirection	.\TestObject.cpp~	/^void TestObject::reverseRotDirection()$/;"	f	class:TestObject	signature:()
TestObject::reverseRotDirection	.\TestObject.h	/^        void reverseRotDirection();$/;"	p	class:TestObject	access:public	signature:()
TestObject::reverseRotDirection	.\TestObject.h~	/^        void reverseRotDirection();$/;"	p	class:TestObject	file:	access:public	signature:()
TestObject::roll	.\TestObject.h	/^        GLfloat roll;$/;"	m	class:TestObject	access:public
TestObject::roll	.\TestObject.h~	/^        GLfloat roll;$/;"	m	class:TestObject	file:	access:public
TestObject::rollRange	.\TestObject.h	/^        rangeType<GLfloat> rollRange;$/;"	m	class:TestObject	access:public
TestObject::rollRange	.\TestObject.h~	/^        rangeType<GLfloat> rollRange;$/;"	m	class:TestObject	file:	access:public
TestObject::rotDirection	.\TestObject.h	/^        enumRotDirection rotDirection;$/;"	m	class:TestObject	access:public
TestObject::rotDirection	.\TestObject.h~	/^        enumRotDirection rotDirection;$/;"	m	class:TestObject	file:	access:public
TestObject::rotSpeed	.\TestObject.h	/^        GLfloat rotSpeed;$/;"	m	class:TestObject	access:public
TestObject::rotSpeed	.\TestObject.h~	/^        GLfloat rotSpeed;$/;"	m	class:TestObject	file:	access:public
TestObject::rotSpeedRange	.\TestObject.h	/^        rangeType<GLfloat> rotSpeedRange;$/;"	m	class:TestObject	access:public
TestObject::rotSpeedRange	.\TestObject.h~	/^        rangeType<GLfloat> rotSpeedRange;$/;"	m	class:TestObject	file:	access:public
TestObject::rotate	.\TestObject.cpp	/^void TestObject::rotate(GLfloat degree)$/;"	f	class:TestObject	signature:(GLfloat degree)
TestObject::rotate	.\TestObject.cpp~	/^void TestObject::rotate(GLfloat degree)$/;"	f	class:TestObject	signature:(GLfloat degree)
TestObject::rotate	.\TestObject.h	/^        void rotate(GLfloat degree);$/;"	p	class:TestObject	access:public	signature:(GLfloat degree)
TestObject::rotate	.\TestObject.h~	/^        void rotate(GLfloat degree);$/;"	p	class:TestObject	file:	access:public	signature:(GLfloat degree)
TestObject::setRandPara	.\TestObject.cpp	/^void TestObject::setRandPara()$/;"	f	class:TestObject	signature:()
TestObject::setRandPara	.\TestObject.cpp~	/^void TestObject::setRandPara()$/;"	f	class:TestObject	signature:()
TestObject::setRandPara	.\TestObject.h	/^        virtual void setRandPara(void);$/;"	p	class:TestObject	access:public	signature:(void)
TestObject::setRandPara	.\TestObject.h~	/^        virtual void setRandPara(void);$/;"	p	class:TestObject	file:	access:public	signature:(void)
TestObject::textures	.\TestObject.h	/^        vector<texture_t *> textures;$/;"	m	class:TestObject	access:public
TestObject::textures	.\TestObject.h~	/^        vector<texture_t *> textures;$/;"	m	class:TestObject	file:	access:public
TestObject::yaw	.\TestObject.h	/^        GLfloat yaw;$/;"	m	class:TestObject	access:public
TestObject::yaw	.\TestObject.h~	/^        GLfloat yaw;$/;"	m	class:TestObject	file:	access:public
TestObject::yawRange	.\TestObject.h	/^        rangeType<GLfloat> yawRange;$/;"	m	class:TestObject	access:public
TestObject::yawRange	.\TestObject.h~	/^        rangeType<GLfloat> yawRange;$/;"	m	class:TestObject	file:	access:public
TestObject::~TestObject	.\TestObject.cpp	/^TestObject::~TestObject(void)$/;"	f	class:TestObject	signature:(void)
TestObject::~TestObject	.\TestObject.cpp~	/^TestObject::~TestObject(void)$/;"	f	class:TestObject	signature:(void)
TestObject::~TestObject	.\TestObject.h	/^        virtual ~TestObject(void);$/;"	p	class:TestObject	access:public	signature:(void)
TestObject::~TestObject	.\TestObject.h~	/^        virtual ~TestObject(void);$/;"	p	class:TestObject	file:	access:public	signature:(void)
TestObjectFactory	.\TestObjectFactory.cpp	/^TestObjectFactory::TestObjectFactory(void)$/;"	f	class:TestObjectFactory	signature:(void)
TestObjectFactory	.\TestObjectFactory.cpp~	/^TestObjectFactory::TestObjectFactory(void)$/;"	f	class:TestObjectFactory	signature:(void)
TestObjectFactory	.\TestObjectFactory.h	/^        TestObjectFactory(void);$/;"	p	class:TestObjectFactory	access:public	signature:(void)
TestObjectFactory	.\TestObjectFactory.h	/^class TestObjectFactory$/;"	c
TestObjectFactory	.\TestObjectFactory.h~	/^        TestObjectFactory(void);$/;"	p	class:TestObjectFactory	file:	access:public	signature:(void)
TestObjectFactory	.\TestObjectFactory.h~	/^class TestObjectFactory$/;"	c	file:
TestObjectFactory::TestObjectFactory	.\TestObjectFactory.cpp	/^TestObjectFactory::TestObjectFactory(void)$/;"	f	class:TestObjectFactory	signature:(void)
TestObjectFactory::TestObjectFactory	.\TestObjectFactory.cpp~	/^TestObjectFactory::TestObjectFactory(void)$/;"	f	class:TestObjectFactory	signature:(void)
TestObjectFactory::TestObjectFactory	.\TestObjectFactory.h	/^        TestObjectFactory(void);$/;"	p	class:TestObjectFactory	access:public	signature:(void)
TestObjectFactory::TestObjectFactory	.\TestObjectFactory.h~	/^        TestObjectFactory(void);$/;"	p	class:TestObjectFactory	file:	access:public	signature:(void)
TestObjectFactory::createObject	.\TestObjectFactory.h	/^        virtual TestObject* createObject(condCons_t& constraint, vector<texture_t *>& textures) = 0;$/;"	p	class:TestObjectFactory	access:public	signature:(condCons_t& constraint, vector<texture_t *>& textures)
TestObjectFactory::createObject	.\TestObjectFactory.h~	/^        virtual TestObject* createObject(condCons_t& constraint, vector<texture_t *>& textureIDs) = 0;$/;"	p	class:TestObjectFactory	file:	access:public	signature:(condCons_t& constraint, vector<texture_t *>& textureIDs)
TestObjectFactory::getProductName	.\TestObjectFactory.h	/^        virtual const string getProductName() = 0;$/;"	p	class:TestObjectFactory	access:public	signature:()
TestObjectFactory::getProductName	.\TestObjectFactory.h~	/^        virtual const string getProductName() = 0;$/;"	p	class:TestObjectFactory	file:	access:public	signature:()
TestObjectFactory::productName	.\TestObjectFactory.h	/^        string productName;$/;"	m	class:TestObjectFactory	access:protected
TestObjectFactory::productName	.\TestObjectFactory.h~	/^        string productName;$/;"	m	class:TestObjectFactory	file:	access:protected
TestObjectFactory::~TestObjectFactory	.\TestObjectFactory.cpp	/^TestObjectFactory::~TestObjectFactory(void)$/;"	f	class:TestObjectFactory	signature:(void)
TestObjectFactory::~TestObjectFactory	.\TestObjectFactory.cpp~	/^TestObjectFactory::~TestObjectFactory(void)$/;"	f	class:TestObjectFactory	signature:(void)
TestObjectFactory::~TestObjectFactory	.\TestObjectFactory.h	/^        virtual ~TestObjectFactory(void);$/;"	p	class:TestObjectFactory	access:public	signature:(void)
TestObjectFactory::~TestObjectFactory	.\TestObjectFactory.h~	/^        virtual ~TestObjectFactory(void);$/;"	p	class:TestObjectFactory	file:	access:public	signature:(void)
Trial	.\Trial.cpp	/^Trial::Trial(int trialID, cond_t& cond):$/;"	f	class:Trial	signature:(int trialID, cond_t& cond)
Trial	.\Trial.cpp~	/^Trial::Trial(int trialID, cond_t& cond):$/;"	f	class:Trial	signature:(int trialID, cond_t& cond)
Trial	.\Trial.h	/^        Trial(int trialID, cond_t& cond);$/;"	p	class:Trial	access:public	signature:(int trialID, cond_t& cond)
Trial	.\Trial.h	/^class Trial$/;"	c
Trial	.\Trial.h~	/^        Trial(int trialID, cond_t& cond);$/;"	p	class:Trial	file:	access:public	signature:(int trialID, cond_t& cond)
Trial	.\Trial.h~	/^class Trial$/;"	c	file:
Trial::IDLE	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state
Trial::IDLE	.\Trial.h~	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state	file:
Trial::MAIN_SCENE	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state
Trial::MAIN_SCENE	.\Trial.h~	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state	file:
Trial::POST_TRIAL_SCENE	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state
Trial::POST_TRIAL_SCENE	.\Trial.h~	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state	file:
Trial::PRE_TRIAL_SCENE	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state
Trial::PRE_TRIAL_SCENE	.\Trial.h~	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	e	enum:Trial::state	file:
Trial::Trial	.\Trial.cpp	/^Trial::Trial(int trialID, cond_t& cond):$/;"	f	class:Trial	signature:(int trialID, cond_t& cond)
Trial::Trial	.\Trial.cpp~	/^Trial::Trial(int trialID, cond_t& cond):$/;"	f	class:Trial	signature:(int trialID, cond_t& cond)
Trial::Trial	.\Trial.h	/^        Trial(int trialID, cond_t& cond);$/;"	p	class:Trial	access:public	signature:(int trialID, cond_t& cond)
Trial::Trial	.\Trial.h~	/^        Trial(int trialID, cond_t& cond);$/;"	p	class:Trial	file:	access:public	signature:(int trialID, cond_t& cond)
Trial::condition	.\Trial.h	/^        cond_t& condition;$/;"	m	class:Trial	access:private
Trial::condition	.\Trial.h~	/^        cond_t& condition;$/;"	m	class:Trial	file:	access:private
Trial::currState	.\Trial.h	/^        enum state currState;$/;"	m	class:Trial	typeref:enum:Trial::state	access:private
Trial::currState	.\Trial.h~	/^        enum state currState;$/;"	m	class:Trial	typeref:enum:Trial::state	file:	access:private
Trial::finished	.\Trial.h	/^        BOOL finished;$/;"	m	class:Trial	access:private
Trial::finished	.\Trial.h~	/^        BOOL finished;$/;"	m	class:Trial	file:	access:private
Trial::fps	.\Trial.h	/^        float fps;$/;"	m	class:Trial	access:private
Trial::proceedNextScene	.\Trial.cpp	/^BOOL Trial::proceedNextScene()$/;"	f	class:Trial	signature:()
Trial::proceedNextScene	.\Trial.cpp~	/^BOOL Trial::proceedNextScene()$/;"	f	class:Trial	signature:()
Trial::proceedNextScene	.\Trial.h	/^        BOOL proceedNextScene();$/;"	p	class:Trial	access:public	signature:()
Trial::proceedNextScene	.\Trial.h~	/^        BOOL proceedNextScene();$/;"	p	class:Trial	file:	access:public	signature:()
Trial::recordTrialInfo	.\Trial.cpp	/^BOOL Trial::recordTrialInfo()$/;"	f	class:Trial	signature:()
Trial::recordTrialInfo	.\Trial.cpp~	/^BOOL Trial::recordTrialInfo()$/;"	f	class:Trial	signature:()
Trial::recordTrialInfo	.\Trial.h	/^        BOOL recordTrialInfo();$/;"	p	class:Trial	access:public	signature:()
Trial::recordTrialInfo	.\Trial.h~	/^        BOOL recordTrialInfo();$/;"	p	class:Trial	file:	access:public	signature:()
Trial::startTrial	.\Trial.cpp	/^BOOL Trial::startTrial()$/;"	f	class:Trial	signature:()
Trial::startTrial	.\Trial.cpp~	/^BOOL Trial::startTrial()$/;"	f	class:Trial	signature:()
Trial::startTrial	.\Trial.h	/^        BOOL startTrial();$/;"	p	class:Trial	access:public	signature:()
Trial::startTrial	.\Trial.h~	/^        BOOL startTrial();$/;"	p	class:Trial	file:	access:public	signature:()
Trial::state	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	g	class:Trial	access:public
Trial::state	.\Trial.h~	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	g	class:Trial	file:	access:public
Trial::stepTrial	.\Trial.h	/^        BOOL stepTrial(); $/;"	p	class:Trial	access:public	signature:()
Trial::stepTrial	.\Trial.h~	/^        BOOL stepTrial(); $/;"	p	class:Trial	file:	access:public	signature:()
Trial::trialID	.\Trial.h	/^        UINT trialID;$/;"	m	class:Trial	access:private
Trial::trialID	.\Trial.h~	/^        UINT trialID;$/;"	m	class:Trial	file:	access:private
Trial::~Trial	.\Trial.cpp	/^Trial::~Trial(void)$/;"	f	class:Trial	signature:(void)
Trial::~Trial	.\Trial.cpp~	/^Trial::~Trial(void)$/;"	f	class:Trial	signature:(void)
Trial::~Trial	.\Trial.h	/^        ~Trial();$/;"	p	class:Trial	access:public	signature:()
Trial::~Trial	.\Trial.h~	/^        ~Trial();$/;"	p	class:Trial	file:	access:public	signature:()
WIN32_LEAN_AND_MEAN	.\stdafx.h	10;"	d
WIN32_LEAN_AND_MEAN	.\stdafx.h~	10;"	d	file:
WINVER	.\targetver.h	11;"	d
WinMain	.\experiment.cpp	/^int APIENTRY WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance,$/;"	f	signature:( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
WinMain	.\experiment.cpp~	/^int APIENTRY WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance,$/;"	f	signature:( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
Y	.\Debug\experiment.obj	/^LYö=M©t/;"	v
Y	.\Debug\experiment.pdb	/^/;"	v
Z	.\Release\groupBasedConditions.obj	/^/;"	v
_BUF_SIZE	.\Debug\ConfWnd.obj	/^/;"	v
_Ctype	.\Release\TestObject.obj	/^/;"	v
_H_CONFWND_	.\ConfWnd.h	2;"	d
_H_CONFWND_	.\ConfWnd.h~	2;"	d	file:
_WIN32_IE	.\targetver.h	23;"	d
_WIN32_WINDOWS	.\targetver.h	19;"	d
_WIN32_WINNT	.\targetver.h	15;"	d
__anon1::CONTINUOUS_DISPLAY	.\tags	/^CONTINUOUS_DISPLAY	.\\ConditionConstraints.h~	\/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$\/;"	e	enum:DisplayMode	file:$/;"	m	struct:__anon1	file:	access:public
addCondition	.\Conditions.cpp	/^int Conditions::addCondition(cond_t* pCondition)$/;"	f	class:Conditions	signature:(cond_t* pCondition)
addCondition	.\Conditions.cpp	/^int Conditions::addCondition(int constraintIndex)$/;"	f	class:Conditions	signature:(int constraintIndex)
addCondition	.\Conditions.cpp~	/^int Conditions::addCondition(cond_t* pCondition)$/;"	f	class:Conditions	signature:(cond_t* pCondition)
addCondition	.\Conditions.cpp~	/^int Conditions::addCondition(int constraintIndex)$/;"	f	class:Conditions	signature:(int constraintIndex)
addCondition	.\Conditions.h	/^        int addCondition(cond_t* pCondition);$/;"	p	class:Conditions	access:public	signature:(cond_t* pCondition)
addCondition	.\Conditions.h	/^        int addCondition(int constraintIndex);$/;"	p	class:Conditions	access:public	signature:(int constraintIndex)
addCondition	.\Conditions.h~	/^        int addCondition(cond_t* pCondition);$/;"	p	class:Conditions	file:	access:public	signature:(cond_t* pCondition)
addCondition	.\Conditions.h~	/^        int addCondition(int constraintIndex);$/;"	p	class:Conditions	file:	access:public	signature:(int constraintIndex)
addConstraint	.\Conditions.cpp	/^int Conditions::addConstraint(condCons_t* pConstraint)$/;"	f	class:Conditions	signature:(condCons_t* pConstraint)
addConstraint	.\Conditions.cpp~	/^int Conditions::addConstraint(condCons_t* pConstraint)$/;"	f	class:Conditions	signature:(condCons_t* pConstraint)
addConstraint	.\Conditions.h	/^        int addConstraint(condCons_t* pConstraint);$/;"	p	class:Conditions	access:public	signature:(condCons_t* pConstraint)
addConstraint	.\Conditions.h~	/^        int addConstraint(condCons_t* pConstraint);$/;"	p	class:Conditions	file:	access:public	signature:(condCons_t* pConstraint)
adjZAsptRatio	.\TestObject.h	/^        GLfloat adjZAsptRatio;$/;"	m	class:TestObject	access:public
adjZAsptRatio	.\TestObject.h~	/^        GLfloat adjZAsptRatio;$/;"	m	class:TestObject	file:	access:public
adjustAsptRatio	.\CylinderObject.cpp	/^BOOL CylinderObject::adjustAsptRatio(GLfloat delta)$/;"	f	class:CylinderObject	signature:(GLfloat delta)
adjustAsptRatio	.\CylinderObject.cpp~	/^BOOL CylinderObject::adjustAsptRatio(GLfloat delta)$/;"	f	class:CylinderObject	signature:(GLfloat delta)
adjustAsptRatio	.\CylinderObject.h	/^        virtual BOOL adjustAsptRatio(GLfloat delta);$/;"	p	class:CylinderObject	access:public	signature:(GLfloat delta)
adjustAsptRatio	.\CylinderObject.h~	/^        virtual BOOL adjustAsptRatio(GLfloat delta);$/;"	p	class:CylinderObject	file:	access:public	signature:(GLfloat delta)
adjustAsptRatio	.\TestObject.h	/^        virtual BOOL adjustAsptRatio(GLfloat delta) = 0;$/;"	p	class:TestObject	access:public	signature:(GLfloat delta)
adjustAsptRatio	.\TestObject.h~	/^        virtual BOOL adjustAsptRatio(GLfloat delta) = 0;$/;"	p	class:TestObject	file:	access:public	signature:(GLfloat delta)
b	.\Debug\ConfWnd.obj	/^Lb/;"	v
bottomTextureID	.\CylinderObject.h	/^        GLuint bottomTextureID;$/;"	m	class:CylinderObject	access:public
bottomTextureID	.\CylinderObject.h~	/^        GLuint bottomTextureID;$/;"	m	class:CylinderObject	file:	access:public
buildString	.\PostExperimentScene.cpp	/^string PostExperimentScene::buildString()$/;"	f	class:PostExperimentScene	signature:()
buildString	.\PostExperimentScene.cpp~	/^string PostExperimentScene::buildString()$/;"	f	class:PostExperimentScene	signature:()
buildString	.\PostExperimentScene.h	/^        virtual string buildString();$/;"	p	class:PostExperimentScene	access:private	signature:()
buildString	.\PostExperimentScene.h~	/^        virtual string buildString();$/;"	p	class:PostExperimentScene	file:	access:private	signature:()
buildString	.\PreTrialScene.cpp	/^string PreTrialScene::buildString()$/;"	f	class:PreTrialScene	signature:()
buildString	.\PreTrialScene.cpp~	/^string PreTrialScene::buildString()$/;"	f	class:PreTrialScene	signature:()
buildString	.\PreTrialScene.h	/^        virtual string buildString();$/;"	p	class:PreTrialScene	access:private	signature:()
buildString	.\PreTrialScene.h~	/^        virtual string buildString();$/;"	p	class:PreTrialScene	file:	access:private	signature:()
buildString	.\PureWordScene.h	/^        virtual string buildString(void) = 0; $/;"	p	class:PureWordScene	access:protected	signature:(void)
c	.\Debug\CylinderObject.obj	/^Lcã=MWé/;"	v
cancelKMBinds	.\Screen.cpp	/^BOOL Screen::cancelKMBinds()$/;"	f	class:Screen	signature:()
cancelKMBinds	.\Screen.cpp~	/^BOOL Screen::cancelKMBinds()$/;"	f	class:Screen	signature:()
cancelKMBinds	.\Screen.h	/^        BOOL cancelKMBinds();$/;"	p	class:Screen	access:public	signature:()
cancelKMBinds	.\Screen.h~	/^        BOOL cancelKMBinds();$/;"	p	class:Screen	file:	access:public	signature:()
centereye	.\StereoViewingFrameV2.h	/^	vector_3d centereye;$/;"	m	class:StereoViewingFrame	access:public
centereye	.\StereoViewingFrameV2.h~	/^	vector_3d centereye;$/;"	m	class:StereoViewingFrame	file:	access:public
centerprojmatrix	.\StereoViewingFrameV2.h	/^	matrix_4x4 centerprojmatrix;$/;"	m	class:StereoViewingFrame	access:public
centerprojmatrix	.\StereoViewingFrameV2.h~	/^	matrix_4x4 centerprojmatrix;$/;"	m	class:StereoViewingFrame	file:	access:public
clear	.\Screen.cpp	/^BOOL Screen::clear()$/;"	f	class:Screen	signature:()
clear	.\Screen.cpp~	/^BOOL Screen::clear()$/;"	f	class:Screen	signature:()
clear	.\Screen.h	/^        BOOL clear();$/;"	p	class:Screen	access:public	signature:()
clear	.\Screen.h~	/^        BOOL clear();$/;"	p	class:Screen	file:	access:public	signature:()
clearConditions	.\Conditions.cpp	/^BOOL Conditions::clearConditions()$/;"	f	class:Conditions	signature:()
clearConditions	.\Conditions.cpp~	/^BOOL Conditions::clearConditions()$/;"	f	class:Conditions	signature:()
clearConditions	.\Conditions.h	/^        virtual BOOL clearConditions();$/;"	p	class:Conditions	access:public	signature:()
clearConditions	.\Conditions.h~	/^        virtual BOOL clearConditions();$/;"	p	class:Conditions	file:	access:public	signature:()
clearConditions	.\groupBasedConditions.cpp	/^BOOL groupBasedConditions::clearConditions()$/;"	f	class:groupBasedConditions	signature:()
clearConditions	.\groupBasedConditions.cpp~	/^BOOL groupBasedConditions::clearConditions()$/;"	f	class:groupBasedConditions	signature:()
clearConditions	.\groupBasedConditions.h	/^        virtual BOOL clearConditions();$/;"	p	class:groupBasedConditions	access:public	signature:()
clearConditions	.\groupBasedConditions.h~	/^        virtual BOOL clearConditions();$/;"	p	class:groupBasedConditions	file:	access:public	signature:()
closeOutputFile	.\experiment.cpp	/^BOOL Experiment::closeOutputFile()$/;"	f	class:Experiment	signature:()
closeOutputFile	.\experiment.cpp~	/^BOOL Experiment::closeOutputFile()$/;"	f	class:Experiment	signature:()
closeOutputFile	.\experiment.h	/^        BOOL closeOutputFile();$/;"	p	class:Experiment	access:private	signature:()
closeOutputFile	.\experiment.h~	/^        BOOL closeOutputFile();$/;"	p	class:Experiment	file:	access:private	signature:()
color	.\texture.h	/^        UINT color[3];$/;"	m	union:raw_textureStruct::__anon4	access:public
color	.\texture.h	/^        UINT color[3];$/;"	m	union:textureStruct::__anon5	access:public
color	.\texture.h~	/^        UINT color[3];$/;"	m	union:raw_textureStruct::__anon6	file:	access:public
color	.\texture.h~	/^        UINT color[3];$/;"	m	union:textureStruct::__anon7	file:	access:public
colorIDs	.\Screen.h	/^        vector< vector<GLuint> > colorIDs;$/;"	m	class:Screen	access:public
colorIDs	.\Screen.h~	/^        vector< vector<GLuint> > colorIDs;$/;"	m	class:Screen	file:	access:public
condCons_t	.\ConditionConstraints.h	/^typedef struct conditionConstraints condCons_t;$/;"	t	typeref:struct:conditionConstraints
condCons_t	.\ConditionConstraints.h~	/^typedef struct conditionConstraints condCons_t;$/;"	t	typeref:struct:conditionConstraints	file:
cond_t	.\Conditions.h	/^typedef struct conditionStruct cond_t;$/;"	t	typeref:struct:conditionStruct
cond_t	.\Conditions.h~	/^typedef struct conditionStruct cond_t;$/;"	t	typeref:struct:conditionStruct	file:
cond_t::reset	.\Conditions.cpp	/^void cond_t::reset()$/;"	f	class:cond_t	signature:()
cond_t::reset	.\Conditions.cpp~	/^void cond_t::reset()$/;"	f	class:cond_t	signature:()
condition	.\Overlapped2DViewScene.h	/^        cond_t& condition;$/;"	m	class:Overlapped2DViewScene	access:private
condition	.\Overlapped2DViewScene.h~	/^        cond_t& condition;$/;"	m	class:Overlapped2DViewScene	file:	access:private
condition	.\Separate2D3DViewScene.h	/^        cond_t& condition;$/;"	m	class:Separate2D3DViewScene	access:private
condition	.\Separate2D3DViewScene.h~	/^        cond_t& condition;$/;"	m	class:Separate2D3DViewScene	file:	access:private
condition	.\Trial.h	/^        cond_t& condition;$/;"	m	class:Trial	access:private
condition	.\Trial.h~	/^        cond_t& condition;$/;"	m	class:Trial	file:	access:private
conditionConstraints	.\ConditionConstraints.h	/^struct conditionConstraints$/;"	s
conditionConstraints	.\ConditionConstraints.h~	/^struct conditionConstraints$/;"	s	file:
conditionConstraints::dispMode	.\ConditionConstraints.h	/^    displayMode_t dispMode;$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::dispMode	.\ConditionConstraints.h~	/^    displayMode_t dispMode;$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::genDesc	.\ConditionConstraints.h	/^    string genDesc()$/;"	f	struct:conditionConstraints	access:public	signature:()
conditionConstraints::genDesc	.\ConditionConstraints.h~	/^    string genDesc()$/;"	f	struct:conditionConstraints	access:public	signature:()
conditionConstraints::genDescTitle	.\ConditionConstraints.h	/^    string genDescTitle()$/;"	f	struct:conditionConstraints	access:public	signature:()
conditionConstraints::genDescTitle	.\ConditionConstraints.h~	/^    string genDescTitle()$/;"	f	struct:conditionConstraints	access:public	signature:()
conditionConstraints::groupID	.\ConditionConstraints.h	/^    int groupID;$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::groupID	.\ConditionConstraints.h~	/^    int groupID;$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::heightRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> heightRange;$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::heightRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> heightRange;$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::id	.\ConditionConstraints.h	/^    int id;$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::id	.\ConditionConstraints.h~	/^    int id;$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::initZAsptRatioRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> initZAsptRatioRange;$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::initZAsptRatioRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> initZAsptRatioRange;$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::maxRotDegRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> maxRotDegRange;$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::maxRotDegRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> maxRotDegRange;$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::objectNames	.\ConditionConstraints.h	/^    vector<string> objectNames;$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::objectNames	.\ConditionConstraints.h~	/^    vector<string> objectNames;$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::pitchRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> pitchRange;$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::pitchRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> pitchRange;$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::radiusRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> radiusRange;$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::radiusRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> radiusRange;$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::rollRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> rollRange;$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::rollRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> rollRange;$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::rotSpeedRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> rotSpeedRange;$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::rotSpeedRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> rotSpeedRange;$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::secBlackScreen	.\ConditionConstraints.h	/^    float secBlackScreen; \/\/ seconds for displaying black screen$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::secBlackScreen	.\ConditionConstraints.h~	/^    float secBlackScreen; \/\/ seconds for displaying black screen$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::secDisplay	.\ConditionConstraints.h	/^    float secDisplay; \/\/ seconds for displaying object$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::secDisplay	.\ConditionConstraints.h~	/^    float secDisplay; \/\/ seconds for displaying object$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::textureGroups	.\ConditionConstraints.h	/^    vector< vector<string> * > textureGroups;$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::textureGroups	.\ConditionConstraints.h~	/^    vector< vector<string> * > textureGroups;$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::weight	.\ConditionConstraints.h	/^    int weight; \/\/ The weight of the constraint$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::weight	.\ConditionConstraints.h~	/^    int weight; \/\/ The weight of the constraint$/;"	m	struct:conditionConstraints	file:	access:public
conditionConstraints::yawRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> yawRange;$/;"	m	struct:conditionConstraints	access:public
conditionConstraints::yawRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> yawRange;$/;"	m	struct:conditionConstraints	file:	access:public
conditionGroups	.\groupBasedConditions.h	/^        vector< vector<int> * > conditionGroups;$/;"	m	class:groupBasedConditions	access:private
conditionGroups	.\groupBasedConditions.h~	/^        vector< vector<int> * > conditionGroups;$/;"	m	class:groupBasedConditions	file:	access:private
conditionRepeatTimePerSec	.\experiment.h	/^        unsigned int conditionRepeatTimePerSec;$/;"	m	class:Experiment	access:public
conditionRepeatTimePerSec	.\experiment.h~	/^        unsigned int conditionRepeatTimePerSec;$/;"	m	class:Experiment	file:	access:public
conditionRepeatTimesPerSec	.\Conditions.h	/^        int conditionRepeatTimesPerSec;$/;"	m	class:Conditions	access:protected
conditionRepeatTimesPerSec	.\Conditions.h~	/^        int conditionRepeatTimesPerSec;$/;"	m	class:Conditions	file:	access:protected
conditionStruct	.\Conditions.h	/^struct conditionStruct$/;"	s
conditionStruct	.\Conditions.h~	/^struct conditionStruct$/;"	s	file:
conditionStruct::constraintGroupID	.\Conditions.h	/^    int constraintGroupID;$/;"	m	struct:conditionStruct	access:public
conditionStruct::constraintGroupID	.\Conditions.h~	/^    int constraintGroupID;$/;"	m	struct:conditionStruct	file:	access:public
conditionStruct::constraintID	.\Conditions.h	/^    int constraintID;$/;"	m	struct:conditionStruct	access:public
conditionStruct::constraintID	.\Conditions.h~	/^    int constraintID;$/;"	m	struct:conditionStruct	file:	access:public
conditionStruct::dispMode	.\Conditions.h	/^    displayMode_t dispMode;$/;"	m	struct:conditionStruct	access:public
conditionStruct::dispMode	.\Conditions.h~	/^    displayMode_t dispMode;$/;"	m	struct:conditionStruct	file:	access:public
conditionStruct::pRealObject	.\Conditions.h	/^    TestObject *pRealObject; \/\/ Store the real object's pointer here$/;"	m	struct:conditionStruct	access:public
conditionStruct::pRealObject	.\Conditions.h~	/^    TestObject *pRealObject; \/\/ Store the real object's pointer here$/;"	m	struct:conditionStruct	file:	access:public
conditionStruct::repeatTime	.\Conditions.h	/^    int repeatTime; \/\/ the times that the condition need to be repeated in one section$/;"	m	struct:conditionStruct	access:public
conditionStruct::repeatTime	.\Conditions.h~	/^    int repeatTime; \/\/ the times that the condition need to be repeated in one section$/;"	m	struct:conditionStruct	file:	access:public
conditionStruct::reset	.\Conditions.h	/^    void reset();$/;"	p	struct:conditionStruct	access:public	signature:()
conditionStruct::reset	.\Conditions.h~	/^    void reset();$/;"	p	struct:conditionStruct	file:	access:public	signature:()
conditionStruct::secBlackScreen	.\Conditions.h	/^    float secBlackScreen; \/\/ seconds for displaying black screen$/;"	m	struct:conditionStruct	access:public
conditionStruct::secBlackScreen	.\Conditions.h~	/^    float secBlackScreen; \/\/ seconds for displaying black screen$/;"	m	struct:conditionStruct	file:	access:public
conditionStruct::secDisplay	.\Conditions.h	/^    float secDisplay; \/\/ seconds for displaying object$/;"	m	struct:conditionStruct	access:public
conditionStruct::secDisplay	.\Conditions.h~	/^    float secDisplay; \/\/ seconds for displaying object$/;"	m	struct:conditionStruct	file:	access:public
conditionStruct::textures	.\Conditions.h	/^    vector<texture_t *> textures; \/\/ Stores the textures for the object$/;"	m	struct:conditionStruct	access:public
conditionStruct::textures	.\Conditions.h~	/^    vector<texture_t *> textures; \/\/ Stores the textures for the object$/;"	m	struct:conditionStruct	file:	access:public
conditionStruct::xyz2D	.\Conditions.h	/^    vector<GLfloat> xyz2D;$/;"	m	struct:conditionStruct	access:public
conditionStruct::xyz3D	.\Conditions.h	/^    vector<GLfloat> xyz3D;$/;"	m	struct:conditionStruct	access:public
conditions	.\Conditions.h	/^        vector<cond_t *> conditions;$/;"	m	class:Conditions	access:protected
conditions	.\Conditions.h~	/^        vector<cond_t *> conditions;$/;"	m	class:Conditions	file:	access:protected
confWndProc	.\ConfWnd.cpp	/^INT_PTR CALLBACK ConfWnd::confWndProc(HWND hDlg, UINT message, UINT wParam, LONG lParam)$/;"	f	class:ConfWnd	signature:(HWND hDlg, UINT message, UINT wParam, LONG lParam)
confWndProc	.\ConfWnd.cpp~	/^INT_PTR CALLBACK ConfWnd::confWndProc(HWND hDlg, UINT message, UINT wParam, LONG lParam)$/;"	f	class:ConfWnd	signature:(HWND hDlg, UINT message, UINT wParam, LONG lParam)
confWndProc	.\ConfWnd.h	/^        static INT_PTR CALLBACK confWndProc(HWND hWnd, UINT message, UINT wParam, LONG lParam);$/;"	p	class:ConfWnd	access:public	signature:(HWND hWnd, UINT message, UINT wParam, LONG lParam)
confWndProc	.\ConfWnd.h~	/^        static INT_PTR CALLBACK confWndProc(HWND hWnd, UINT message, UINT wParam, LONG lParam);$/;"	p	class:ConfWnd	file:	access:public	signature:(HWND hWnd, UINT message, UINT wParam, LONG lParam)
confirmConfiguration	.\ConfWnd.cpp	/^void ConfWnd::confirmConfiguration(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
confirmConfiguration	.\ConfWnd.cpp~	/^void ConfWnd::confirmConfiguration(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
confirmConfiguration	.\ConfWnd.h	/^        void confirmConfiguration(HWND hDlg);$/;"	p	class:ConfWnd	access:private	signature:(HWND hDlg)
confirmConfiguration	.\ConfWnd.h~	/^        void confirmConfiguration(HWND hDlg);$/;"	p	class:ConfWnd	file:	access:private	signature:(HWND hDlg)
const_reference	.\Debug\CylinderFactory.obj	/^c/;"	v
const_reference	.\Debug\TestObjectFactory.obj	/^/;"	v
constraintGroupID	.\Conditions.h	/^    int constraintGroupID;$/;"	m	struct:conditionStruct	access:public
constraintGroupID	.\Conditions.h~	/^    int constraintGroupID;$/;"	m	struct:conditionStruct	file:	access:public
constraintGroups	.\groupBasedConditions.h	/^        vector< vector<int> * > constraintGroups;$/;"	m	class:groupBasedConditions	access:private
constraintGroups	.\groupBasedConditions.h~	/^        vector< vector<int> * > constraintGroups;$/;"	m	class:groupBasedConditions	file:	access:private
constraintID	.\Conditions.h	/^    int constraintID;$/;"	m	struct:conditionStruct	access:public
constraintID	.\Conditions.h~	/^    int constraintID;$/;"	m	struct:conditionStruct	file:	access:public
constraints	.\Conditions.h	/^        vector<condCons_t *> constraints;$/;"	m	class:Conditions	access:protected
constraints	.\Conditions.h~	/^        vector<condCons_t *> constraints;$/;"	m	class:Conditions	file:	access:protected
createObject	.\CylinderFactory.cpp	/^TestObject* CylinderFactory::createObject(condCons_t& constraint, vector<texture_t *>& textures)$/;"	f	class:CylinderFactory	signature:(condCons_t& constraint, vector<texture_t *>& textures)
createObject	.\CylinderFactory.cpp~	/^TestObject* CylinderFactory::createObject(condCons_t& constraint, vector<texture_t *>& textures)$/;"	f	class:CylinderFactory	signature:(condCons_t& constraint, vector<texture_t *>& textures)
createObject	.\CylinderFactory.h	/^        virtual TestObject* createObject(condCons_t& constraint, vector<texture_t *>& textures);$/;"	p	class:CylinderFactory	access:public	signature:(condCons_t& constraint, vector<texture_t *>& textures)
createObject	.\CylinderFactory.h~	/^        virtual TestObject* createObject(condCons_t& constraint, vector<texture_t *>& textureIDs);$/;"	p	class:CylinderFactory	file:	access:public	signature:(condCons_t& constraint, vector<texture_t *>& textureIDs)
createObject	.\TestObjectFactory.h	/^        virtual TestObject* createObject(condCons_t& constraint, vector<texture_t *>& textures) = 0;$/;"	p	class:TestObjectFactory	access:public	signature:(condCons_t& constraint, vector<texture_t *>& textures)
createObject	.\TestObjectFactory.h~	/^        virtual TestObject* createObject(condCons_t& constraint, vector<texture_t *>& textureIDs) = 0;$/;"	p	class:TestObjectFactory	file:	access:public	signature:(condCons_t& constraint, vector<texture_t *>& textureIDs)
currRotDeg	.\TestObject.h	/^        GLfloat currRotDeg;$/;"	m	class:TestObject	access:public
currRotDeg	.\TestObject.h~	/^        GLfloat currRotDeg;$/;"	m	class:TestObject	file:	access:public
currScene	.\Scene.cpp	/^Scene *Scene::currScene;$/;"	m	class:Scene	file:
currScene	.\Scene.cpp~	/^Scene *Scene::currScene;$/;"	m	class:Scene	file:
currScene	.\Scene.h	/^        static Scene *currScene;$/;"	m	class:Scene	access:protected
currScene	.\Scene.h~	/^        static Scene *currScene;$/;"	m	class:Scene	file:	access:protected
currSecNo	.\experiment.h	/^        unsigned int currSecNo;$/;"	m	class:Experiment	access:public
currSecNo	.\experiment.h~	/^        unsigned int currSecNo;$/;"	m	class:Experiment	file:	access:public
currState	.\Trial.h	/^        enum state currState;$/;"	m	class:Trial	typeref:enum:Trial::state	access:private
currState	.\Trial.h~	/^        enum state currState;$/;"	m	class:Trial	typeref:enum:Trial::state	file:	access:private
currStatus	.\Separate2D3DViewScene.h	/^        sepSceneStatus_t currStatus;$/;"	m	class:Separate2D3DViewScene	access:private
currStatus	.\Separate2D3DViewScene.h~	/^        sepSceneStatus_t currStatus;$/;"	m	class:Separate2D3DViewScene	file:	access:private
currTrialID	.\experiment.h	/^        unsigned int currTrialID;$/;"	m	class:Experiment	access:public
currTrialID	.\experiment.h~	/^        unsigned int currTrialID;$/;"	m	class:Experiment	file:	access:public
cylinderParameterReadingFunction	.\Conditions.cpp	/^BOOL Conditions::cylinderParameterReadingFunction(ifstream& fin, condCons_t& constraint, int constraintID)$/;"	f	class:Conditions	signature:(ifstream& fin, condCons_t& constraint, int constraintID)
cylinderParameterReadingFunction	.\Conditions.cpp~	/^BOOL Conditions::cylinderParameterReadingFunction(ifstream& fin, condCons_t& constraint, int constraintID)$/;"	f	class:Conditions	signature:(ifstream& fin, condCons_t& constraint, int constraintID)
cylinderParameterReadingFunction	.\Conditions.h	/^        BOOL cylinderParameterReadingFunction(ifstream& fin, condCons_t& constraint, int constraintID);$/;"	p	class:Conditions	access:protected	signature:(ifstream& fin, condCons_t& constraint, int constraintID)
cylinderParameterReadingFunction	.\Conditions.h~	/^        BOOL cylinderParameterReadingFunction(ifstream& fin, condCons_t& constraint, int constraintID);$/;"	p	class:Conditions	file:	access:protected	signature:(ifstream& fin, condCons_t& constraint, int constraintID)
d	.\Release\Screen.obj	/^/;"	v
debug	.\experiment.cpp	/^int const Experiment::debug = 0;$/;"	m	class:Experiment	file:
debug	.\experiment.cpp~	/^int const Experiment::debug = 0;$/;"	m	class:Experiment	file:
debug	.\experiment.h	/^        static const int debug;$/;"	m	class:Experiment	access:public
debug	.\experiment.h~	/^        static const int debug;$/;"	m	class:Experiment	file:	access:public
devMode	.\ConfWnd.h	/^        DEVMODE devMode;$/;"	m	class:ConfWnd	access:public
devMode	.\ConfWnd.h~	/^        DEVMODE devMode;$/;"	m	class:ConfWnd	file:	access:public
devMode	.\experiment.h	/^        DEVMODE devMode; \/\/ display settings$/;"	m	class:Experiment	access:public
devMode	.\experiment.h~	/^        DEVMODE devMode; \/\/ display settings$/;"	m	class:Experiment	file:	access:public
dispMode	.\ConditionConstraints.h	/^    displayMode_t dispMode;$/;"	m	struct:conditionConstraints	access:public
dispMode	.\ConditionConstraints.h~	/^    displayMode_t dispMode;$/;"	m	struct:conditionConstraints	file:	access:public
dispMode	.\Conditions.h	/^    displayMode_t dispMode;$/;"	m	struct:conditionStruct	access:public
dispMode	.\Conditions.h~	/^    displayMode_t dispMode;$/;"	m	struct:conditionStruct	file:	access:public
dispatchKeyboardEvent	.\Scene.cpp~	/^void Scene::dispatchKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:Scene	signature:(unsigned char key, int x, int y)
dispatchKeyboardEvent	.\Scene.h	/^        static void dispatchKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:Scene	access:public	signature:(unsigned char key, int x, int y)
dispatchKeyboardEvent	.\Scene.h~	/^        static void dispatchKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:Scene	file:	access:public	signature:(unsigned char key, int x, int y)
dispatchKeyboardSpecialEvent	.\Scene.cpp~	/^void Scene::dispatchKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:Scene	signature:(int key, int x, int y)
dispatchKeyboardSpecialEvent	.\Scene.h	/^        static void dispatchKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:Scene	access:public	signature:(int key, int x, int y)
dispatchKeyboardSpecialEvent	.\Scene.h~	/^        static void dispatchKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:Scene	file:	access:public	signature:(int key, int x, int y)
dispatchMouseEvent	.\Scene.cpp~	/^void Scene::dispatchMouseEvent(int button, int state, int x, int y)$/;"	f	class:Scene	signature:(int button, int state, int x, int y)
dispatchMouseEvent	.\Scene.h	/^        static void dispatchMouseEvent(int button, int state, int x, int y);$/;"	p	class:Scene	access:public	signature:(int button, int state, int x, int y)
dispatchMouseEvent	.\Scene.h~	/^        static void dispatchMouseEvent(int button, int state, int x, int y);$/;"	p	class:Scene	file:	access:public	signature:(int button, int state, int x, int y)
dispatchMouseMotionEvent	.\Scene.cpp~	/^void Scene::dispatchMouseMotionEvent(int x, int y)$/;"	f	class:Scene	signature:(int x, int y)
dispatchMouseMotionEvent	.\Scene.h	/^        static void dispatchMouseMotionEvent(int x, int y);$/;"	p	class:Scene	access:public	signature:(int x, int y)
dispatchMouseMotionEvent	.\Scene.h~	/^        static void dispatchMouseMotionEvent(int x, int y);$/;"	p	class:Scene	file:	access:public	signature:(int x, int y)
dispatchMousePassiveMotionEvent	.\Scene.cpp~	/^void Scene::dispatchMousePassiveMotionEvent(int x, int y)$/;"	f	class:Scene	signature:(int x, int y)
dispatchMousePassiveMotionEvent	.\Scene.h	/^        static void dispatchMousePassiveMotionEvent(int x, int y);$/;"	p	class:Scene	access:public	signature:(int x, int y)
dispatchMousePassiveMotionEvent	.\Scene.h~	/^        static void dispatchMousePassiveMotionEvent(int x, int y);$/;"	p	class:Scene	file:	access:public	signature:(int x, int y)
dispatchReshape	.\Scene.cpp	/^void Scene::dispatchReshape(int w, int h)$/;"	f	class:Scene	signature:(int w, int h)
dispatchReshape	.\Scene.cpp~	/^void Scene::dispatchReshape(int w, int h)$/;"	f	class:Scene	signature:(int w, int h)
dispatchReshape	.\Scene.h	/^        static void dispatchReshape(int w, int h);$/;"	p	class:Scene	access:public	signature:(int w, int h)
dispatchReshape	.\Scene.h~	/^        static void dispatchReshape(int w, int h);$/;"	p	class:Scene	file:	access:public	signature:(int w, int h)
dispatchSceneRender	.\Scene.cpp~	/^void Scene::dispatchSceneRender()$/;"	f	class:Scene	signature:()
dispatchSceneRender	.\Scene.h	/^        static void dispatchSceneRender();$/;"	p	class:Scene	access:public	signature:()
dispatchSceneRender	.\Scene.h~	/^        static void dispatchSceneRender();$/;"	p	class:Scene	file:	access:public	signature:()
dispatchTimerEvent	.\Scene.cpp	/^void Scene::dispatchTimerEvent(int timerID)$/;"	f	class:Scene	signature:(int timerID)
dispatchTimerEvent	.\Scene.cpp~	/^void Scene::dispatchTimerEvent(int timerID)$/;"	f	class:Scene	signature:(int timerID)
dispatchTimerEvent	.\Scene.h	/^        static void dispatchTimerEvent(int timerID);$/;"	p	class:Scene	access:public	signature:(int timerID)
dispatchTimerEvent	.\Scene.h~	/^        static void dispatchTimerEvent(int timerID);$/;"	p	class:Scene	file:	access:public	signature:(int timerID)
displayConfWnd	.\ConfWnd.cpp	/^INT_PTR ConfWnd::displayConfWnd(HINSTANCE ghInstance)$/;"	f	class:ConfWnd	signature:(HINSTANCE ghInstance)
displayConfWnd	.\ConfWnd.cpp~	/^INT_PTR ConfWnd::displayConfWnd(HINSTANCE ghInstance)$/;"	f	class:ConfWnd	signature:(HINSTANCE ghInstance)
displayConfWnd	.\ConfWnd.h	/^        INT_PTR displayConfWnd(HINSTANCE ghInstance);$/;"	p	class:ConfWnd	access:public	signature:(HINSTANCE ghInstance)
displayConfWnd	.\ConfWnd.h~	/^        INT_PTR displayConfWnd(HINSTANCE ghInstance);$/;"	p	class:ConfWnd	file:	access:public	signature:(HINSTANCE ghInstance)
displayMode	.\Screen.h	/^        UINT displayMode;$/;"	m	class:Screen	access:private
displayMode	.\Screen.h~	/^        UINT displayMode;$/;"	m	class:Screen	file:	access:private
displayMode_t	.\ConditionConstraints.h	/^typedef enum DisplayMode displayMode_t;$/;"	t	typeref:enum:DisplayMode
displayMode_t	.\ConditionConstraints.h~	/^typedef enum DisplayMode displayMode_t;$/;"	t	typeref:enum:DisplayMode	file:
displayMode_t	.\tags	/^displayMode_t	.\\ConditionConstraints.h	\/^typedef enum DisplayMode displayMode_t;$\/;"	t	typeref:enum:DisplayMode$/;"	t	typeref:enum:DisplayMode	file:
displayMode_t	.\tags	/^displayMode_t	.\\ConditionConstraints.h~	\/^typedef enum DisplayMode displayMode_t;$\/;"	t	typeref:enum:DisplayMode	file:$/;"	t	typeref:enum:DisplayMode	file:
displayString	.\Screen.cpp	/^BOOL Screen::displayString(string str, float x, float y)$/;"	f	class:Screen	signature:(string str, float x, float y)
displayString	.\Screen.cpp~	/^BOOL Screen::displayString(string str, float x, float y)$/;"	f	class:Screen	signature:(string str, float x, float y)
displayString	.\Screen.h	/^        BOOL displayString(string str, float x, float y);$/;"	p	class:Screen	access:public	signature:(string str, float x, float y)
displayString	.\Screen.h~	/^        BOOL displayString(string str, float x, float y);$/;"	p	class:Screen	file:	access:public	signature:(string str, float x, float y)
disposeSystem	.\experiment.cpp	/^BOOL Experiment::disposeSystem()$/;"	f	class:Experiment	signature:()
disposeSystem	.\experiment.cpp~	/^BOOL Experiment::disposeSystem()$/;"	f	class:Experiment	signature:()
disposeSystem	.\experiment.h	/^        BOOL disposeSystem();$/;"	p	class:Experiment	access:private	signature:()
disposeSystem	.\experiment.h~	/^        BOOL disposeSystem();$/;"	p	class:Experiment	file:	access:private	signature:()
draw	.\CylinderObject.cpp	/^void CylinderObject::draw(int drawStyle,$/;"	f	class:CylinderObject	signature:(int drawStyle, BOOL enableTexture, BOOL enablePYRRotation, BOOL enableMotion, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
draw	.\CylinderObject.cpp~	/^void CylinderObject::draw(int drawStyle,$/;"	f	class:CylinderObject	signature:(int drawStyle, BOOL enableTexture, BOOL enablePYRRotation, BOOL enableMotion, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
draw	.\CylinderObject.h	/^        virtual void draw(int drawStyle,$/;"	p	class:CylinderObject	access:public	signature:(int drawStyle, BOOL enableTexture, BOOL enablePYRRotation, BOOL enableMotion, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
draw	.\CylinderObject.h~	/^        virtual void draw(int drawStyle,$/;"	p	class:CylinderObject	file:	access:public	signature:(int drawStyle, BOOL enableTexture, BOOL enablePYRRotation, BOOL enableMotion, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffSet)
draw	.\TestObject.h	/^        virtual void draw(int drawStyle,$/;"	p	class:TestObject	access:public	signature:(int drawStyle, BOOL enableTexture, BOOL enablePYRRotation, BOOL enableMotion, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
draw	.\TestObject.h~	/^        virtual void draw(int drawStyle,$/;"	p	class:TestObject	file:	access:public	signature:(int drawStyle, BOOL enableTexture, BOOL enablePYRRotation, BOOL enableMotion, GLfloat zStretch, GLfloat zOffset)
draw2D	.\CylinderObject.cpp	/^void CylinderObject::draw2D(int drawStyle,$/;"	f	class:CylinderObject	signature:(int drawStyle, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
draw2D	.\CylinderObject.cpp~	/^void CylinderObject::draw2D(int drawStyle,$/;"	f	class:CylinderObject	signature:(int drawStyle, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
draw2D	.\CylinderObject.h	/^        virtual void draw2D(int drawStyle,$/;"	p	class:CylinderObject	access:public	signature:(int drawStyle, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
draw2D	.\CylinderObject.h~	/^        virtual void draw2D(int drawStyle,$/;"	p	class:CylinderObject	file:	access:public	signature:(int drawStyle, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
draw2D	.\TestObject.h	/^        virtual void draw2D(int drawStyle,$/;"	p	class:TestObject	access:public	signature:(int drawStyle, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
draw2D	.\TestObject.h~	/^        virtual void draw2D(int drawStyle,$/;"	p	class:TestObject	file:	access:public	signature:(int drawStyle, GLfloat xStretch, GLfloat yStretch, GLfloat zStretch, GLfloat xOffset, GLfloat yOffset, GLfloat zOffset)
enumExperiMode	.\experiment.h	/^enum enumExperiMode {EXPERIMENT = 0, PRACTICE = 1};$/;"	g
enumExperiMode	.\experiment.h~	/^enum enumExperiMode {EXPERIMENT = 0, PRACTICE = 1};$/;"	g	file:
enumProj2DMode	.\TestObject.h	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	g	class:TestObject	access:public
enumProj2DMode	.\TestObject.h~	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	g	class:TestObject	file:	access:public
enumRotDirection	.\TestObject.h	/^        enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	g	class:TestObject	access:public
enumRotDirection	.\TestObject.h~	/^        enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	g	class:TestObject	file:	access:public
error	.\Debug\BuildLog.htm	/^/;"	p	file:	signature:(s)
error	.\Release\BuildLog.htm	/^/;"	p	file:	signature:(s)
experiMode	.\ConfWnd.h	/^        enumExperiMode experiMode; \/\/ 0 -- experiment mode; 1 -- practice mode;$/;"	m	class:ConfWnd	access:public
experiMode	.\ConfWnd.h~	/^        enumExperiMode experiMode; \/\/ 0 -- experiment mode; 1 -- practice mode;$/;"	m	class:ConfWnd	file:	access:public
experiMode	.\experiment.h	/^        enumExperiMode experiMode; \/\/ 0 -- experiment mode; 1 -- practice mode;$/;"	m	class:Experiment	access:public
experiMode	.\experiment.h~	/^        enumExperiMode experiMode; \/\/ 0 -- experiment mode; 1 -- practice mode;$/;"	m	class:Experiment	file:	access:public
experiment	.\Debug\BuildLog.htm	/^/;"	v
experiment	.\Release\BuildLog.htm	/^/;"	v
experimentConditions	.\experiment.h	/^        Conditions *experimentConditions; $/;"	m	class:Experiment	access:public
experimentConditions	.\experiment.h~	/^        Conditions *experimentConditions; $/;"	m	class:Experiment	file:	access:public
finished	.\Trial.h	/^        BOOL finished;$/;"	m	class:Trial	access:private
finished	.\Trial.h~	/^        BOOL finished;$/;"	m	class:Trial	file:	access:private
floorl	.\Release\CylinderObject.obj	/^/;"	v
floorl	.\Release\groupBasedConditions.obj	/^/;"	v
format	.\tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
fps	.\Scene.h	/^        float fps;$/;"	m	class:Scene	access:public
fps	.\Scene.h~	/^        float fps;$/;"	m	class:Scene	file:	access:public
fps	.\Screen.h	/^        float fps;$/;"	m	class:Screen	access:private
fps	.\Screen.h~	/^        float fps;$/;"	m	class:Screen	file:	access:private
fps	.\Trial.h	/^        float fps;$/;"	m	class:Trial	access:private
frame_set	.\StereoViewingFrameV2.h	/^	bool frame_set; \/\/ flag for checking if calibrated$/;"	m	class:StereoViewingFrame	access:public
frame_set	.\StereoViewingFrameV2.h~	/^	bool frame_set; \/\/ flag for checking if calibrated$/;"	m	class:StereoViewingFrame	file:	access:public
genDesc	.\ConditionConstraints.h	/^    string genDesc()$/;"	f	struct:conditionConstraints	access:public	signature:()
genDesc	.\ConditionConstraints.h~	/^    string genDesc()$/;"	f	struct:conditionConstraints	access:public	signature:()
genDescTitle	.\ConditionConstraints.h	/^    string genDescTitle()$/;"	f	struct:conditionConstraints	access:public	signature:()
genDescTitle	.\ConditionConstraints.h~	/^    string genDescTitle()$/;"	f	struct:conditionConstraints	access:public	signature:()
genObjDesc	.\CylinderObject.cpp	/^string CylinderObject::genObjDesc()$/;"	f	class:CylinderObject	signature:()
genObjDesc	.\CylinderObject.cpp~	/^string CylinderObject::genObjDesc()$/;"	f	class:CylinderObject	signature:()
genObjDesc	.\CylinderObject.h	/^        virtual string genObjDesc(void); \/\/ get the object descriptions (fixed part)$/;"	p	class:CylinderObject	access:public	signature:(void)
genObjDesc	.\CylinderObject.h~	/^        virtual string genObjDesc(void); \/\/ get the object descriptions (fixed part)$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
genObjDesc	.\TestObject.cpp	/^string TestObject::genObjDesc()$/;"	f	class:TestObject	signature:()
genObjDesc	.\TestObject.cpp~	/^string TestObject::genObjDesc()$/;"	f	class:TestObject	signature:()
genObjDesc	.\TestObject.h	/^        virtual string genObjDesc(); \/\/ get the object descriptions (fixed part)$/;"	p	class:TestObject	access:public	signature:()
genObjDesc	.\TestObject.h~	/^        virtual string genObjDesc(); \/\/ get the object descriptions (fixed part)$/;"	p	class:TestObject	file:	access:public	signature:()
genObjDescTitle	.\CylinderObject.cpp	/^string CylinderObject::genObjDescTitle()$/;"	f	class:CylinderObject	signature:()
genObjDescTitle	.\CylinderObject.cpp~	/^string CylinderObject::genObjDescTitle()$/;"	f	class:CylinderObject	signature:()
genObjDescTitle	.\CylinderObject.h	/^        virtual string genObjDescTitle(void); \/\/ get the object descriptions (fixed part)$/;"	p	class:CylinderObject	access:public	signature:(void)
genObjDescTitle	.\CylinderObject.h~	/^        virtual string genObjDescTitle(void); \/\/ get the object descriptions (fixed part)$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
genObjDescTitle	.\TestObject.cpp	/^string TestObject::genObjDescTitle()$/;"	f	class:TestObject	signature:()
genObjDescTitle	.\TestObject.cpp~	/^string TestObject::genObjDescTitle()$/;"	f	class:TestObject	signature:()
genObjDescTitle	.\TestObject.h	/^        virtual string genObjDescTitle(); \/\/ get the object descriptions (fixed part)$/;"	p	class:TestObject	access:public	signature:()
genObjDescTitle	.\TestObject.h~	/^        virtual string genObjDescTitle(); \/\/ get the object descriptions (fixed part)$/;"	p	class:TestObject	file:	access:public	signature:()
genObjPara	.\CylinderObject.cpp	/^string CylinderObject::genObjPara()$/;"	f	class:CylinderObject	signature:()
genObjPara	.\CylinderObject.cpp~	/^string CylinderObject::genObjPara()$/;"	f	class:CylinderObject	signature:()
genObjPara	.\CylinderObject.h	/^        virtual string genObjPara(void); \/\/ get the object parameters (varied part)$/;"	p	class:CylinderObject	access:public	signature:(void)
genObjPara	.\CylinderObject.h~	/^        virtual string genObjPara(void); \/\/ get the object parameters (varied part)$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
genObjPara	.\TestObject.cpp	/^string TestObject::genObjPara()$/;"	f	class:TestObject	signature:()
genObjPara	.\TestObject.cpp~	/^string TestObject::genObjPara()$/;"	f	class:TestObject	signature:()
genObjPara	.\TestObject.h	/^        virtual string genObjPara(); \/\/ get the object parameters (varied part)$/;"	p	class:TestObject	access:public	signature:()
genObjPara	.\TestObject.h~	/^        virtual string genObjPara(); \/\/ get the object parameters (varied part)$/;"	p	class:TestObject	file:	access:public	signature:()
genObjParaTitle	.\CylinderObject.cpp	/^string CylinderObject::genObjParaTitle()$/;"	f	class:CylinderObject	signature:()
genObjParaTitle	.\CylinderObject.cpp~	/^string CylinderObject::genObjParaTitle()$/;"	f	class:CylinderObject	signature:()
genObjParaTitle	.\CylinderObject.h	/^        virtual string genObjParaTitle(void); \/\/ get the object parameters (varied part)$/;"	p	class:CylinderObject	access:public	signature:(void)
genObjParaTitle	.\CylinderObject.h~	/^        virtual string genObjParaTitle(void); \/\/ get the object parameters (varied part)$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
genObjParaTitle	.\TestObject.cpp	/^string TestObject::genObjParaTitle()$/;"	f	class:TestObject	signature:()
genObjParaTitle	.\TestObject.cpp~	/^string TestObject::genObjParaTitle()$/;"	f	class:TestObject	signature:()
genObjParaTitle	.\TestObject.h	/^        virtual string genObjParaTitle(); \/\/ get the object parameters (varied part)$/;"	p	class:TestObject	access:public	signature:()
genObjParaTitle	.\TestObject.h~	/^        virtual string genObjParaTitle(); \/\/ get the object parameters (varied part)$/;"	p	class:TestObject	file:	access:public	signature:()
generateConditions	.\Conditions.cpp	/^BOOL Conditions::generateConditions()$/;"	f	class:Conditions	signature:()
generateConditions	.\Conditions.cpp~	/^BOOL Conditions::generateConditions()$/;"	f	class:Conditions	signature:()
generateConditions	.\Conditions.h	/^        virtual BOOL generateConditions();$/;"	p	class:Conditions	access:public	signature:()
generateConditions	.\Conditions.h~	/^        virtual BOOL generateConditions();$/;"	p	class:Conditions	file:	access:public	signature:()
generateConditions	.\groupBasedConditions.cpp	/^BOOL groupBasedConditions::generateConditions()$/;"	f	class:groupBasedConditions	signature:()
generateConditions	.\groupBasedConditions.cpp~	/^BOOL groupBasedConditions::generateConditions()$/;"	f	class:groupBasedConditions	signature:()
generateConditions	.\groupBasedConditions.h	/^        virtual BOOL generateConditions();$/;"	p	class:groupBasedConditions	access:public	signature:()
generateConditions	.\groupBasedConditions.h~	/^        virtual BOOL generateConditions();$/;"	p	class:groupBasedConditions	file:	access:public	signature:()
getAllConditions	.\Conditions.cpp	/^const vector<cond_t *>& Conditions::getAllConditions()$/;"	f	class:Conditions	signature:()
getAllConditions	.\Conditions.cpp~	/^const vector<cond_t *>& Conditions::getAllConditions()$/;"	f	class:Conditions	signature:()
getAllConditions	.\Conditions.h	/^        virtual const vector<cond_t *>& getAllConditions();$/;"	p	class:Conditions	access:public	signature:()
getAllConditions	.\Conditions.h~	/^        virtual const vector<cond_t *>& getAllConditions();$/;"	p	class:Conditions	file:	access:public	signature:()
getAllConditions	.\groupBasedConditions.cpp	/^const vector<cond_t *>& groupBasedConditions::getAllConditions()$/;"	f	class:groupBasedConditions	signature:()
getAllConditions	.\groupBasedConditions.cpp~	/^const vector<cond_t *>& groupBasedConditions::getAllConditions()$/;"	f	class:groupBasedConditions	signature:()
getAllConditions	.\groupBasedConditions.h	/^        virtual const vector<cond_t *>& getAllConditions();$/;"	p	class:groupBasedConditions	access:public	signature:()
getAllConditions	.\groupBasedConditions.h~	/^        virtual const vector<cond_t *>& getAllConditions();$/;"	p	class:groupBasedConditions	file:	access:public	signature:()
getAllConstraints	.\Conditions.cpp	/^const vector<condCons_t *>& Conditions::getAllConstraints()$/;"	f	class:Conditions	signature:()
getAllConstraints	.\Conditions.cpp~	/^const vector<condCons_t *>& Conditions::getAllConstraints()$/;"	f	class:Conditions	signature:()
getAllConstraints	.\Conditions.h	/^        const vector<condCons_t *>& getAllConstraints();$/;"	p	class:Conditions	access:public	signature:()
getAllConstraints	.\Conditions.h~	/^        const vector<condCons_t *>& getAllConstraints();$/;"	p	class:Conditions	file:	access:public	signature:()
getFPS	.\Screen.cpp	/^float Screen::getFPS()$/;"	f	class:Screen	signature:()
getFPS	.\Screen.cpp~	/^float Screen::getFPS()$/;"	f	class:Screen	signature:()
getFPS	.\Screen.h	/^        float getFPS();$/;"	p	class:Screen	access:public	signature:()
getFPS	.\Screen.h~	/^        float getFPS();$/;"	p	class:Screen	file:	access:public	signature:()
getInstance	.\ConfWnd.cpp	/^ConfWnd* ConfWnd::getInstance()$/;"	f	class:ConfWnd	signature:()
getInstance	.\ConfWnd.cpp~	/^ConfWnd* ConfWnd::getInstance()$/;"	f	class:ConfWnd	signature:()
getInstance	.\ConfWnd.h	/^        static ConfWnd *getInstance();$/;"	p	class:ConfWnd	access:public	signature:()
getInstance	.\ConfWnd.h~	/^        static ConfWnd *getInstance();$/;"	p	class:ConfWnd	file:	access:public	signature:()
getInstance	.\experiment.cpp	/^Experiment *Experiment::getInstance(HINSTANCE hInstance)$/;"	f	class:Experiment	signature:(HINSTANCE hInstance)
getInstance	.\experiment.cpp~	/^Experiment *Experiment::getInstance(HINSTANCE hInstance)$/;"	f	class:Experiment	signature:(HINSTANCE hInstance)
getInstance	.\experiment.h	/^        static Experiment *getInstance(HINSTANCE hInstance);$/;"	p	class:Experiment	access:public	signature:(HINSTANCE hInstance)
getInstance	.\experiment.h~	/^        static Experiment *getInstance(HINSTANCE hInstance);$/;"	p	class:Experiment	file:	access:public	signature:(HINSTANCE hInstance)
getObjID	.\CylinderObject.cpp	/^UINT CylinderObject::getObjID()$/;"	f	class:CylinderObject	signature:()
getObjID	.\CylinderObject.cpp~	/^UINT CylinderObject::getObjID()$/;"	f	class:CylinderObject	signature:()
getObjID	.\CylinderObject.h	/^        virtual UINT getObjID(void);$/;"	p	class:CylinderObject	access:public	signature:(void)
getObjID	.\CylinderObject.h~	/^        virtual UINT getObjID(void);$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
getObjID	.\TestObject.h	/^        virtual UINT getObjID(void) = 0;$/;"	p	class:TestObject	access:public	signature:(void)
getObjID	.\TestObject.h~	/^        virtual UINT getObjID(void) = 0;$/;"	p	class:TestObject	file:	access:public	signature:(void)
getObjName	.\CylinderObject.cpp	/^string CylinderObject::getObjName(void)$/;"	f	class:CylinderObject	signature:(void)
getObjName	.\CylinderObject.cpp~	/^string CylinderObject::getObjName(void)$/;"	f	class:CylinderObject	signature:(void)
getObjName	.\CylinderObject.h	/^        virtual string getObjName(void);$/;"	p	class:CylinderObject	access:public	signature:(void)
getObjName	.\CylinderObject.h~	/^        virtual string getObjName(void);$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
getObjName	.\TestObject.h	/^        virtual string getObjName(void) = 0;$/;"	p	class:TestObject	access:public	signature:(void)
getObjName	.\TestObject.h~	/^        virtual string getObjName(void) = 0;$/;"	p	class:TestObject	file:	access:public	signature:(void)
getProductName	.\CylinderFactory.cpp	/^const string CylinderFactory::getProductName()$/;"	f	class:CylinderFactory	signature:()
getProductName	.\CylinderFactory.cpp~	/^const string CylinderFactory::getProductName()$/;"	f	class:CylinderFactory	signature:()
getProductName	.\CylinderFactory.h	/^        virtual const string getProductName();$/;"	p	class:CylinderFactory	access:public	signature:()
getProductName	.\CylinderFactory.h~	/^        virtual const string getProductName();$/;"	p	class:CylinderFactory	file:	access:public	signature:()
getProductName	.\TestObjectFactory.h	/^        virtual const string getProductName() = 0;$/;"	p	class:TestObjectFactory	access:public	signature:()
getProductName	.\TestObjectFactory.h~	/^        virtual const string getProductName() = 0;$/;"	p	class:TestObjectFactory	file:	access:public	signature:()
getRandObj	.\MixedObjectViewScene.cpp~	/^TestObject *getRandObj()$/;"	f	signature:()
getRandObj	.\MixedObjectViewScene.h~	/^        TestObject *getRandObj(void);$/;"	p	class:MixedObjectViewScene	file:	access:protected	signature:(void)
getRandomValue	.\rangeType.cpp~	/^T rangeType<T>::getRandomValue()$/;"	f	class:rangeType	signature:()
getRandomValue	.\rangeType.h	/^        T getRandomValue();$/;"	p	class:rangeType	access:public	signature:()
getRandomValue	.\rangeType.h	/^T rangeType<T>::getRandomValue()$/;"	f	class:rangeType	signature:()
getRandomValue	.\rangeType.h~	/^        T getRandomValue();$/;"	p	class:rangeType	file:	access:public	signature:()
getRandomValue	.\rangeType.h~	/^T rangeType<T>::getRandomValue()$/;"	f	class:rangeType	signature:()
groupBasedConditions	.\groupBasedConditions.cpp	/^groupBasedConditions::groupBasedConditions(ifstream& rFin, int numConditions,$/;"	f	class:groupBasedConditions	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions	.\groupBasedConditions.cpp	/^groupBasedConditions::groupBasedConditions(ifstream& rFin,$/;"	f	class:groupBasedConditions	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions	.\groupBasedConditions.cpp~	/^groupBasedConditions::groupBasedConditions(ifstream& rFin, int numConditions,$/;"	f	class:groupBasedConditions	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions	.\groupBasedConditions.cpp~	/^groupBasedConditions::groupBasedConditions(ifstream& rFin,$/;"	f	class:groupBasedConditions	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions	.\groupBasedConditions.h	/^        explicit groupBasedConditions(ifstream& rFin, int numConditions,$/;"	p	class:groupBasedConditions	access:public	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions	.\groupBasedConditions.h	/^        explicit groupBasedConditions(ifstream& rFin,$/;"	p	class:groupBasedConditions	access:public	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions	.\groupBasedConditions.h	/^class groupBasedConditions :$/;"	c	inherits:Conditions
groupBasedConditions	.\groupBasedConditions.h~	/^        explicit groupBasedConditions(ifstream& rFin, int numConditions,$/;"	p	class:groupBasedConditions	file:	access:public	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions	.\groupBasedConditions.h~	/^        explicit groupBasedConditions(ifstream& rFin,$/;"	p	class:groupBasedConditions	file:	access:public	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions	.\groupBasedConditions.h~	/^class groupBasedConditions :$/;"	c	file:	inherits:Conditions
groupBasedConditions::clearConditions	.\groupBasedConditions.cpp	/^BOOL groupBasedConditions::clearConditions()$/;"	f	class:groupBasedConditions	signature:()
groupBasedConditions::clearConditions	.\groupBasedConditions.cpp~	/^BOOL groupBasedConditions::clearConditions()$/;"	f	class:groupBasedConditions	signature:()
groupBasedConditions::clearConditions	.\groupBasedConditions.h	/^        virtual BOOL clearConditions();$/;"	p	class:groupBasedConditions	access:public	signature:()
groupBasedConditions::clearConditions	.\groupBasedConditions.h~	/^        virtual BOOL clearConditions();$/;"	p	class:groupBasedConditions	file:	access:public	signature:()
groupBasedConditions::conditionGroups	.\groupBasedConditions.h	/^        vector< vector<int> * > conditionGroups;$/;"	m	class:groupBasedConditions	access:private
groupBasedConditions::conditionGroups	.\groupBasedConditions.h~	/^        vector< vector<int> * > conditionGroups;$/;"	m	class:groupBasedConditions	file:	access:private
groupBasedConditions::constraintGroups	.\groupBasedConditions.h	/^        vector< vector<int> * > constraintGroups;$/;"	m	class:groupBasedConditions	access:private
groupBasedConditions::constraintGroups	.\groupBasedConditions.h~	/^        vector< vector<int> * > constraintGroups;$/;"	m	class:groupBasedConditions	file:	access:private
groupBasedConditions::generateConditions	.\groupBasedConditions.cpp	/^BOOL groupBasedConditions::generateConditions()$/;"	f	class:groupBasedConditions	signature:()
groupBasedConditions::generateConditions	.\groupBasedConditions.cpp~	/^BOOL groupBasedConditions::generateConditions()$/;"	f	class:groupBasedConditions	signature:()
groupBasedConditions::generateConditions	.\groupBasedConditions.h	/^        virtual BOOL generateConditions();$/;"	p	class:groupBasedConditions	access:public	signature:()
groupBasedConditions::generateConditions	.\groupBasedConditions.h~	/^        virtual BOOL generateConditions();$/;"	p	class:groupBasedConditions	file:	access:public	signature:()
groupBasedConditions::getAllConditions	.\groupBasedConditions.cpp	/^const vector<cond_t *>& groupBasedConditions::getAllConditions()$/;"	f	class:groupBasedConditions	signature:()
groupBasedConditions::getAllConditions	.\groupBasedConditions.cpp~	/^const vector<cond_t *>& groupBasedConditions::getAllConditions()$/;"	f	class:groupBasedConditions	signature:()
groupBasedConditions::getAllConditions	.\groupBasedConditions.h	/^        virtual const vector<cond_t *>& getAllConditions();$/;"	p	class:groupBasedConditions	access:public	signature:()
groupBasedConditions::getAllConditions	.\groupBasedConditions.h~	/^        virtual const vector<cond_t *>& getAllConditions();$/;"	p	class:groupBasedConditions	file:	access:public	signature:()
groupBasedConditions::groupBasedConditions	.\groupBasedConditions.cpp	/^groupBasedConditions::groupBasedConditions(ifstream& rFin, int numConditions,$/;"	f	class:groupBasedConditions	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions::groupBasedConditions	.\groupBasedConditions.cpp	/^groupBasedConditions::groupBasedConditions(ifstream& rFin,$/;"	f	class:groupBasedConditions	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions::groupBasedConditions	.\groupBasedConditions.cpp~	/^groupBasedConditions::groupBasedConditions(ifstream& rFin, int numConditions,$/;"	f	class:groupBasedConditions	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions::groupBasedConditions	.\groupBasedConditions.cpp~	/^groupBasedConditions::groupBasedConditions(ifstream& rFin,$/;"	f	class:groupBasedConditions	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions::groupBasedConditions	.\groupBasedConditions.h	/^        explicit groupBasedConditions(ifstream& rFin, int numConditions,$/;"	p	class:groupBasedConditions	access:public	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions::groupBasedConditions	.\groupBasedConditions.h	/^        explicit groupBasedConditions(ifstream& rFin,$/;"	p	class:groupBasedConditions	access:public	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions::groupBasedConditions	.\groupBasedConditions.h~	/^        explicit groupBasedConditions(ifstream& rFin, int numConditions,$/;"	p	class:groupBasedConditions	file:	access:public	signature:(ifstream& rFin, int numConditions, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions::groupBasedConditions	.\groupBasedConditions.h~	/^        explicit groupBasedConditions(ifstream& rFin,$/;"	p	class:groupBasedConditions	file:	access:public	signature:(ifstream& rFin, vector<TestObjectFactory *>& rObjectFactories, Screen& rScr)
groupBasedConditions::initConditions	.\groupBasedConditions.cpp	/^BOOL groupBasedConditions::initConditions()$/;"	f	class:groupBasedConditions	signature:()
groupBasedConditions::initConditions	.\groupBasedConditions.cpp~	/^BOOL groupBasedConditions::initConditions()$/;"	f	class:groupBasedConditions	signature:()
groupBasedConditions::initConditions	.\groupBasedConditions.h	/^        virtual BOOL initConditions();$/;"	p	class:groupBasedConditions	access:public	signature:()
groupBasedConditions::initConditions	.\groupBasedConditions.h~	/^        virtual BOOL initConditions();$/;"	p	class:groupBasedConditions	file:	access:public	signature:()
groupBasedConditions::numGroups	.\groupBasedConditions.h	/^        int numGroups;$/;"	m	class:groupBasedConditions	access:private
groupBasedConditions::numGroups	.\groupBasedConditions.h~	/^        int numGroups;$/;"	m	class:groupBasedConditions	file:	access:private
groupBasedConditions::operator []	.\groupBasedConditions.cpp	/^cond_t& groupBasedConditions::operator[](int &rhs)$/;"	f	class:groupBasedConditions	signature:(int &rhs)
groupBasedConditions::operator []	.\groupBasedConditions.cpp~	/^cond_t& groupBasedConditions::operator[](int &rhs)$/;"	f	class:groupBasedConditions	signature:(int &rhs)
groupBasedConditions::operator []	.\groupBasedConditions.h	/^        virtual cond_t& operator[](int &rhs);$/;"	p	class:groupBasedConditions	access:public	signature:(int &rhs)
groupBasedConditions::operator []	.\groupBasedConditions.h~	/^        virtual cond_t& operator[](int &rhs);$/;"	p	class:groupBasedConditions	file:	access:public	signature:(int &rhs)
groupBasedConditions::shuffleConditions	.\groupBasedConditions.cpp	/^void groupBasedConditions::shuffleConditions(int times)$/;"	f	class:groupBasedConditions	signature:(int times)
groupBasedConditions::shuffleConditions	.\groupBasedConditions.cpp~	/^void groupBasedConditions::shuffleConditions(int times)$/;"	f	class:groupBasedConditions	signature:(int times)
groupBasedConditions::shuffleConditions	.\groupBasedConditions.h	/^        virtual void shuffleConditions(int times);$/;"	p	class:groupBasedConditions	access:public	signature:(int times)
groupBasedConditions::shuffleConditions	.\groupBasedConditions.h~	/^        virtual void shuffleConditions();$/;"	p	class:groupBasedConditions	file:	access:public	signature:()
groupBasedConditions::shuffledConditions	.\groupBasedConditions.h	/^        vector<cond_t *> shuffledConditions;$/;"	m	class:groupBasedConditions	access:private
groupBasedConditions::shuffledConditions	.\groupBasedConditions.h~	/^        vector<cond_t *> shuffledConditions;$/;"	m	class:groupBasedConditions	file:	access:private
groupBasedConditions::updateShuffledConditions	.\groupBasedConditions.cpp	/^void groupBasedConditions::updateShuffledConditions()$/;"	f	class:groupBasedConditions	signature:()
groupBasedConditions::updateShuffledConditions	.\groupBasedConditions.cpp~	/^void groupBasedConditions::updateShuffledConditions()$/;"	f	class:groupBasedConditions	signature:()
groupBasedConditions::updateShuffledConditions	.\groupBasedConditions.h	/^        void updateShuffledConditions();$/;"	p	class:groupBasedConditions	access:private	signature:()
groupBasedConditions::updateShuffledConditions	.\groupBasedConditions.h~	/^        void updateShuffledConditions();$/;"	p	class:groupBasedConditions	file:	access:private	signature:()
groupBasedConditions::~groupBasedConditions	.\groupBasedConditions.cpp	/^groupBasedConditions::~groupBasedConditions(void)$/;"	f	class:groupBasedConditions	signature:(void)
groupBasedConditions::~groupBasedConditions	.\groupBasedConditions.cpp~	/^groupBasedConditions::~groupBasedConditions(void)$/;"	f	class:groupBasedConditions	signature:(void)
groupBasedConditions::~groupBasedConditions	.\groupBasedConditions.h	/^        virtual ~groupBasedConditions(void);$/;"	p	class:groupBasedConditions	access:public	signature:(void)
groupBasedConditions::~groupBasedConditions	.\groupBasedConditions.h~	/^        virtual ~groupBasedConditions(void);$/;"	p	class:groupBasedConditions	file:	access:public	signature:(void)
groupID	.\ConditionConstraints.h	/^    int groupID;$/;"	m	struct:conditionConstraints	access:public
groupID	.\ConditionConstraints.h~	/^    int groupID;$/;"	m	struct:conditionConstraints	file:	access:public
hBitmap	.\texture.h	/^        HBITMAP hBitmap;$/;"	m	union:raw_textureStruct::__anon4	access:public
hBitmap	.\texture.h~	/^        HBITMAP hBitmap;$/;"	m	union:raw_textureStruct::__anon6	file:	access:public
hFileOut	.\experiment.h	/^        fstream hFileOut;$/;"	m	class:Experiment	access:private
hFileOut	.\experiment.h~	/^        fstream hFileOut;$/;"	m	class:Experiment	file:	access:private
hInst	.\experiment.cpp	/^HINSTANCE Experiment::hInst = NULL;$/;"	m	class:Experiment	file:
hInst	.\experiment.cpp~	/^HINSTANCE Experiment::hInst = NULL;$/;"	m	class:Experiment	file:
hInst	.\experiment.h	/^        static HINSTANCE hInst;$/;"	m	class:Experiment	access:private
hInst	.\experiment.h~	/^        static HINSTANCE hInst;$/;"	m	class:Experiment	file:	access:private
handleKeyboardEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\Overlapped2DViewScene.h	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\Overlapped2DViewScene.h~	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:PostExperimentScene	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:PostExperimentScene	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\PostExperimentScene.h	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:PostExperimentScene	access:private	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\PostExperimentScene.h~	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:PreTrialScene	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:PreTrialScene	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\PreTrialScene.h	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:PreTrialScene	access:private	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\PreTrialScene.h~	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:PreTrialScene	file:	access:private	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\Scene.h	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y) = 0;$/;"	p	class:Scene	access:protected	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\Scene.h~	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\Separate2D3DViewScene.h	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(unsigned char key, int x, int y)
handleKeyboardEvent	.\Separate2D3DViewScene.h~	/^        virtual BOOL handleKeyboardEvent(unsigned char key, int x, int y);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(unsigned char key, int x, int y)
handleKeyboardSpecialEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\Overlapped2DViewScene.h	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\Overlapped2DViewScene.h~	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:PostExperimentScene	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:PostExperimentScene	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\PostExperimentScene.h	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:PostExperimentScene	access:private	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\PostExperimentScene.h~	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:PreTrialScene	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:PreTrialScene	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\PreTrialScene.h	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:PreTrialScene	access:private	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\PreTrialScene.h~	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:PreTrialScene	file:	access:private	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\Scene.h	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y) = 0;$/;"	p	class:Scene	access:protected	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\Scene.h~	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\Separate2D3DViewScene.h	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(int key, int x, int y)
handleKeyboardSpecialEvent	.\Separate2D3DViewScene.h~	/^        virtual BOOL handleKeyboardSpecialEvent(int key, int x, int y);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(int key, int x, int y)
handleMouseEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int button, int state, int x, int y)
handleMouseEvent	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int button, int state, int x, int y)
handleMouseEvent	.\Overlapped2DViewScene.h	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(int button, int state, int x, int y)
handleMouseEvent	.\Overlapped2DViewScene.h~	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(int button, int state, int x, int y)
handleMouseEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:PostExperimentScene	signature:(int button, int state, int x, int y)
handleMouseEvent	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:PostExperimentScene	signature:(int button, int state, int x, int y)
handleMouseEvent	.\PostExperimentScene.h	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:PostExperimentScene	access:private	signature:(int button, int state, int x, int y)
handleMouseEvent	.\PostExperimentScene.h~	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(int button, int state, int x, int y)
handleMouseEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:PreTrialScene	signature:(int button, int state, int x, int y)
handleMouseEvent	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:PreTrialScene	signature:(int button, int state, int x, int y)
handleMouseEvent	.\PreTrialScene.h	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:PreTrialScene	access:private	signature:(int button, int state, int x, int y)
handleMouseEvent	.\PreTrialScene.h~	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:PreTrialScene	file:	access:private	signature:(int button, int state, int x, int y)
handleMouseEvent	.\Scene.h	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y) = 0;$/;"	p	class:Scene	access:protected	signature:(int button, int state, int x, int y)
handleMouseEvent	.\Scene.h~	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(int button, int state, int x, int y)
handleMouseEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int button, int state, int x, int y)
handleMouseEvent	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int button, int state, int x, int y)
handleMouseEvent	.\Separate2D3DViewScene.h	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(int button, int state, int x, int y)
handleMouseEvent	.\Separate2D3DViewScene.h~	/^        virtual BOOL handleMouseEvent(int button, int state, int x, int y);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(int button, int state, int x, int y)
handleMouseMotionEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int x, int y)
handleMouseMotionEvent	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int x, int y)
handleMouseMotionEvent	.\Overlapped2DViewScene.h	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(int x, int y)
handleMouseMotionEvent	.\Overlapped2DViewScene.h~	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(int x, int y)
handleMouseMotionEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:PostExperimentScene	signature:(int x, int y)
handleMouseMotionEvent	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:PostExperimentScene	signature:(int x, int y)
handleMouseMotionEvent	.\PostExperimentScene.h	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:PostExperimentScene	access:private	signature:(int x, int y)
handleMouseMotionEvent	.\PostExperimentScene.h~	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(int x, int y)
handleMouseMotionEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:PreTrialScene	signature:(int x, int y)
handleMouseMotionEvent	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:PreTrialScene	signature:(int x, int y)
handleMouseMotionEvent	.\PreTrialScene.h	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:PreTrialScene	access:private	signature:(int x, int y)
handleMouseMotionEvent	.\PreTrialScene.h~	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:PreTrialScene	file:	access:private	signature:(int x, int y)
handleMouseMotionEvent	.\Scene.h	/^        virtual BOOL handleMouseMotionEvent(int x, int y) = 0;$/;"	p	class:Scene	access:protected	signature:(int x, int y)
handleMouseMotionEvent	.\Scene.h~	/^        virtual BOOL handleMouseMotionEvent(int x, int y) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(int x, int y)
handleMouseMotionEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int x, int y)
handleMouseMotionEvent	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int x, int y)
handleMouseMotionEvent	.\Separate2D3DViewScene.h	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(int x, int y)
handleMouseMotionEvent	.\Separate2D3DViewScene.h~	/^        virtual BOOL handleMouseMotionEvent(int x, int y);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(int x, int y)
handleMousePassiveMotionEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int x, int y)
handleMousePassiveMotionEvent	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:Overlapped2DViewScene	signature:(int x, int y)
handleMousePassiveMotionEvent	.\Overlapped2DViewScene.h	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(int x, int y)
handleMousePassiveMotionEvent	.\Overlapped2DViewScene.h~	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(int x, int y)
handleMousePassiveMotionEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:PostExperimentScene	signature:(int x, int y)
handleMousePassiveMotionEvent	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:PostExperimentScene	signature:(int x, int y)
handleMousePassiveMotionEvent	.\PostExperimentScene.h	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:PostExperimentScene	access:private	signature:(int x, int y)
handleMousePassiveMotionEvent	.\PostExperimentScene.h~	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(int x, int y)
handleMousePassiveMotionEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:PreTrialScene	signature:(int x, int y)
handleMousePassiveMotionEvent	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:PreTrialScene	signature:(int x, int y)
handleMousePassiveMotionEvent	.\PreTrialScene.h	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:PreTrialScene	access:private	signature:(int x, int y)
handleMousePassiveMotionEvent	.\PreTrialScene.h~	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:PreTrialScene	file:	access:private	signature:(int x, int y)
handleMousePassiveMotionEvent	.\Scene.h	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y) = 0;$/;"	p	class:Scene	access:protected	signature:(int x, int y)
handleMousePassiveMotionEvent	.\Scene.h~	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(int x, int y)
handleMousePassiveMotionEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int x, int y)
handleMousePassiveMotionEvent	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:Separate2D3DViewScene	signature:(int x, int y)
handleMousePassiveMotionEvent	.\Separate2D3DViewScene.h	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(int x, int y)
handleMousePassiveMotionEvent	.\Separate2D3DViewScene.h~	/^        virtual BOOL handleMousePassiveMotionEvent(int x, int y);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(int x, int y)
handleTimerEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleTimerEvent(int timerID)$/;"	f	class:Overlapped2DViewScene	signature:(int timerID)
handleTimerEvent	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::handleTimerEvent(int timerID)$/;"	f	class:Overlapped2DViewScene	signature:(int timerID)
handleTimerEvent	.\Overlapped2DViewScene.h	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(int timerID)
handleTimerEvent	.\Overlapped2DViewScene.h~	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(int timerID)
handleTimerEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleTimerEvent(int timerID)$/;"	f	class:PostExperimentScene	signature:(int timerID)
handleTimerEvent	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::handleTimerEvent(int timerID)$/;"	f	class:PostExperimentScene	signature:(int timerID)
handleTimerEvent	.\PostExperimentScene.h	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:PostExperimentScene	access:private	signature:(int timerID)
handleTimerEvent	.\PostExperimentScene.h~	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(int timerID)
handleTimerEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleTimerEvent(int timerID)$/;"	f	class:PreTrialScene	signature:(int timerID)
handleTimerEvent	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::handleTimerEvent(int timerID)$/;"	f	class:PreTrialScene	signature:(int timerID)
handleTimerEvent	.\PreTrialScene.h	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:PreTrialScene	access:private	signature:(int timerID)
handleTimerEvent	.\PreTrialScene.h~	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:PreTrialScene	file:	access:private	signature:(int timerID)
handleTimerEvent	.\Scene.h	/^        virtual BOOL handleTimerEvent(int timerID) = 0;$/;"	p	class:Scene	access:protected	signature:(int timerID)
handleTimerEvent	.\Scene.h~	/^        virtual BOOL handleTimerEvent(int timerID) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(int timerID)
handleTimerEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleTimerEvent(int timerID)$/;"	f	class:Separate2D3DViewScene	signature:(int timerID)
handleTimerEvent	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::handleTimerEvent(int timerID)$/;"	f	class:Separate2D3DViewScene	signature:(int timerID)
handleTimerEvent	.\Separate2D3DViewScene.h	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(int timerID)
handleTimerEvent	.\Separate2D3DViewScene.h~	/^        virtual BOOL handleTimerEvent(int timerID);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(int timerID)
height	.\TestObject.h	/^        GLfloat height;$/;"	m	class:TestObject	access:public
height	.\TestObject.h~	/^        GLfloat height;$/;"	m	class:TestObject	file:	access:public
heightRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> heightRange;$/;"	m	struct:conditionConstraints	access:public
heightRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> heightRange;$/;"	m	struct:conditionConstraints	file:	access:public
heightRange	.\TestObject.h	/^        rangeType<GLfloat> heightRange;$/;"	m	class:TestObject	access:public
heightRange	.\TestObject.h~	/^        rangeType<GLfloat> heightRange;$/;"	m	class:TestObject	file:	access:public
iFrames	.\Screen.h	/^        int iFrames;$/;"	m	class:Screen	access:private
iFrames	.\Screen.h~	/^        int iFrames;$/;"	m	class:Screen	file:	access:private
id	.\ConditionConstraints.h	/^    int id;$/;"	m	struct:conditionConstraints	access:public
id	.\ConditionConstraints.h~	/^    int id;$/;"	m	struct:conditionConstraints	file:	access:public
initConditions	.\Conditions.cpp	/^BOOL Conditions::initConditions()$/;"	f	class:Conditions	signature:()
initConditions	.\Conditions.cpp~	/^BOOL Conditions::initConditions()$/;"	f	class:Conditions	signature:()
initConditions	.\Conditions.h	/^        virtual BOOL initConditions();$/;"	p	class:Conditions	access:public	signature:()
initConditions	.\Conditions.h~	/^        virtual BOOL initConditions();$/;"	p	class:Conditions	file:	access:public	signature:()
initConditions	.\groupBasedConditions.cpp	/^BOOL groupBasedConditions::initConditions()$/;"	f	class:groupBasedConditions	signature:()
initConditions	.\groupBasedConditions.cpp~	/^BOOL groupBasedConditions::initConditions()$/;"	f	class:groupBasedConditions	signature:()
initConditions	.\groupBasedConditions.h	/^        virtual BOOL initConditions();$/;"	p	class:groupBasedConditions	access:public	signature:()
initConditions	.\groupBasedConditions.h~	/^        virtual BOOL initConditions();$/;"	p	class:groupBasedConditions	file:	access:public	signature:()
initDisplay	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::initDisplay()$/;"	f	class:Overlapped2DViewScene	signature:()
initDisplay	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::initDisplay()$/;"	f	class:Overlapped2DViewScene	signature:()
initDisplay	.\Overlapped2DViewScene.h	/^        virtual BOOL initDisplay();$/;"	p	class:Overlapped2DViewScene	access:private	signature:()
initDisplay	.\Overlapped2DViewScene.h~	/^        virtual BOOL initDisplay();$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:()
initDisplay	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::initDisplay()$/;"	f	class:PostExperimentScene	signature:()
initDisplay	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::initDisplay()$/;"	f	class:PostExperimentScene	signature:()
initDisplay	.\PostExperimentScene.h	/^        virtual BOOL initDisplay();$/;"	p	class:PostExperimentScene	access:private	signature:()
initDisplay	.\PostExperimentScene.h~	/^        virtual BOOL initDisplay();$/;"	p	class:PostExperimentScene	file:	access:private	signature:()
initDisplay	.\PreTrialScene.cpp	/^BOOL PreTrialScene::initDisplay()$/;"	f	class:PreTrialScene	signature:()
initDisplay	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::initDisplay()$/;"	f	class:PreTrialScene	signature:()
initDisplay	.\PreTrialScene.h	/^        virtual BOOL initDisplay();$/;"	p	class:PreTrialScene	access:private	signature:()
initDisplay	.\PreTrialScene.h~	/^        virtual BOOL initDisplay(Screen& scr);$/;"	p	class:PreTrialScene	file:	access:private	signature:(Screen& scr)
initDisplay	.\Scene.h	/^        virtual BOOL initDisplay() = 0;$/;"	p	class:Scene	access:protected	signature:()
initDisplay	.\Scene.h~	/^        virtual BOOL initDisplay() = 0;$/;"	p	class:Scene	file:	access:protected	signature:()
initDisplay	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::initDisplay()$/;"	f	class:Separate2D3DViewScene	signature:()
initDisplay	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::initDisplay()$/;"	f	class:Separate2D3DViewScene	signature:()
initDisplay	.\Separate2D3DViewScene.h	/^        virtual BOOL initDisplay();$/;"	p	class:Separate2D3DViewScene	access:private	signature:()
initDisplay	.\Separate2D3DViewScene.h~	/^        virtual BOOL initDisplay();$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:()
initGlut	.\Screen.cpp	/^BOOL Screen::initGlut(UINT displayMode, string title)$/;"	f	class:Screen	signature:(UINT displayMode, string title)
initGlut	.\Screen.cpp~	/^BOOL Screen::initGlut(UINT displayMode, string title)$/;"	f	class:Screen	signature:(UINT displayMode, string title)
initGlut	.\Screen.h	/^        BOOL initGlut(UINT displayMode, string title);$/;"	p	class:Screen	access:public	signature:(UINT displayMode, string title)
initGlut	.\Screen.h~	/^        BOOL initGlut(UINT displayMode, string title);$/;"	p	class:Screen	file:	access:public	signature:(UINT displayMode, string title)
initOutputFile	.\experiment.cpp	/^BOOL Experiment::initOutputFile()$/;"	f	class:Experiment	signature:()
initOutputFile	.\experiment.cpp~	/^BOOL Experiment::initOutputFile()$/;"	f	class:Experiment	signature:()
initOutputFile	.\experiment.h	/^        BOOL initOutputFile();$/;"	p	class:Experiment	access:private	signature:()
initOutputFile	.\experiment.h~	/^        BOOL initOutputFile();$/;"	p	class:Experiment	file:	access:private	signature:()
initSystem	.\experiment.cpp	/^BOOL Experiment::initSystem()$/;"	f	class:Experiment	signature:()
initSystem	.\experiment.cpp~	/^BOOL Experiment::initSystem()$/;"	f	class:Experiment	signature:()
initSystem	.\experiment.h	/^        BOOL initSystem();$/;"	p	class:Experiment	access:private	signature:()
initSystem	.\experiment.h~	/^        BOOL initSystem();$/;"	p	class:Experiment	file:	access:private	signature:()
initTextures	.\Screen.cpp	/^BOOL Screen::initTextures(vector<rTexture_t *>& textures)$/;"	f	class:Screen	signature:(vector<rTexture_t *>& textures)
initTextures	.\Screen.cpp~	/^BOOL Screen::initTextures(vector<rTexture_t *>& textures)$/;"	f	class:Screen	signature:(vector<rTexture_t *>& textures)
initTextures	.\Screen.h	/^        BOOL initTextures(vector<rTexture_t *>& textures);$/;"	p	class:Screen	access:public	signature:(vector<rTexture_t *>& textures)
initTextures	.\Screen.h~	/^        BOOL initTextures(vector<rTexture_t *>& textures);$/;"	p	class:Screen	file:	access:public	signature:(vector<rTexture_t *>& textures)
initZAsptRatio	.\TestObject.h	/^        GLfloat initZAsptRatio;$/;"	m	class:TestObject	access:public
initZAsptRatio	.\TestObject.h~	/^        GLfloat initZAsptRatio;$/;"	m	class:TestObject	file:	access:public
initZAsptRatioRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> initZAsptRatioRange;$/;"	m	struct:conditionConstraints	access:public
initZAsptRatioRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> initZAsptRatioRange;$/;"	m	struct:conditionConstraints	file:	access:public
initZAsptRatioRange	.\TestObject.h	/^        rangeType<GLfloat> initZAsptRatioRange;$/;"	m	class:TestObject	access:public
initZAsptRatioRange	.\TestObject.h~	/^        rangeType<GLfloat> initZAsptRatioRange;$/;"	m	class:TestObject	file:	access:public
isNewSection	.\experiment.cpp	/^BOOL Experiment::isNewSection()$/;"	f	class:Experiment	signature:()
isNewSection	.\experiment.cpp~	/^BOOL Experiment::isNewSection()$/;"	f	class:Experiment	signature:()
isNewSection	.\experiment.h	/^        BOOL isNewSection(); $/;"	p	class:Experiment	access:public	signature:()
isNewSection	.\experiment.h~	/^        BOOL isNewSection(); $/;"	p	class:Experiment	file:	access:public	signature:()
isRegisteredTimer	.\Scene.cpp	/^BOOL Scene::isRegisteredTimer(int timerID)$/;"	f	class:Scene	signature:(int timerID)
isRegisteredTimer	.\Scene.cpp~	/^BOOL Scene::isRegisteredTimer(int timerID)$/;"	f	class:Scene	signature:(int timerID)
isRegisteredTimer	.\Scene.h	/^        static BOOL isRegisteredTimer(int timerID);$/;"	p	class:Scene	access:protected	signature:(int timerID)
isRegisteredTimer	.\Scene.h~	/^        static BOOL isRegisteredTimer(int timerID);$/;"	p	class:Scene	file:	access:protected	signature:(int timerID)
j	.\Debug\CylinderFactory.obj	/^/;"	v
k	.\Release\TestObject.obj	/^/;"	v
l	.\Debug\StereoViewingFrameV2.obj	/^/;"	v
lefteye	.\StereoViewingFrameV2.h	/^	vector_3d lefteye;$/;"	m	class:StereoViewingFrame	access:public
lefteye	.\StereoViewingFrameV2.h~	/^	vector_3d lefteye;$/;"	m	class:StereoViewingFrame	file:	access:public
leftprojmatrix	.\StereoViewingFrameV2.h	/^	matrix_4x4 leftprojmatrix;$/;"	m	class:StereoViewingFrame	access:public
leftprojmatrix	.\StereoViewingFrameV2.h~	/^	matrix_4x4 leftprojmatrix;$/;"	m	class:StereoViewingFrame	file:	access:public
leftscreenrot	.\StereoViewingFrameV2.h	/^	double leftscreenrot;$/;"	m	class:StereoViewingFrame	access:public
leftscreenrot	.\StereoViewingFrameV2.h~	/^	double leftscreenrot;$/;"	m	class:StereoViewingFrame	file:	access:public
leftscreenshift	.\StereoViewingFrameV2.h	/^	vector_3d leftscreenshift;$/;"	m	class:StereoViewingFrame	access:public
leftscreenshift	.\StereoViewingFrameV2.h~	/^	vector_3d leftscreenshift;$/;"	m	class:StereoViewingFrame	file:	access:public
m	.\Debug\StereoViewingFrameV2.obj	/^/;"	v
m_pInstance	.\ConfWnd.cpp	/^auto_ptr<ConfWnd> ConfWnd::m_pInstance;$/;"	m	class:ConfWnd	file:
m_pInstance	.\ConfWnd.cpp~	/^auto_ptr<ConfWnd> ConfWnd::m_pInstance;$/;"	m	class:ConfWnd	file:
m_pInstance	.\ConfWnd.h	/^        static auto_ptr<ConfWnd> m_pInstance;$/;"	m	class:ConfWnd	access:private
m_pInstance	.\ConfWnd.h~	/^        static auto_ptr<ConfWnd> m_pInstance;$/;"	m	class:ConfWnd	file:	access:private
m_pInstance	.\experiment.cpp	/^auto_ptr<Experiment> Experiment::m_pInstance;$/;"	m	class:Experiment	file:
m_pInstance	.\experiment.cpp~	/^auto_ptr<Experiment> Experiment::m_pInstance;$/;"	m	class:Experiment	file:
m_pInstance	.\experiment.h	/^        static auto_ptr<Experiment> m_pInstance;$/;"	m	class:Experiment	access:private
m_pInstance	.\experiment.h~	/^        static auto_ptr<Experiment> m_pInstance;$/;"	m	class:Experiment	file:	access:private
m_secNo	.\ConfWnd.h	/^        string m_secNo;$/;"	m	class:ConfWnd	access:private
m_secNo	.\ConfWnd.h~	/^        string m_secNo;$/;"	m	class:ConfWnd	file:	access:private
matrix_4x4	.\StereoViewingFrameV2.h	/^typedef cml::matrix<double, cml::fixed<4,4>, cml::col_basis> matrix_4x4;$/;"	t
matrix_4x4	.\StereoViewingFrameV2.h~	/^typedef cml::matrix<double, cml::fixed<4,4>, cml::col_basis> matrix_4x4;$/;"	t	file:
maxRotDeg	.\TestObject.h	/^        GLfloat maxRotDeg;$/;"	m	class:TestObject	access:public
maxRotDeg	.\TestObject.h~	/^        GLfloat maxRotDeg;$/;"	m	class:TestObject	file:	access:public
maxRotDegRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> maxRotDegRange;$/;"	m	struct:conditionConstraints	access:public
maxRotDegRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> maxRotDegRange;$/;"	m	struct:conditionConstraints	file:	access:public
maxRotDegRange	.\TestObject.h	/^        rangeType<GLfloat> maxRotDegRange;$/;"	m	class:TestObject	access:public
maxRotDegRange	.\TestObject.h~	/^        rangeType<GLfloat> maxRotDegRange;$/;"	m	class:TestObject	file:	access:public
maxSecNo	.\ConfWnd.h	/^        unsigned int maxSecNo;$/;"	m	class:ConfWnd	access:public
maxSecNo	.\ConfWnd.h~	/^        unsigned int maxSecNo;$/;"	m	class:ConfWnd	file:	access:public
maxSecNo	.\experiment.h	/^        unsigned int maxSecNo;$/;"	m	class:Experiment	access:public
maxSecNo	.\experiment.h~	/^        unsigned int maxSecNo;$/;"	m	class:Experiment	file:	access:public
modfl	.\Release\ConfWnd.obj	/^/;"	v
modfl	.\Release\groupBasedConditions.obj	/^/;"	v
name	.\texture.h	/^    string name;$/;"	m	struct:raw_textureStruct	access:public
name	.\texture.h	/^    string name;$/;"	m	struct:textureStruct	access:public
nbsp	.\Debug\BuildLog.htm	/^/;"	v
nbsp	.\Release\BuildLog.htm	/^/;"	v
newObj	.\CylinderObject.cpp	/^TestObject *CylinderObject::newObj(TestObject &rObject)$/;"	f	class:CylinderObject	signature:(TestObject &rObject)
newObj	.\CylinderObject.cpp~	/^TestObject *CylinderObject::newObj(TestObject &rObject)$/;"	f	class:CylinderObject	signature:(TestObject &rObject)
newObj	.\CylinderObject.h	/^        virtual TestObject * newObj(TestObject &rObject);$/;"	p	class:CylinderObject	access:public	signature:(TestObject &rObject)
newObj	.\CylinderObject.h~	/^        virtual TestObject * newObj(TestObject &rObject);$/;"	p	class:CylinderObject	file:	access:public	signature:(TestObject &rObject)
newObj	.\TestObject.h	/^        virtual TestObject * newObj(TestObject& rObject) = 0;$/;"	p	class:TestObject	access:public	signature:(TestObject& rObject)
newObj	.\TestObject.h~	/^        virtual TestObject * newObj(TestObject& rObject) = 0;$/;"	p	class:TestObject	file:	access:public	signature:(TestObject& rObject)
nullTimerFunc	.\Screen.cpp	/^void Screen::nullTimerFunc(int timerID)$/;"	f	class:Screen	signature:(int timerID)
nullTimerFunc	.\Screen.cpp~	/^void Screen::nullTimerFunc(int timerID)$/;"	f	class:Screen	signature:(int timerID)
nullTimerFunc	.\Screen.h	/^        static void nullTimerFunc(int timerID);$/;"	p	class:Screen	access:public	signature:(int timerID)
nullTimerFunc	.\Screen.h~	/^        static void nullTimerFunc(int timerID);$/;"	p	class:Screen	file:	access:public	signature:(int timerID)
numConditions	.\Conditions.h	/^        int numConditions;$/;"	m	class:Conditions	access:protected
numConditions	.\Conditions.h~	/^        int numConditions;$/;"	m	class:Conditions	file:	access:protected
numGroups	.\groupBasedConditions.h	/^        int numGroups;$/;"	m	class:groupBasedConditions	access:private
numGroups	.\groupBasedConditions.h~	/^        int numGroups;$/;"	m	class:groupBasedConditions	file:	access:private
numSections	.\Conditions.h	/^        int numSections;$/;"	m	class:Conditions	access:public
numSections	.\Conditions.h~	/^        int numSections;$/;"	m	class:Conditions	file:	access:public
objName	.\CylinderObject.h	/^        string objName;$/;"	m	class:CylinderObject	access:private
objName	.\CylinderObject.h~	/^        string objName;$/;"	m	class:CylinderObject	file:	access:private
objName	.\TestObject.h	/^        string objName;$/;"	m	class:TestObject	access:protected
objName	.\TestObject.h~	/^        string objName;$/;"	m	class:TestObject	file:	access:protected
objectFactories	.\Conditions.h	/^        vector<TestObjectFactory *>& objectFactories;$/;"	m	class:Conditions	access:protected
objectFactories	.\Conditions.h~	/^        vector<TestObjectFactory *>& objectFactories;$/;"	m	class:Conditions	file:	access:protected
objectFactories	.\experiment.h	/^        vector<TestObjectFactory *> objectFactories;$/;"	m	class:Experiment	access:private
objectFactories	.\experiment.h~	/^        vector<TestObjectFactory *> objectFactories;$/;"	m	class:Experiment	file:	access:private
objectFactoryNameMap	.\Conditions.h	/^        hash_map<string, TestObjectFactory *> objectFactoryNameMap;$/;"	m	class:Conditions	access:protected
objectFactoryNameMap	.\Conditions.h~	/^        hash_map<string, TestObjectFactory *> objectFactoryNameMap;$/;"	m	class:Conditions	file:	access:protected
objectID	.\CylinderObject.cpp	/^const UINT CylinderObject::objectID = 1;$/;"	m	class:CylinderObject	file:
objectID	.\CylinderObject.cpp~	/^const UINT CylinderObject::objectID = 1;$/;"	m	class:CylinderObject	file:
objectID	.\CylinderObject.h	/^        static const UINT objectID;$/;"	m	class:CylinderObject	access:public
objectID	.\CylinderObject.h~	/^        static const UINT objectID;$/;"	m	class:CylinderObject	file:	access:public
objectID	.\TestObject.cpp	/^const UINT TestObject::objectID = 0;$/;"	m	class:TestObject	file:
objectID	.\TestObject.cpp~	/^const UINT TestObject::objectID = 0;$/;"	m	class:TestObject	file:
objectID	.\TestObject.h	/^        static const UINT objectID;$/;"	m	class:TestObject	access:public
objectID	.\TestObject.h~	/^        static const UINT objectID;$/;"	m	class:TestObject	file:	access:public
objectNames	.\ConditionConstraints.h	/^    vector<string> objectNames;$/;"	m	struct:conditionConstraints	access:public
objectNames	.\ConditionConstraints.h~	/^    vector<string> objectNames;$/;"	m	struct:conditionConstraints	file:	access:public
onSampleFPS	.\Screen.h	/^        BOOL onSampleFPS;$/;"	m	class:Screen	access:private
onSampleFPS	.\Screen.h~	/^        BOOL onSampleFPS;$/;"	m	class:Screen	file:	access:private
operator <<	.\rangeType.cpp~	/^ostream& operator<<(ostream& os, rangeType<T>& rt)$/;"	f	signature:(ostream& os, rangeType<T>& rt)
operator <<	.\rangeType.h	/^        friend ostream& operator<<(ostream& os, rangeType<T>& rt)$/;"	f	class:rangeType	access:friend	signature:(ostream& os, rangeType<T>& rt)
operator <<	.\rangeType.h~	/^        friend ostream& operator<<(ostream& os, rangeType<T>& rt)$/;"	f	class:rangeType	access:friend	signature:(ostream& os, rangeType<T>& rt)
operator =	.\Conditions.h	/^        Conditions& operator=(Conditions& rhs); $/;"	p	class:Conditions	access:protected	signature:(Conditions& rhs)
operator =	.\Conditions.h~	/^        Conditions& operator=(Conditions& rhs); $/;"	p	class:Conditions	file:	access:protected	signature:(Conditions& rhs)
operator =	.\StereoViewingFrameV2.cpp	/^const StereoViewingFrame & StereoViewingFrame::operator=(const StereoViewingFrame & vf)$/;"	f	class:StereoViewingFrame	signature:(const StereoViewingFrame & vf)
operator =	.\StereoViewingFrameV2.cpp~	/^const StereoViewingFrame & StereoViewingFrame::operator=(const StereoViewingFrame & vf)$/;"	f	class:StereoViewingFrame	signature:(const StereoViewingFrame & vf)
operator =	.\StereoViewingFrameV2.h	/^	const StereoViewingFrame & operator=(const StereoViewingFrame & vf);	$/;"	p	class:StereoViewingFrame	access:public	signature:(const StereoViewingFrame & vf)
operator =	.\StereoViewingFrameV2.h~	/^	const StereoViewingFrame & operator=(const StereoViewingFrame & vf);	$/;"	p	class:StereoViewingFrame	file:	access:public	signature:(const StereoViewingFrame & vf)
operator []	.\Conditions.cpp	/^cond_t& Conditions::operator[](int &rhs)$/;"	f	class:Conditions	signature:(int &rhs)
operator []	.\Conditions.cpp~	/^cond_t& Conditions::operator[](int &rhs)$/;"	f	class:Conditions	signature:(int &rhs)
operator []	.\Conditions.h	/^        virtual cond_t& operator[](int &rhs);$/;"	p	class:Conditions	access:public	signature:(int &rhs)
operator []	.\Conditions.h~	/^        virtual cond_t& operator[](int &rhs);$/;"	p	class:Conditions	file:	access:public	signature:(int &rhs)
operator []	.\groupBasedConditions.cpp	/^cond_t& groupBasedConditions::operator[](int &rhs)$/;"	f	class:groupBasedConditions	signature:(int &rhs)
operator []	.\groupBasedConditions.cpp~	/^cond_t& groupBasedConditions::operator[](int &rhs)$/;"	f	class:groupBasedConditions	signature:(int &rhs)
operator []	.\groupBasedConditions.h	/^        virtual cond_t& operator[](int &rhs);$/;"	p	class:groupBasedConditions	access:public	signature:(int &rhs)
operator []	.\groupBasedConditions.h~	/^        virtual cond_t& operator[](int &rhs);$/;"	p	class:groupBasedConditions	file:	access:public	signature:(int &rhs)
outFilename	.\ConfWnd.h	/^        string outFilename;$/;"	m	class:ConfWnd	access:public
outFilename	.\ConfWnd.h~	/^        string outFilename;$/;"	m	class:ConfWnd	file:	access:public
outFilename	.\experiment.h	/^        string outFilename;$/;"	m	class:Experiment	access:public
outFilename	.\experiment.h~	/^        string outFilename;$/;"	m	class:Experiment	file:	access:public
overallFin	.\Conditions.h	/^        ifstream& overallFin;$/;"	m	class:Conditions	access:protected
overallFin	.\Conditions.h~	/^        ifstream& overallFin;$/;"	m	class:Conditions	file:	access:protected
p	.\Debug\CylinderFactory.obj	/^/;"	v
pObj	.\MixedObjectViewScene.h~	/^        TestObject *pObj;$/;"	m	class:MixedObjectViewScene	file:	access:protected
pRealObject	.\Conditions.h	/^    TestObject *pRealObject; \/\/ Store the real object's pointer here$/;"	m	struct:conditionStruct	access:public
pRealObject	.\Conditions.h~	/^    TestObject *pRealObject; \/\/ Store the real object's pointer here$/;"	m	struct:conditionStruct	file:	access:public
pScreen	.\experiment.h	/^        Screen  *pScreen;$/;"	m	class:Experiment	access:public
pScreen	.\experiment.h~	/^        Screen  *pScreen;$/;"	m	class:Experiment	file:	access:public
pitch	.\TestObject.h	/^        GLfloat pitch;$/;"	m	class:TestObject	access:public
pitch	.\TestObject.h~	/^        GLfloat pitch;$/;"	m	class:TestObject	file:	access:public
pitchRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> pitchRange;$/;"	m	struct:conditionConstraints	access:public
pitchRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> pitchRange;$/;"	m	struct:conditionConstraints	file:	access:public
pitchRange	.\TestObject.h	/^        rangeType<GLfloat> pitchRange;$/;"	m	class:TestObject	access:public
pitchRange	.\TestObject.h~	/^        rangeType<GLfloat> pitchRange;$/;"	m	class:TestObject	file:	access:public
pixelbottom	.\StereoViewingFrameV2.h	/^	unsigned int pixelbottom;$/;"	m	class:StereoViewingFrame	access:public
pixelbottom	.\StereoViewingFrameV2.h~	/^	unsigned int pixelbottom;$/;"	m	class:StereoViewingFrame	file:	access:public
pixelleft	.\StereoViewingFrameV2.h	/^	unsigned int pixelleft;$/;"	m	class:StereoViewingFrame	access:public
pixelleft	.\StereoViewingFrameV2.h~	/^	unsigned int pixelleft;$/;"	m	class:StereoViewingFrame	file:	access:public
pixelright	.\StereoViewingFrameV2.h	/^	unsigned int pixelright;$/;"	m	class:StereoViewingFrame	access:public
pixelright	.\StereoViewingFrameV2.h~	/^	unsigned int pixelright;$/;"	m	class:StereoViewingFrame	file:	access:public
pixeltop	.\StereoViewingFrameV2.h	/^	unsigned int pixeltop;$/;"	m	class:StereoViewingFrame	access:public
pixeltop	.\StereoViewingFrameV2.h~	/^	unsigned int pixeltop;$/;"	m	class:StereoViewingFrame	file:	access:public
printReadRangeError	.\Conditions.cpp	/^void Conditions::printReadRangeError(string name, int constraintID)$/;"	f	class:Conditions	signature:(string name, int constraintID)
printReadRangeError	.\Conditions.cpp~	/^void Conditions::printReadRangeError(string name, int constraintID)$/;"	f	class:Conditions	signature:(string name, int constraintID)
printReadRangeError	.\Conditions.h	/^        void printReadRangeError(string name, int constraintID);$/;"	p	class:Conditions	access:protected	signature:(string name, int constraintID)
printReadRangeError	.\Conditions.h~	/^        void printReadRangeError(string name, int constraintID);$/;"	p	class:Conditions	file:	access:protected	signature:(string name, int constraintID)
proceedExperiment	.\experiment.cpp	/^BOOL Experiment::proceedExperiment()$/;"	f	class:Experiment	signature:()
proceedExperiment	.\experiment.cpp~	/^BOOL Experiment::proceedExperiment()$/;"	f	class:Experiment	signature:()
proceedExperiment	.\experiment.h	/^        BOOL proceedExperiment();$/;"	p	class:Experiment	access:private	signature:()
proceedExperiment	.\experiment.h~	/^        BOOL proceedExperiment();$/;"	p	class:Experiment	file:	access:private	signature:()
proceedNextScene	.\Trial.cpp	/^BOOL Trial::proceedNextScene()$/;"	f	class:Trial	signature:()
proceedNextScene	.\Trial.cpp~	/^BOOL Trial::proceedNextScene()$/;"	f	class:Trial	signature:()
proceedNextScene	.\Trial.h	/^        BOOL proceedNextScene();$/;"	p	class:Trial	access:public	signature:()
proceedNextScene	.\Trial.h~	/^        BOOL proceedNextScene();$/;"	p	class:Trial	file:	access:public	signature:()
productName	.\CylinderFactory.h	/^        string productName;$/;"	m	class:CylinderFactory	access:private
productName	.\CylinderFactory.h~	/^        string productName;$/;"	m	class:CylinderFactory	file:	access:private
productName	.\TestObjectFactory.h	/^        string productName;$/;"	m	class:TestObjectFactory	access:protected
productName	.\TestObjectFactory.h~	/^        string productName;$/;"	m	class:TestObjectFactory	file:	access:protected
proj2DMode	.\TestObject.h	/^        enumProj2DMode proj2DMode;$/;"	m	class:TestObject	access:public
proj2DMode	.\TestObject.h~	/^        enumProj2DMode proj2DMode;$/;"	m	class:TestObject	file:	access:public
qL	.\Release\PreTrialScene.obj	/^/;"	v
rDevMode	.\Screen.h	/^        DEVMODE &rDevMode;$/;"	m	class:Screen	access:public
rDevMode	.\Screen.h~	/^        DEVMODE &rDevMode;$/;"	m	class:Screen	file:	access:public
rScreen	.\Conditions.h	/^        Screen& rScreen;$/;"	m	class:Conditions	access:protected
rScreen	.\Conditions.h~	/^        Screen& rScreen;$/;"	m	class:Conditions	file:	access:protected
rScreen	.\Scene.h	/^        Screen& rScreen;$/;"	m	class:Scene	access:public
rScreen	.\Scene.h~	/^        Screen& rScreen;$/;"	m	class:Scene	file:	access:public
rTexture_t	.\texture.h	/^typedef struct raw_textureStruct rTexture_t;$/;"	t	typeref:struct:raw_textureStruct
rTexture_t	.\texture.h~	/^typedef struct raw_textureStruct rTexture_t;$/;"	t	typeref:struct:raw_textureStruct	file:
radius	.\CylinderObject.h	/^        GLfloat radius;$/;"	m	class:CylinderObject	access:public
radius	.\CylinderObject.h~	/^        GLfloat radius;$/;"	m	class:CylinderObject	file:	access:public
radiusRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> radiusRange;$/;"	m	struct:conditionConstraints	access:public
radiusRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> radiusRange;$/;"	m	struct:conditionConstraints	file:	access:public
radiusRange	.\CylinderObject.h	/^        rangeType<GLfloat> radiusRange;$/;"	m	class:CylinderObject	access:public
radiusRange	.\CylinderObject.h~	/^        rangeType<GLfloat> radiusRange;$/;"	m	class:CylinderObject	file:	access:public
range	.\rangeType.h	/^        vector<T> range;$/;"	m	class:rangeType	access:public
range	.\rangeType.h~	/^        vector<T> range;$/;"	m	class:rangeType	file:	access:public
rangeType	.\rangeType.cpp~	/^rangeType<T>::rangeType(void)$/;"	f	class:rangeType	signature:(void)
rangeType	.\rangeType.h	/^        rangeType(void);$/;"	p	class:rangeType	access:public	signature:(void)
rangeType	.\rangeType.h	/^class rangeType$/;"	c
rangeType	.\rangeType.h	/^rangeType<T>::rangeType(void)$/;"	f	class:rangeType	signature:(void)
rangeType	.\rangeType.h~	/^        rangeType(void);$/;"	p	class:rangeType	file:	access:public	signature:(void)
rangeType	.\rangeType.h~	/^class rangeType$/;"	c	file:
rangeType	.\rangeType.h~	/^rangeType<T>::rangeType(void)$/;"	f	class:rangeType	signature:(void)
rangeType::getRandomValue	.\rangeType.cpp~	/^T rangeType<T>::getRandomValue()$/;"	f	class:rangeType	signature:()
rangeType::getRandomValue	.\rangeType.h	/^        T getRandomValue();$/;"	p	class:rangeType	access:public	signature:()
rangeType::getRandomValue	.\rangeType.h	/^T rangeType<T>::getRandomValue()$/;"	f	class:rangeType	signature:()
rangeType::getRandomValue	.\rangeType.h~	/^        T getRandomValue();$/;"	p	class:rangeType	file:	access:public	signature:()
rangeType::getRandomValue	.\rangeType.h~	/^T rangeType<T>::getRandomValue()$/;"	f	class:rangeType	signature:()
rangeType::operator <<	.\rangeType.h	/^        friend ostream& operator<<(ostream& os, rangeType<T>& rt)$/;"	f	class:rangeType	access:friend	signature:(ostream& os, rangeType<T>& rt)
rangeType::operator <<	.\rangeType.h~	/^        friend ostream& operator<<(ostream& os, rangeType<T>& rt)$/;"	f	class:rangeType	access:friend	signature:(ostream& os, rangeType<T>& rt)
rangeType::range	.\rangeType.h	/^        vector<T> range;$/;"	m	class:rangeType	access:public
rangeType::range	.\rangeType.h~	/^        vector<T> range;$/;"	m	class:rangeType	file:	access:public
rangeType::rangeType	.\rangeType.cpp~	/^rangeType<T>::rangeType(void)$/;"	f	class:rangeType	signature:(void)
rangeType::rangeType	.\rangeType.h	/^        rangeType(void);$/;"	p	class:rangeType	access:public	signature:(void)
rangeType::rangeType	.\rangeType.h	/^rangeType<T>::rangeType(void)$/;"	f	class:rangeType	signature:(void)
rangeType::rangeType	.\rangeType.h~	/^        rangeType(void);$/;"	p	class:rangeType	file:	access:public	signature:(void)
rangeType::rangeType	.\rangeType.h~	/^rangeType<T>::rangeType(void)$/;"	f	class:rangeType	signature:(void)
rangeType::type	.\rangeType.h	/^        char type;$/;"	m	class:rangeType	access:public
rangeType::type	.\rangeType.h~	/^        char type;$/;"	m	class:rangeType	file:	access:public
rangeType::~rangeType	.\rangeType.cpp~	/^rangeType<T>::~rangeType(void)$/;"	f	class:rangeType	signature:(void)
rangeType::~rangeType	.\rangeType.h	/^        ~rangeType(void);$/;"	p	class:rangeType	access:public	signature:(void)
rangeType::~rangeType	.\rangeType.h	/^rangeType<T>::~rangeType(void)$/;"	f	class:rangeType	signature:(void)
rangeType::~rangeType	.\rangeType.h~	/^        ~rangeType(void);$/;"	p	class:rangeType	file:	access:public	signature:(void)
rangeType::~rangeType	.\rangeType.h~	/^rangeType<T>::~rangeType(void)$/;"	f	class:rangeType	signature:(void)
raw_textureStruct	.\texture.h	/^struct raw_textureStruct$/;"	s
raw_textureStruct	.\texture.h~	/^struct raw_textureStruct$/;"	s	file:
raw_textureStruct::__anon4::color	.\texture.h	/^        UINT color[3];$/;"	m	union:raw_textureStruct::__anon4	access:public
raw_textureStruct::__anon4::hBitmap	.\texture.h	/^        HBITMAP hBitmap;$/;"	m	union:raw_textureStruct::__anon4	access:public
raw_textureStruct::__anon6::color	.\texture.h~	/^        UINT color[3];$/;"	m	union:raw_textureStruct::__anon6	file:	access:public
raw_textureStruct::__anon6::hBitmap	.\texture.h~	/^        HBITMAP hBitmap;$/;"	m	union:raw_textureStruct::__anon6	file:	access:public
raw_textureStruct::name	.\texture.h	/^    string name;$/;"	m	struct:raw_textureStruct	access:public
raw_textureStruct::type	.\texture.h	/^    char type;$/;"	m	struct:raw_textureStruct	access:public
raw_textureStruct::type	.\texture.h~	/^    char type;$/;"	m	struct:raw_textureStruct	file:	access:public
readConstraints	.\Conditions.cpp	/^BOOL Conditions::readConstraints(ifstream& fin, vector<condCons_t *>& rConstraints)$/;"	f	class:Conditions	signature:(ifstream& fin, vector<condCons_t *>& rConstraints)
readConstraints	.\Conditions.cpp~	/^BOOL Conditions::readConstraints(ifstream& fin, vector<condCons_t *>& rConstraints)$/;"	f	class:Conditions	signature:(ifstream& fin, vector<condCons_t *>& rConstraints)
readConstraints	.\Conditions.h	/^        BOOL readConstraints(ifstream& fin, vector<condCons_t *>& rConstraints);$/;"	p	class:Conditions	access:protected	signature:(ifstream& fin, vector<condCons_t *>& rConstraints)
readConstraints	.\Conditions.h~	/^        BOOL readConstraints(ifstream& fin, vector<condCons_t *>& rConstraints);$/;"	p	class:Conditions	file:	access:protected	signature:(ifstream& fin, vector<condCons_t *>& rConstraints)
readRange	.\Conditions.cpp	/^BOOL Conditions::readRange(ifstream& fin, rangeType<T>& vec)$/;"	f	class:Conditions	signature:(ifstream& fin, rangeType<T>& vec)
readRange	.\Conditions.cpp~	/^BOOL Conditions::readRange(ifstream& fin, rangeType<T>& vec)$/;"	f	class:Conditions	signature:(ifstream& fin, rangeType<T>& vec)
readRange	.\Conditions.h	/^        BOOL readRange(ifstream& fin, rangeType<T>& vec);$/;"	p	class:Conditions	access:protected	signature:(ifstream& fin, rangeType<T>& vec)
readRange	.\Conditions.h~	/^        BOOL readRange(ifstream& fin, rangeType<T>& vec);$/;"	p	class:Conditions	file:	access:protected	signature:(ifstream& fin, rangeType<T>& vec)
readTextures	.\Conditions.cpp	/^BOOL Conditions::readTextures(ifstream& fin)$/;"	f	class:Conditions	signature:(ifstream& fin)
readTextures	.\Conditions.cpp~	/^BOOL Conditions::readTextures(ifstream& fin)$/;"	f	class:Conditions	signature:(ifstream& fin)
readTextures	.\Conditions.h	/^        BOOL readTextures(ifstream& fin);$/;"	p	class:Conditions	access:protected	signature:(ifstream& fin)
readTextures	.\Conditions.h~	/^        BOOL readTextures(ifstream& fin);$/;"	p	class:Conditions	file:	access:protected	signature:(ifstream& fin)
recordConfigurations	.\experiment.cpp	/^BOOL Experiment::recordConfigurations()$/;"	f	class:Experiment	signature:()
recordConfigurations	.\experiment.cpp~	/^BOOL Experiment::recordConfigurations()$/;"	f	class:Experiment	signature:()
recordConfigurations	.\experiment.h	/^        BOOL recordConfigurations();$/;"	p	class:Experiment	access:private	signature:()
recordConfigurations	.\experiment.h~	/^        BOOL recordConfigurations();$/;"	p	class:Experiment	file:	access:private	signature:()
recordConstraints	.\experiment.cpp	/^BOOL Experiment::recordConstraints()$/;"	f	class:Experiment	signature:()
recordConstraints	.\experiment.cpp~	/^BOOL Experiment::recordConstraints()$/;"	f	class:Experiment	signature:()
recordConstraints	.\experiment.h	/^        BOOL recordConstraints();$/;"	p	class:Experiment	access:private	signature:()
recordConstraints	.\experiment.h~	/^        BOOL recordConstraints();$/;"	p	class:Experiment	file:	access:private	signature:()
recordTrialInfo	.\Trial.cpp	/^BOOL Trial::recordTrialInfo()$/;"	f	class:Trial	signature:()
recordTrialInfo	.\Trial.cpp~	/^BOOL Trial::recordTrialInfo()$/;"	f	class:Trial	signature:()
recordTrialInfo	.\Trial.h	/^        BOOL recordTrialInfo();$/;"	p	class:Trial	access:public	signature:()
recordTrialInfo	.\Trial.h~	/^        BOOL recordTrialInfo();$/;"	p	class:Trial	file:	access:public	signature:()
registerTimer	.\Scene.cpp	/^void Scene::registerTimer(int timerID)$/;"	f	class:Scene	signature:(int timerID)
registerTimer	.\Scene.cpp~	/^void Scene::registerTimer(int timerID)$/;"	f	class:Scene	signature:(int timerID)
registerTimer	.\Scene.h	/^        static void registerTimer(int timerID);$/;"	p	class:Scene	access:protected	signature:(int timerID)
registerTimer	.\Scene.h~	/^        static void registerTimer(int timerID);$/;"	p	class:Scene	file:	access:protected	signature:(int timerID)
registeredTimerID	.\Scene.cpp	/^hash_map<int, BOOL> Scene::registeredTimerID;$/;"	m	class:Scene	file:
registeredTimerID	.\Scene.cpp~	/^hash_map<int, BOOL> Scene::registeredTimerID;$/;"	m	class:Scene	file:
registeredTimerID	.\Scene.h	/^        static hash_map<int, BOOL> registeredTimerID;$/;"	m	class:Scene	access:protected
registeredTimerID	.\Scene.h~	/^        static hash_map<int, BOOL> registeredTimerID;$/;"	m	class:Scene	file:	access:protected
render	.\Screen.cpp	/^void Screen::render()$/;"	f	class:Screen	signature:()
render	.\Screen.cpp~	/^void Screen::render()$/;"	f	class:Screen	signature:()
render	.\Screen.h	/^        void render();$/;"	p	class:Screen	access:public	signature:()
render	.\Screen.h~	/^        void render();$/;"	p	class:Screen	file:	access:public	signature:()
renderScene	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::renderScene()$/;"	f	class:Overlapped2DViewScene	signature:()
renderScene	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::renderScene()$/;"	f	class:Overlapped2DViewScene	signature:()
renderScene	.\Overlapped2DViewScene.h	/^        virtual BOOL renderScene(); $/;"	p	class:Overlapped2DViewScene	access:private	signature:()
renderScene	.\Overlapped2DViewScene.h~	/^        virtual BOOL renderScene(); $/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:()
renderScene	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::renderScene()$/;"	f	class:PostExperimentScene	signature:()
renderScene	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::renderScene()$/;"	f	class:PostExperimentScene	signature:()
renderScene	.\PostExperimentScene.h	/^        virtual BOOL renderScene(); $/;"	p	class:PostExperimentScene	access:private	signature:()
renderScene	.\PostExperimentScene.h~	/^        virtual BOOL renderScene(); $/;"	p	class:PostExperimentScene	file:	access:private	signature:()
renderScene	.\PreTrialScene.cpp	/^BOOL PreTrialScene::renderScene()$/;"	f	class:PreTrialScene	signature:()
renderScene	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::renderScene()$/;"	f	class:PreTrialScene	signature:()
renderScene	.\PreTrialScene.h	/^        virtual BOOL renderScene(); $/;"	p	class:PreTrialScene	access:private	signature:()
renderScene	.\PreTrialScene.h~	/^        virtual BOOL renderScene(); $/;"	p	class:PreTrialScene	file:	access:private	signature:()
renderScene	.\Scene.h	/^        virtual BOOL renderScene() = 0;$/;"	p	class:Scene	access:protected	signature:()
renderScene	.\Scene.h~	/^        virtual BOOL renderScene() = 0;$/;"	p	class:Scene	file:	access:protected	signature:()
renderScene	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::renderScene()$/;"	f	class:Separate2D3DViewScene	signature:()
renderScene	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::renderScene()$/;"	f	class:Separate2D3DViewScene	signature:()
renderScene	.\Separate2D3DViewScene.h	/^        virtual BOOL renderScene(); $/;"	p	class:Separate2D3DViewScene	access:private	signature:()
renderScene	.\Separate2D3DViewScene.h~	/^        virtual BOOL renderScene(); $/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:()
repeatTime	.\Conditions.h	/^    int repeatTime; \/\/ the times that the condition need to be repeated in one section$/;"	m	struct:conditionStruct	access:public
repeatTime	.\Conditions.h~	/^    int repeatTime; \/\/ the times that the condition need to be repeated in one section$/;"	m	struct:conditionStruct	file:	access:public
reset	.\Conditions.cpp	/^void cond_t::reset()$/;"	f	class:cond_t	signature:()
reset	.\Conditions.cpp~	/^void cond_t::reset()$/;"	f	class:cond_t	signature:()
reset	.\Conditions.h	/^    void reset();$/;"	p	struct:conditionStruct	access:public	signature:()
reset	.\Conditions.h~	/^    void reset();$/;"	p	struct:conditionStruct	file:	access:public	signature:()
reset	.\Scene.cpp	/^void Scene::reset()$/;"	f	class:Scene	signature:()
reset	.\Scene.cpp~	/^void Scene::reset()$/;"	f	class:Scene	signature:()
reset	.\Scene.h	/^        static void reset();$/;"	p	class:Scene	access:public	signature:()
reset	.\Scene.h~	/^        static void reset();$/;"	p	class:Scene	file:	access:public	signature:()
reset	.\TestObject.cpp	/^void TestObject::reset()$/;"	f	class:TestObject	signature:()
reset	.\TestObject.cpp~	/^void TestObject::reset()$/;"	f	class:TestObject	signature:()
reset	.\TestObject.h	/^        void reset();$/;"	p	class:TestObject	access:public	signature:()
reset	.\TestObject.h~	/^        void reset();$/;"	p	class:TestObject	file:	access:public	signature:()
resetAllFunc	.\Screen.cpp	/^BOOL Screen::resetAllFunc()$/;"	f	class:Screen	signature:()
resetAllFunc	.\Screen.cpp~	/^BOOL Screen::resetAllFunc()$/;"	f	class:Screen	signature:()
resetAllFunc	.\Screen.h	/^        BOOL resetAllFunc(void);$/;"	p	class:Screen	access:public	signature:(void)
resetAllFunc	.\Screen.h~	/^        BOOL resetAllFunc(void);$/;"	p	class:Screen	file:	access:public	signature:(void)
reshape	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::reshape(int w, int h)$/;"	f	class:Overlapped2DViewScene	signature:(int w, int h)
reshape	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::reshape(int w, int h)$/;"	f	class:Overlapped2DViewScene	signature:(int w, int h)
reshape	.\Overlapped2DViewScene.h	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:Overlapped2DViewScene	access:private	signature:(int w, int h)
reshape	.\Overlapped2DViewScene.h~	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:Overlapped2DViewScene	file:	access:private	signature:(int w, int h)
reshape	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::reshape(int w, int h)$/;"	f	class:PostExperimentScene	signature:(int w, int h)
reshape	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::reshape(int w, int h)$/;"	f	class:PostExperimentScene	signature:(int w, int h)
reshape	.\PostExperimentScene.h	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:PostExperimentScene	access:private	signature:(int w, int h)
reshape	.\PostExperimentScene.h~	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:PostExperimentScene	file:	access:private	signature:(int w, int h)
reshape	.\PreTrialScene.cpp	/^BOOL PreTrialScene::reshape(int w, int h)$/;"	f	class:PreTrialScene	signature:(int w, int h)
reshape	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::reshape(int w, int h)$/;"	f	class:PreTrialScene	signature:(int w, int h)
reshape	.\PreTrialScene.h	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:PreTrialScene	access:private	signature:(int w, int h)
reshape	.\PreTrialScene.h~	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:PreTrialScene	file:	access:private	signature:(int w, int h)
reshape	.\Scene.h	/^        virtual BOOL reshape(int w, int h) = 0;$/;"	p	class:Scene	access:protected	signature:(int w, int h)
reshape	.\Scene.h~	/^        virtual BOOL reshape(int w, int h) = 0;$/;"	p	class:Scene	file:	access:protected	signature:(int w, int h)
reshape	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::reshape(int w, int h)$/;"	f	class:Separate2D3DViewScene	signature:(int w, int h)
reshape	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::reshape(int w, int h)$/;"	f	class:Separate2D3DViewScene	signature:(int w, int h)
reshape	.\Separate2D3DViewScene.h	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:Separate2D3DViewScene	access:private	signature:(int w, int h)
reshape	.\Separate2D3DViewScene.h~	/^        virtual BOOL reshape(int w, int h);$/;"	p	class:Separate2D3DViewScene	file:	access:private	signature:(int w, int h)
reverseRotDirection	.\TestObject.cpp	/^void TestObject::reverseRotDirection()$/;"	f	class:TestObject	signature:()
reverseRotDirection	.\TestObject.cpp~	/^void TestObject::reverseRotDirection()$/;"	f	class:TestObject	signature:()
reverseRotDirection	.\TestObject.h	/^        void reverseRotDirection();$/;"	p	class:TestObject	access:public	signature:()
reverseRotDirection	.\TestObject.h~	/^        void reverseRotDirection();$/;"	p	class:TestObject	file:	access:public	signature:()
righteye	.\StereoViewingFrameV2.h	/^	vector_3d righteye;$/;"	m	class:StereoViewingFrame	access:public
righteye	.\StereoViewingFrameV2.h~	/^	vector_3d righteye;$/;"	m	class:StereoViewingFrame	file:	access:public
rightprojmatrix	.\StereoViewingFrameV2.h	/^	matrix_4x4 rightprojmatrix;$/;"	m	class:StereoViewingFrame	access:public
rightprojmatrix	.\StereoViewingFrameV2.h~	/^	matrix_4x4 rightprojmatrix;$/;"	m	class:StereoViewingFrame	file:	access:public
rightscreenrot	.\StereoViewingFrameV2.h	/^	double rightscreenrot;$/;"	m	class:StereoViewingFrame	access:public
rightscreenrot	.\StereoViewingFrameV2.h~	/^	double rightscreenrot;$/;"	m	class:StereoViewingFrame	file:	access:public
rightscreenshift	.\StereoViewingFrameV2.h	/^	vector_3d rightscreenshift;$/;"	m	class:StereoViewingFrame	access:public
rightscreenshift	.\StereoViewingFrameV2.h~	/^	vector_3d rightscreenshift;$/;"	m	class:StereoViewingFrame	file:	access:public
roll	.\TestObject.h	/^        GLfloat roll;$/;"	m	class:TestObject	access:public
roll	.\TestObject.h~	/^        GLfloat roll;$/;"	m	class:TestObject	file:	access:public
rollRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> rollRange;$/;"	m	struct:conditionConstraints	access:public
rollRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> rollRange;$/;"	m	struct:conditionConstraints	file:	access:public
rollRange	.\TestObject.h	/^        rangeType<GLfloat> rollRange;$/;"	m	class:TestObject	access:public
rollRange	.\TestObject.h~	/^        rangeType<GLfloat> rollRange;$/;"	m	class:TestObject	file:	access:public
rotDirection	.\TestObject.h	/^        enumRotDirection rotDirection;$/;"	m	class:TestObject	access:public
rotDirection	.\TestObject.h~	/^        enumRotDirection rotDirection;$/;"	m	class:TestObject	file:	access:public
rotSpeed	.\TestObject.h	/^        GLfloat rotSpeed;$/;"	m	class:TestObject	access:public
rotSpeed	.\TestObject.h~	/^        GLfloat rotSpeed;$/;"	m	class:TestObject	file:	access:public
rotSpeedRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> rotSpeedRange;$/;"	m	struct:conditionConstraints	access:public
rotSpeedRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> rotSpeedRange;$/;"	m	struct:conditionConstraints	file:	access:public
rotSpeedRange	.\TestObject.h	/^        rangeType<GLfloat> rotSpeedRange;$/;"	m	class:TestObject	access:public
rotSpeedRange	.\TestObject.h~	/^        rangeType<GLfloat> rotSpeedRange;$/;"	m	class:TestObject	file:	access:public
rotate	.\TestObject.cpp	/^void TestObject::rotate(GLfloat degree)$/;"	f	class:TestObject	signature:(GLfloat degree)
rotate	.\TestObject.cpp~	/^void TestObject::rotate(GLfloat degree)$/;"	f	class:TestObject	signature:(GLfloat degree)
rotate	.\TestObject.h	/^        void rotate(GLfloat degree);$/;"	p	class:TestObject	access:public	signature:(GLfloat degree)
rotate	.\TestObject.h~	/^        void rotate(GLfloat degree);$/;"	p	class:TestObject	file:	access:public	signature:(GLfloat degree)
ruleKeywords	.\ConfWnd.cpp	/^const string ConfWnd::ruleKeywords[] = {"\/SID\/", "\/Date\/", "\/Time\/"};$/;"	m	class:ConfWnd	file:
ruleKeywords	.\ConfWnd.cpp~	/^const string ConfWnd::ruleKeywords[] = {"\/SID\/", "\/Date\/", "\/Time\/"};$/;"	m	class:ConfWnd	file:
ruleKeywords	.\ConfWnd.h	/^        static const string ruleKeywords[];$/;"	m	class:ConfWnd	access:public
ruleKeywords	.\ConfWnd.h~	/^        static const string ruleKeywords[];$/;"	m	class:ConfWnd	file:	access:public
ruleKeywordsNo	.\ConfWnd.cpp	/^const int ConfWnd::ruleKeywordsNo = 3;$/;"	m	class:ConfWnd	file:
ruleKeywordsNo	.\ConfWnd.cpp~	/^const int ConfWnd::ruleKeywordsNo = 3;$/;"	m	class:ConfWnd	file:
ruleKeywordsNo	.\ConfWnd.h	/^        static const int ruleKeywordsNo;$/;"	m	class:ConfWnd	access:public
ruleKeywordsNo	.\ConfWnd.h~	/^        static const int ruleKeywordsNo;$/;"	m	class:ConfWnd	file:	access:public
run	.\Screen.cpp	/^BOOL Screen::run()$/;"	f	class:Screen	signature:()
run	.\Screen.cpp~	/^BOOL Screen::run()$/;"	f	class:Screen	signature:()
run	.\Screen.h	/^        BOOL run();$/;"	p	class:Screen	access:public	signature:()
run	.\Screen.h~	/^        BOOL run();$/;"	p	class:Screen	file:	access:public	signature:()
screencoords	.\StereoViewingFrameV2.h	/^	cml::vector< double, cml::fixed<6> > screencoords;$/;"	m	class:StereoViewingFrame	access:public
screencoords	.\StereoViewingFrameV2.h~	/^	cml::vector< double, cml::fixed<6> > screencoords;$/;"	m	class:StereoViewingFrame	file:	access:public
secBlackScreen	.\ConditionConstraints.h	/^    float secBlackScreen; \/\/ seconds for displaying black screen$/;"	m	struct:conditionConstraints	access:public
secBlackScreen	.\ConditionConstraints.h~	/^    float secBlackScreen; \/\/ seconds for displaying black screen$/;"	m	struct:conditionConstraints	file:	access:public
secBlackScreen	.\Conditions.h	/^    float secBlackScreen; \/\/ seconds for displaying black screen$/;"	m	struct:conditionStruct	access:public
secBlackScreen	.\Conditions.h~	/^    float secBlackScreen; \/\/ seconds for displaying black screen$/;"	m	struct:conditionStruct	file:	access:public
secDisplay	.\ConditionConstraints.h	/^    float secDisplay; \/\/ seconds for displaying object$/;"	m	struct:conditionConstraints	access:public
secDisplay	.\ConditionConstraints.h~	/^    float secDisplay; \/\/ seconds for displaying object$/;"	m	struct:conditionConstraints	file:	access:public
secDisplay	.\Conditions.h	/^    float secDisplay; \/\/ seconds for displaying object$/;"	m	struct:conditionStruct	access:public
secDisplay	.\Conditions.h~	/^    float secDisplay; \/\/ seconds for displaying object$/;"	m	struct:conditionStruct	file:	access:public
sepSceneStatus	.\Separate2D3DViewScene.h	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	g	class:Separate2D3DViewScene	access:private
sepSceneStatus	.\Separate2D3DViewScene.h~	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	g	class:Separate2D3DViewScene	file:	access:private
sepSceneStatus_t	.\Separate2D3DViewScene.h	/^        typedef enum sepSceneStatus sepSceneStatus_t;$/;"	t	class:Separate2D3DViewScene	typeref:enum:Separate2D3DViewScene::sepSceneStatus	access:private
sepSceneStatus_t	.\Separate2D3DViewScene.h~	/^        typedef enum sepSceneStatus sepSceneStatus_t;$/;"	t	class:Separate2D3DViewScene	typeref:enum:Separate2D3DViewScene::sepSceneStatus	file:	access:private
setDisplayFunc	.\Screen.cpp	/^BOOL Screen::setDisplayFunc(void (*displayFunc)(void))$/;"	f	class:Screen	signature:(void (*displayFunc)(void))
setDisplayFunc	.\Screen.cpp~	/^BOOL Screen::setDisplayFunc(void (*displayFunc)(void))$/;"	f	class:Screen	signature:(void (*displayFunc)(void))
setDisplayFunc	.\Screen.h	/^        BOOL setDisplayFunc(void (*displayFunc)(void));$/;"	p	class:Screen	access:public	signature:(void (*displayFunc)(void))
setDisplayFunc	.\Screen.h~	/^        BOOL setDisplayFunc(void (*displayFunc)(void));$/;"	p	class:Screen	file:	access:public	signature:(void (*displayFunc)(void))
setIdleFunc	.\Screen.cpp	/^BOOL Screen::setIdleFunc(void (*func)(void))$/;"	f	class:Screen	signature:(void (*func)(void))
setIdleFunc	.\Screen.cpp~	/^BOOL Screen::setIdleFunc(void (*func)(void))$/;"	f	class:Screen	signature:(void (*func)(void))
setIdleFunc	.\Screen.h	/^        BOOL setIdleFunc(void (*func)(void));$/;"	p	class:Screen	access:public	signature:(void (*func)(void))
setIdleFunc	.\Screen.h~	/^        BOOL setIdleFunc(void (*func)(void));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(void))
setKeyboardFunc	.\Screen.cpp	/^BOOL Screen::setKeyboardFunc(void (*func)(unsigned char key, int x, int y))$/;"	f	class:Screen	signature:(void (*func)(unsigned char key, int x, int y))
setKeyboardFunc	.\Screen.cpp~	/^BOOL Screen::setKeyboardFunc(void (*func)(unsigned char key, int x, int y))$/;"	f	class:Screen	signature:(void (*func)(unsigned char key, int x, int y))
setKeyboardFunc	.\Screen.h	/^        BOOL setKeyboardFunc(void (*func)(unsigned char key, int x, int y));$/;"	p	class:Screen	access:public	signature:(void (*func)(unsigned char key, int x, int y))
setKeyboardFunc	.\Screen.h~	/^        BOOL setKeyboardFunc(void (*func)(unsigned char key, int x, int y));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(unsigned char key, int x, int y))
setKeyboardSpecialFunc	.\Screen.cpp	/^BOOL Screen::setKeyboardSpecialFunc(void (*func)(int key, int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int key, int x, int y))
setKeyboardSpecialFunc	.\Screen.cpp~	/^BOOL Screen::setKeyboardSpecialFunc(void (*func)(int key, int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int key, int x, int y))
setKeyboardSpecialFunc	.\Screen.h	/^        BOOL setKeyboardSpecialFunc(void (*func)(int key, int x, int y));$/;"	p	class:Screen	access:public	signature:(void (*func)(int key, int x, int y))
setKeyboardSpecialFunc	.\Screen.h~	/^        BOOL setKeyboardSpecialFunc(void (*func)(int key, int x, int y));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(int key, int x, int y))
setMouseFunc	.\Screen.cpp	/^BOOL Screen::setMouseFunc(void (*func)(int button, int state, int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int button, int state, int x, int y))
setMouseFunc	.\Screen.cpp~	/^BOOL Screen::setMouseFunc(void (*func)(int button, int state, int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int button, int state, int x, int y))
setMouseFunc	.\Screen.h	/^        BOOL setMouseFunc(void (*func)(int button, int state, int x, int y));$/;"	p	class:Screen	access:public	signature:(void (*func)(int button, int state, int x, int y))
setMouseFunc	.\Screen.h~	/^        BOOL setMouseFunc(void (*func)(int button, int state, int x, int y));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(int button, int state, int x, int y))
setMouseMotionFunc	.\Screen.cpp	/^BOOL Screen::setMouseMotionFunc(void (*func)(int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int x, int y))
setMouseMotionFunc	.\Screen.cpp~	/^BOOL Screen::setMouseMotionFunc(void (*func)(int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int x, int y))
setMouseMotionFunc	.\Screen.h	/^        BOOL setMouseMotionFunc(void (*func)(int x, int y));$/;"	p	class:Screen	access:public	signature:(void (*func)(int x, int y))
setMouseMotionFunc	.\Screen.h~	/^        BOOL setMouseMotionFunc(void (*func)(int x, int y));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(int x, int y))
setMousePassiveMotionFunc	.\Screen.cpp	/^BOOL Screen::setMousePassiveMotionFunc(void (*func)(int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int x, int y))
setMousePassiveMotionFunc	.\Screen.cpp~	/^BOOL Screen::setMousePassiveMotionFunc(void (*func)(int x, int y))$/;"	f	class:Screen	signature:(void (*func)(int x, int y))
setMousePassiveMotionFunc	.\Screen.h	/^        BOOL setMousePassiveMotionFunc(void (*func)(int x, int y));$/;"	p	class:Screen	access:public	signature:(void (*func)(int x, int y))
setMousePassiveMotionFunc	.\Screen.h~	/^        BOOL setMousePassiveMotionFunc(void (*func)(int x, int y));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(int x, int y))
setRandPara	.\CylinderObject.cpp	/^void CylinderObject::setRandPara()$/;"	f	class:CylinderObject	signature:()
setRandPara	.\CylinderObject.cpp~	/^void CylinderObject::setRandPara()$/;"	f	class:CylinderObject	signature:()
setRandPara	.\CylinderObject.h	/^        virtual void setRandPara(void);$/;"	p	class:CylinderObject	access:public	signature:(void)
setRandPara	.\CylinderObject.h~	/^        virtual void setRandPara(void);$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
setRandPara	.\TestObject.cpp	/^void TestObject::setRandPara()$/;"	f	class:TestObject	signature:()
setRandPara	.\TestObject.cpp~	/^void TestObject::setRandPara()$/;"	f	class:TestObject	signature:()
setRandPara	.\TestObject.h	/^        virtual void setRandPara(void);$/;"	p	class:TestObject	access:public	signature:(void)
setRandPara	.\TestObject.h~	/^        virtual void setRandPara(void);$/;"	p	class:TestObject	file:	access:public	signature:(void)
setReshapeFunc	.\Screen.cpp	/^BOOL Screen::setReshapeFunc(void (*func)(int w, int h))$/;"	f	class:Screen	signature:(void (*func)(int w, int h))
setReshapeFunc	.\Screen.cpp~	/^BOOL Screen::setReshapeFunc(void (*func)(int w, int h))$/;"	f	class:Screen	signature:(void (*func)(int w, int h))
setReshapeFunc	.\Screen.h	/^        BOOL setReshapeFunc(void (*func)(int w, int h));$/;"	p	class:Screen	access:public	signature:(void (*func)(int w, int h))
setReshapeFunc	.\Screen.h~	/^        BOOL setReshapeFunc(void (*func)(int w, int h));$/;"	p	class:Screen	file:	access:public	signature:(void (*func)(int w, int h))
setTimerFunc	.\Screen.cpp	/^BOOL Screen::setTimerFunc(unsigned int msecs, void (*func)(int timerID), int timerID)$/;"	f	class:Screen	signature:(unsigned int msecs, void (*func)(int timerID), int timerID)
setTimerFunc	.\Screen.cpp~	/^BOOL Screen::setTimerFunc(unsigned int msecs, void (*func)(int timerID), int timerID)$/;"	f	class:Screen	signature:(unsigned int msecs, void (*func)(int timerID), int timerID)
setTimerFunc	.\Screen.h	/^        BOOL setTimerFunc(unsigned int msecs, void (*func)(int timerID), int timerID);$/;"	p	class:Screen	access:public	signature:(unsigned int msecs, void (*func)(int timerID), int timerID)
setTimerFunc	.\Screen.h~	/^        BOOL setTimerFunc(unsigned int msecs, void (*func)(int timerID), int timerID);$/;"	p	class:Screen	file:	access:public	signature:(unsigned int msecs, void (*func)(int timerID), int timerID)
shuffleConditions	.\Conditions.cpp	/^void Conditions::shuffleConditions(int times)$/;"	f	class:Conditions	signature:(int times)
shuffleConditions	.\Conditions.cpp~	/^void Conditions::shuffleConditions(int times)$/;"	f	class:Conditions	signature:(int times)
shuffleConditions	.\Conditions.h	/^        virtual void shuffleConditions(int times);$/;"	p	class:Conditions	access:public	signature:(int times)
shuffleConditions	.\Conditions.h~	/^        virtual void shuffleConditions(int times);$/;"	p	class:Conditions	file:	access:public	signature:(int times)
shuffleConditions	.\groupBasedConditions.cpp	/^void groupBasedConditions::shuffleConditions(int times)$/;"	f	class:groupBasedConditions	signature:(int times)
shuffleConditions	.\groupBasedConditions.cpp~	/^void groupBasedConditions::shuffleConditions(int times)$/;"	f	class:groupBasedConditions	signature:(int times)
shuffleConditions	.\groupBasedConditions.h	/^        virtual void shuffleConditions(int times);$/;"	p	class:groupBasedConditions	access:public	signature:(int times)
shuffleConditions	.\groupBasedConditions.h~	/^        virtual void shuffleConditions();$/;"	p	class:groupBasedConditions	file:	access:public	signature:()
shuffledConditions	.\groupBasedConditions.h	/^        vector<cond_t *> shuffledConditions;$/;"	m	class:groupBasedConditions	access:private
shuffledConditions	.\groupBasedConditions.h~	/^        vector<cond_t *> shuffledConditions;$/;"	m	class:groupBasedConditions	file:	access:private
sideTextureID	.\CylinderObject.h	/^        GLuint sideTextureID;$/;"	m	class:CylinderObject	access:public
sideTextureID	.\CylinderObject.h~	/^        GLuint sideTextureID;$/;"	m	class:CylinderObject	file:	access:public
startProgram	.\experiment.cpp	/^BOOL Experiment::startProgram()$/;"	f	class:Experiment	signature:()
startProgram	.\experiment.cpp~	/^BOOL Experiment::startProgram()$/;"	f	class:Experiment	signature:()
startProgram	.\experiment.h	/^        BOOL startProgram();$/;"	p	class:Experiment	access:public	signature:()
startProgram	.\experiment.h~	/^        BOOL startProgram();$/;"	p	class:Experiment	file:	access:public	signature:()
startSampleFPS	.\Screen.cpp	/^BOOL Screen::startSampleFPS()$/;"	f	class:Screen	signature:()
startSampleFPS	.\Screen.cpp~	/^BOOL Screen::startSampleFPS()$/;"	f	class:Screen	signature:()
startSampleFPS	.\Screen.h	/^        BOOL startSampleFPS();$/;"	p	class:Screen	access:public	signature:()
startSampleFPS	.\Screen.h~	/^        BOOL startSampleFPS();$/;"	p	class:Screen	file:	access:public	signature:()
startScene	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::startScene()$/;"	f	class:Overlapped2DViewScene	signature:()
startScene	.\Overlapped2DViewScene.cpp~	/^BOOL Overlapped2DViewScene::startScene()$/;"	f	class:Overlapped2DViewScene	signature:()
startScene	.\Overlapped2DViewScene.h	/^        virtual BOOL startScene();$/;"	p	class:Overlapped2DViewScene	access:public	signature:()
startScene	.\Overlapped2DViewScene.h~	/^        virtual BOOL startScene();$/;"	p	class:Overlapped2DViewScene	file:	access:public	signature:()
startScene	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::startScene()$/;"	f	class:PostExperimentScene	signature:()
startScene	.\PostExperimentScene.cpp~	/^BOOL PostExperimentScene::startScene()$/;"	f	class:PostExperimentScene	signature:()
startScene	.\PostExperimentScene.h	/^        virtual BOOL startScene();$/;"	p	class:PostExperimentScene	access:public	signature:()
startScene	.\PostExperimentScene.h~	/^        virtual BOOL startScene();$/;"	p	class:PostExperimentScene	file:	access:public	signature:()
startScene	.\PreTrialScene.cpp	/^BOOL PreTrialScene::startScene()$/;"	f	class:PreTrialScene	signature:()
startScene	.\PreTrialScene.cpp~	/^BOOL PreTrialScene::startScene()$/;"	f	class:PreTrialScene	signature:()
startScene	.\PreTrialScene.h	/^        virtual BOOL startScene();$/;"	p	class:PreTrialScene	access:public	signature:()
startScene	.\PreTrialScene.h~	/^        virtual BOOL startScene();$/;"	p	class:PreTrialScene	file:	access:public	signature:()
startScene	.\Scene.h	/^        virtual BOOL startScene() = 0;$/;"	p	class:Scene	access:public	signature:()
startScene	.\Scene.h~	/^        virtual BOOL startScene() = 0;$/;"	p	class:Scene	file:	access:public	signature:()
startScene	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::startScene()$/;"	f	class:Separate2D3DViewScene	signature:()
startScene	.\Separate2D3DViewScene.cpp~	/^BOOL Separate2D3DViewScene::startScene()$/;"	f	class:Separate2D3DViewScene	signature:()
startScene	.\Separate2D3DViewScene.h	/^        virtual BOOL startScene();$/;"	p	class:Separate2D3DViewScene	access:public	signature:()
startScene	.\Separate2D3DViewScene.h~	/^        virtual BOOL startScene();$/;"	p	class:Separate2D3DViewScene	file:	access:public	signature:()
startTrial	.\Trial.cpp	/^BOOL Trial::startTrial()$/;"	f	class:Trial	signature:()
startTrial	.\Trial.cpp~	/^BOOL Trial::startTrial()$/;"	f	class:Trial	signature:()
startTrial	.\Trial.h	/^        BOOL startTrial();$/;"	p	class:Trial	access:public	signature:()
startTrial	.\Trial.h~	/^        BOOL startTrial();$/;"	p	class:Trial	file:	access:public	signature:()
state	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	g	class:Trial	access:public
state	.\Trial.h~	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE};$/;"	g	class:Trial	file:	access:public
status	.\Scene.h	/^        BOOL status;$/;"	m	class:Scene	access:protected
std	.\Release\PostExperimentScene.obj	/^/;"	v
stepTrial	.\Trial.h	/^        BOOL stepTrial(); $/;"	p	class:Trial	access:public	signature:()
stepTrial	.\Trial.h~	/^        BOOL stepTrial(); $/;"	p	class:Trial	file:	access:public	signature:()
stereoFrame	.\Screen.h	/^        StereoViewingFrame stereoFrame;$/;"	m	class:Screen	access:public
stopSampleFPS	.\Screen.cpp	/^BOOL Screen::stopSampleFPS()$/;"	f	class:Screen	signature:()
stopSampleFPS	.\Screen.cpp~	/^BOOL Screen::stopSampleFPS()$/;"	f	class:Screen	signature:()
stopSampleFPS	.\Screen.h	/^        BOOL stopSampleFPS();$/;"	p	class:Screen	access:public	signature:()
stopSampleFPS	.\Screen.h~	/^        BOOL stopSampleFPS();$/;"	p	class:Screen	file:	access:public	signature:()
stopped	.\Screen.h	/^        BOOL stopped;$/;"	m	class:Screen	access:public
stopped	.\Screen.h~	/^        BOOL stopped;$/;"	m	class:Screen	file:	access:public
strDate	.\ConfWnd.h	/^        string strDate;$/;"	m	class:ConfWnd	access:public
strDate	.\experiment.h	/^        string strDate;$/;"	m	class:Experiment	access:public
strDate	.\experiment.h~	/^        string strDate;$/;"	m	class:Experiment	file:	access:public
strTime	.\ConfWnd.h	/^        string strTime;$/;"	m	class:ConfWnd	access:public
strTime	.\experiment.h	/^        string strTime;$/;"	m	class:Experiment	access:public
strTime	.\experiment.h~	/^        string strTime;$/;"	m	class:Experiment	file:	access:public
subjectID	.\ConfWnd.h	/^        string subjectID;$/;"	m	class:ConfWnd	access:public
subjectID	.\ConfWnd.h~	/^        string subjectID;$/;"	m	class:ConfWnd	file:	access:public
subjectID	.\experiment.h	/^        string subjectID;$/;"	m	class:Experiment	access:public
subjectID	.\experiment.h~	/^        string subjectID;$/;"	m	class:Experiment	file:	access:public
t_Dift	.\Debug\experiment.obj	/^</;"	v
testRenderScene	.\Screen.cpp	/^void Screen::testRenderScene()$/;"	f	class:Screen	signature:()
testRenderScene	.\Screen.cpp~	/^void Screen::testRenderScene()$/;"	f	class:Screen	signature:()
testRenderScene	.\Screen.h	/^        static void testRenderScene();$/;"	p	class:Screen	access:public	signature:()
testRenderScene	.\Screen.h~	/^        static void testRenderScene();$/;"	p	class:Screen	file:	access:public	signature:()
texIDs	.\Screen.h	/^        GLuint *texIDs;$/;"	m	class:Screen	access:public
texIDs	.\Screen.h~	/^        GLuint *texIDs;$/;"	m	class:Screen	file:	access:public
texNo	.\Screen.h	/^        int texNo;$/;"	m	class:Screen	access:public
texNo	.\Screen.h~	/^        int texNo;$/;"	m	class:Screen	file:	access:public
textureGroups	.\ConditionConstraints.h	/^    vector< vector<string> * > textureGroups;$/;"	m	struct:conditionConstraints	access:public
textureGroups	.\ConditionConstraints.h~	/^    vector< vector<string> * > textureGroups;$/;"	m	struct:conditionConstraints	file:	access:public
textureID	.\texture.h	/^        GLuint textureID;$/;"	m	union:textureStruct::__anon5	access:public
textureID	.\texture.h~	/^        GLuint textureID;$/;"	m	union:textureStruct::__anon7	file:	access:public
textureMap	.\Conditions.h	/^        hash_map<string, int> textureMap;$/;"	m	class:Conditions	access:protected
textureMap	.\Conditions.h~	/^        hash_map<string, int> textureMap;$/;"	m	class:Conditions	file:	access:protected
textureStruct	.\texture.h	/^struct textureStruct$/;"	s
textureStruct	.\texture.h~	/^struct textureStruct$/;"	s	file:
textureStruct::__anon5::color	.\texture.h	/^        UINT color[3];$/;"	m	union:textureStruct::__anon5	access:public
textureStruct::__anon5::textureID	.\texture.h	/^        GLuint textureID;$/;"	m	union:textureStruct::__anon5	access:public
textureStruct::__anon7::color	.\texture.h~	/^        UINT color[3];$/;"	m	union:textureStruct::__anon7	file:	access:public
textureStruct::__anon7::textureID	.\texture.h~	/^        GLuint textureID;$/;"	m	union:textureStruct::__anon7	file:	access:public
textureStruct::name	.\texture.h	/^    string name;$/;"	m	struct:textureStruct	access:public
textureStruct::type	.\texture.h	/^    char type;$/;"	m	struct:textureStruct	access:public
textureStruct::type	.\texture.h~	/^    char type;$/;"	m	struct:textureStruct	file:	access:public
texture_t	.\texture.h	/^typedef struct textureStruct texture_t;$/;"	t	typeref:struct:textureStruct
texture_t	.\texture.h~	/^typedef struct textureStruct texture_t;$/;"	t	typeref:struct:textureStruct	file:
textures	.\Conditions.h	/^        vector<rTexture_t *> textures;$/;"	m	class:Conditions	access:protected
textures	.\Conditions.h	/^    vector<texture_t *> textures; \/\/ Stores the textures for the object$/;"	m	struct:conditionStruct	access:public
textures	.\Conditions.h~	/^        vector<rTexture_t *> textures;$/;"	m	class:Conditions	file:	access:protected
textures	.\Conditions.h~	/^    vector<texture_t *> textures; \/\/ Stores the textures for the object$/;"	m	struct:conditionStruct	file:	access:public
textures	.\TestObject.h	/^        vector<texture_t *> textures;$/;"	m	class:TestObject	access:public
textures	.\TestObject.h~	/^        vector<texture_t *> textures;$/;"	m	class:TestObject	file:	access:public
topCenterEye	.\StereoViewingFrameV2.h	/^    vector_3d topCenterEye;$/;"	m	class:StereoViewingFrame	access:public
topCenterEye	.\StereoViewingFrameV2.h~	/^    vector_3d topCenterEye;$/;"	m	class:StereoViewingFrame	file:	access:public
topLeftEye	.\StereoViewingFrameV2.h	/^    vector_3d topLeftEye;$/;"	m	class:StereoViewingFrame	access:public
topLeftEye	.\StereoViewingFrameV2.h~	/^    vector_3d topLeftEye;$/;"	m	class:StereoViewingFrame	file:	access:public
topRightEye	.\StereoViewingFrameV2.h	/^    vector_3d topRightEye;$/;"	m	class:StereoViewingFrame	access:public
topRightEye	.\StereoViewingFrameV2.h~	/^    vector_3d topRightEye;$/;"	m	class:StereoViewingFrame	file:	access:public
topTextureID	.\CylinderObject.h	/^        GLuint topTextureID;$/;"	m	class:CylinderObject	access:public
topTextureID	.\CylinderObject.h~	/^        GLuint topTextureID;$/;"	m	class:CylinderObject	file:	access:public
trialID	.\Trial.h	/^        UINT trialID;$/;"	m	class:Trial	access:private
trialID	.\Trial.h~	/^        UINT trialID;$/;"	m	class:Trial	file:	access:private
trialsInOneSec	.\ConfWnd.h	/^        unsigned int trialsInOneSec;$/;"	m	class:ConfWnd	access:public
trialsInOneSec	.\ConfWnd.h~	/^        unsigned int trialsInOneSec;$/;"	m	class:ConfWnd	file:	access:public
trialsPerSec	.\experiment.h	/^        unsigned int trialsPerSec;$/;"	m	class:Experiment	access:public
trialsPerSec	.\experiment.h~	/^        unsigned int trialsPerSec;$/;"	m	class:Experiment	file:	access:public
type	.\rangeType.h	/^        char type;$/;"	m	class:rangeType	access:public
type	.\rangeType.h~	/^        char type;$/;"	m	class:rangeType	file:	access:public
type	.\texture.h	/^    char type;$/;"	m	struct:raw_textureStruct	access:public
type	.\texture.h	/^    char type;$/;"	m	struct:textureStruct	access:public
type	.\texture.h~	/^    char type;$/;"	m	struct:raw_textureStruct	file:	access:public
type	.\texture.h~	/^    char type;$/;"	m	struct:textureStruct	file:	access:public
u	.\Release\glew32.dll	/^t</;"	v
unregisterTimer	.\Scene.cpp	/^void Scene::unregisterTimer(int timerID)$/;"	f	class:Scene	signature:(int timerID)
unregisterTimer	.\Scene.cpp~	/^void Scene::unregisterTimer(int timerID)$/;"	f	class:Scene	signature:(int timerID)
unregisterTimer	.\Scene.h	/^        static void unregisterTimer(int timerID);$/;"	p	class:Scene	access:protected	signature:(int timerID)
unregisterTimer	.\Scene.h~	/^        static void unregisterTimer(int timerID);$/;"	p	class:Scene	file:	access:protected	signature:(int timerID)
updateOutputFilename	.\ConfWnd.cpp	/^void ConfWnd::updateOutputFilename(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
updateOutputFilename	.\ConfWnd.cpp~	/^void ConfWnd::updateOutputFilename(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
updateOutputFilename	.\ConfWnd.h	/^        void updateOutputFilename(HWND hDlg);$/;"	p	class:ConfWnd	access:private	signature:(HWND hDlg)
updateOutputFilename	.\ConfWnd.h~	/^        void updateOutputFilename(HWND hDlg);$/;"	p	class:ConfWnd	file:	access:private	signature:(HWND hDlg)
updateShuffledConditions	.\groupBasedConditions.cpp	/^void groupBasedConditions::updateShuffledConditions()$/;"	f	class:groupBasedConditions	signature:()
updateShuffledConditions	.\groupBasedConditions.cpp~	/^void groupBasedConditions::updateShuffledConditions()$/;"	f	class:groupBasedConditions	signature:()
updateShuffledConditions	.\groupBasedConditions.h	/^        void updateShuffledConditions();$/;"	p	class:groupBasedConditions	access:private	signature:()
updateShuffledConditions	.\groupBasedConditions.h~	/^        void updateShuffledConditions();$/;"	p	class:groupBasedConditions	file:	access:private	signature:()
updateTrialNo	.\ConfWnd.cpp	/^void ConfWnd::updateTrialNo(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
updateTrialNo	.\ConfWnd.cpp~	/^void ConfWnd::updateTrialNo(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
updateTrialNo	.\ConfWnd.h	/^        void updateTrialNo(HWND hDlg);$/;"	p	class:ConfWnd	access:private	signature:(HWND hDlg)
updateTrialNo	.\ConfWnd.h~	/^        void updateTrialNo(HWND hDlg);$/;"	p	class:ConfWnd	file:	access:private	signature:(HWND hDlg)
validateBlanks	.\ConfWnd.cpp	/^int ConfWnd::validateBlanks(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
validateBlanks	.\ConfWnd.cpp~	/^int ConfWnd::validateBlanks(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
validateBlanks	.\ConfWnd.h	/^        int validateBlanks(HWND hDlg);$/;"	p	class:ConfWnd	access:private	signature:(HWND hDlg)
validateBlanks	.\ConfWnd.h~	/^        int validateBlanks(HWND hDlg);$/;"	p	class:ConfWnd	file:	access:private	signature:(HWND hDlg)
validateFileExistance	.\ConfWnd.cpp	/^int ConfWnd::validateFileExistance(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
validateFileExistance	.\ConfWnd.cpp~	/^int ConfWnd::validateFileExistance(HWND hDlg)$/;"	f	class:ConfWnd	signature:(HWND hDlg)
validateFileExistance	.\ConfWnd.h	/^        int validateFileExistance(HWND hDlg);$/;"	p	class:ConfWnd	access:private	signature:(HWND hDlg)
validateFileExistance	.\ConfWnd.h~	/^        int validateFileExistance(HWND hDlg);$/;"	p	class:ConfWnd	file:	access:private	signature:(HWND hDlg)
vector_3d	.\StereoViewingFrameV2.h	/^typedef cml::vector< double, cml::fixed<3> > vector_3d;$/;"	t
vector_3d	.\StereoViewingFrameV2.h~	/^typedef cml::vector< double, cml::fixed<3> > vector_3d;$/;"	t	file:
vector_type	.\Debug\ConfWnd.obj	/^6/;"	v
vector_type	.\Debug\Overlapped2DViewScene.obj	/^6/;"	v
vector_type	.\Debug\PostExperimentScene.obj	/^6/;"	v
vector_type	.\Debug\StereoViewingFrameV2.obj	/^6/;"	v
weight	.\ConditionConstraints.h	/^    int weight; \/\/ The weight of the constraint$/;"	m	struct:conditionConstraints	access:public
weight	.\ConditionConstraints.h~	/^    int weight; \/\/ The weight of the constraint$/;"	m	struct:conditionConstraints	file:	access:public
writeOutputs	.\experiment.cpp	/^BOOL Experiment::writeOutputs(string& strOutputs)$/;"	f	class:Experiment	signature:(string& strOutputs)
writeOutputs	.\experiment.cpp~	/^BOOL Experiment::writeOutputs(string& strOutputs)$/;"	f	class:Experiment	signature:(string& strOutputs)
writeOutputs	.\experiment.h	/^        BOOL writeOutputs(string& strOutputs);$/;"	p	class:Experiment	access:public	signature:(string& strOutputs)
writeOutputs	.\experiment.h~	/^        BOOL writeOutputs(string& strOutputs);$/;"	p	class:Experiment	file:	access:public	signature:(string& strOutputs)
xyz2D	.\Conditions.h	/^    vector<GLfloat> xyz2D;$/;"	m	struct:conditionStruct	access:public
xyz2D	.\experiment.h	/^        vector<GLfloat> xyz2D;$/;"	m	class:Experiment	access:private
xyz2D	.\experiment.h~	/^        vector<GLfloat> xyz2D;$/;"	m	class:Experiment	file:	access:private
xyz3D	.\Conditions.h	/^    vector<GLfloat> xyz3D;$/;"	m	struct:conditionStruct	access:public
xyz3D	.\experiment.h	/^        vector<GLfloat> xyz3D;$/;"	m	class:Experiment	access:private
xyz3D	.\experiment.h~	/^        vector<GLfloat> xyz3D;$/;"	m	class:Experiment	file:	access:private
y	.\Release\textures\Thumbs.db	/^ÑÔ¼9Ý\\[Fcene::dispatchMousePassiveMotionEvent(int x, int y)$/;"	f	class:Scene	signature:(int x, int y)
yaw	.\TestObject.h	/^        GLfloat yaw;$/;"	m	class:TestObject	access:public
yaw	.\TestObject.h~	/^        GLfloat yaw;$/;"	m	class:TestObject	file:	access:public
yawRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> yawRange;$/;"	m	struct:conditionConstraints	access:public
yawRange	.\ConditionConstraints.h~	/^    rangeType<GLfloat> yawRange;$/;"	m	struct:conditionConstraints	file:	access:public
yawRange	.\TestObject.h	/^        rangeType<GLfloat> yawRange;$/;"	m	class:TestObject	access:public
yawRange	.\TestObject.h~	/^        rangeType<GLfloat> yawRange;$/;"	m	class:TestObject	file:	access:public
~Conditions	.\Conditions.cpp	/^Conditions::~Conditions(void)$/;"	f	class:Conditions	signature:(void)
~Conditions	.\Conditions.cpp~	/^Conditions::~Conditions(void)$/;"	f	class:Conditions	signature:(void)
~Conditions	.\Conditions.h	/^        ~Conditions(void);$/;"	p	class:Conditions	access:public	signature:(void)
~Conditions	.\Conditions.h~	/^        ~Conditions(void);$/;"	p	class:Conditions	file:	access:public	signature:(void)
~ConfWnd	.\ConfWnd.cpp	/^ConfWnd::~ConfWnd(void)$/;"	f	class:ConfWnd	signature:(void)
~ConfWnd	.\ConfWnd.cpp~	/^ConfWnd::~ConfWnd(void)$/;"	f	class:ConfWnd	signature:(void)
~ConfWnd	.\ConfWnd.h	/^        ~ConfWnd();$/;"	p	class:ConfWnd	access:public	signature:()
~ConfWnd	.\ConfWnd.h~	/^        ~ConfWnd();$/;"	p	class:ConfWnd	file:	access:public	signature:()
~CylinderFactory	.\CylinderFactory.cpp	/^CylinderFactory::~CylinderFactory(void)$/;"	f	class:CylinderFactory	signature:(void)
~CylinderFactory	.\CylinderFactory.cpp~	/^CylinderFactory::~CylinderFactory(void)$/;"	f	class:CylinderFactory	signature:(void)
~CylinderFactory	.\CylinderFactory.h	/^        virtual ~CylinderFactory(void);$/;"	p	class:CylinderFactory	access:public	signature:(void)
~CylinderFactory	.\CylinderFactory.h~	/^        virtual ~CylinderFactory(void);$/;"	p	class:CylinderFactory	file:	access:public	signature:(void)
~CylinderObject	.\CylinderObject.cpp	/^CylinderObject::~CylinderObject(void)$/;"	f	class:CylinderObject	signature:(void)
~CylinderObject	.\CylinderObject.cpp~	/^CylinderObject::~CylinderObject(void)$/;"	f	class:CylinderObject	signature:(void)
~CylinderObject	.\CylinderObject.h	/^        virtual ~CylinderObject(void);$/;"	p	class:CylinderObject	access:public	signature:(void)
~CylinderObject	.\CylinderObject.h~	/^        virtual ~CylinderObject(void);$/;"	p	class:CylinderObject	file:	access:public	signature:(void)
~Experiment	.\experiment.cpp	/^Experiment::~Experiment(void)$/;"	f	class:Experiment	signature:(void)
~Experiment	.\experiment.cpp~	/^Experiment::~Experiment(void)$/;"	f	class:Experiment	signature:(void)
~Experiment	.\experiment.h	/^        ~Experiment();$/;"	p	class:Experiment	access:public	signature:()
~Experiment	.\experiment.h~	/^        ~Experiment();$/;"	p	class:Experiment	file:	access:public	signature:()
~MixedObjectViewScene	.\MixedObjectViewScene.cpp	/^MixedObjectViewScene::~MixedObjectViewScene(void)$/;"	f	class:MixedObjectViewScene	signature:(void)
~MixedObjectViewScene	.\MixedObjectViewScene.cpp~	/^MixedObjectViewScene::~MixedObjectViewScene(void)$/;"	f	class:MixedObjectViewScene	signature:(void)
~MixedObjectViewScene	.\MixedObjectViewScene.h	/^        virtual ~MixedObjectViewScene(void);$/;"	p	class:MixedObjectViewScene	access:public	signature:(void)
~MixedObjectViewScene	.\MixedObjectViewScene.h~	/^        virtual ~MixedObjectViewScene(void);$/;"	p	class:MixedObjectViewScene	file:	access:public	signature:(void)
~Overlapped2DViewScene	.\Overlapped2DViewScene.cpp	/^Overlapped2DViewScene::~Overlapped2DViewScene(void)$/;"	f	class:Overlapped2DViewScene	signature:(void)
~Overlapped2DViewScene	.\Overlapped2DViewScene.cpp~	/^Overlapped2DViewScene::~Overlapped2DViewScene(void)$/;"	f	class:Overlapped2DViewScene	signature:(void)
~Overlapped2DViewScene	.\Overlapped2DViewScene.h	/^        virtual ~Overlapped2DViewScene(void);$/;"	p	class:Overlapped2DViewScene	access:public	signature:(void)
~Overlapped2DViewScene	.\Overlapped2DViewScene.h~	/^        virtual ~Overlapped2DViewScene(void);$/;"	p	class:Overlapped2DViewScene	file:	access:public	signature:(void)
~PostExperimentScene	.\PostExperimentScene.cpp	/^PostExperimentScene::~PostExperimentScene(void)$/;"	f	class:PostExperimentScene	signature:(void)
~PostExperimentScene	.\PostExperimentScene.cpp~	/^PostExperimentScene::~PostExperimentScene(void)$/;"	f	class:PostExperimentScene	signature:(void)
~PostExperimentScene	.\PostExperimentScene.h	/^        virtual ~PostExperimentScene(void);$/;"	p	class:PostExperimentScene	access:public	signature:(void)
~PostExperimentScene	.\PostExperimentScene.h~	/^        virtual ~PostExperimentScene(void);$/;"	p	class:PostExperimentScene	file:	access:public	signature:(void)
~PreTrialScene	.\PreTrialScene.cpp	/^PreTrialScene::~PreTrialScene(void)$/;"	f	class:PreTrialScene	signature:(void)
~PreTrialScene	.\PreTrialScene.cpp~	/^PreTrialScene::~PreTrialScene(void)$/;"	f	class:PreTrialScene	signature:(void)
~PreTrialScene	.\PreTrialScene.h	/^        virtual ~PreTrialScene(void);$/;"	p	class:PreTrialScene	access:public	signature:(void)
~PreTrialScene	.\PreTrialScene.h~	/^        virtual ~PreTrialScene(void);$/;"	p	class:PreTrialScene	file:	access:public	signature:(void)
~PureWordScene	.\PureWordScene.cpp	/^PureWordScene::~PureWordScene(void)$/;"	f	class:PureWordScene	signature:(void)
~PureWordScene	.\PureWordScene.cpp~	/^PureWordScene::~PureWordScene(void)$/;"	f	class:PureWordScene	signature:(void)
~PureWordScene	.\PureWordScene.h	/^        virtual ~PureWordScene(void);$/;"	p	class:PureWordScene	access:public	signature:(void)
~PureWordScene	.\PureWordScene.h~	/^        virtual ~PureWordScene(void);$/;"	p	class:PureWordScene	file:	access:public	signature:(void)
~Scene	.\Scene.cpp~	/^Scene::~Scene()$/;"	f	class:Scene	signature:()
~Scene	.\Scene.h	/^        virtual ~Scene(void) = 0;$/;"	p	class:Scene	access:public	signature:(void)
~Scene	.\Scene.h~	/^        virtual ~Scene(void) = 0;$/;"	p	class:Scene	file:	access:public	signature:(void)
~Screen	.\Screen.cpp	/^Screen::~Screen(void)$/;"	f	class:Screen	signature:(void)
~Screen	.\Screen.cpp~	/^Screen::~Screen(void)$/;"	f	class:Screen	signature:(void)
~Screen	.\Screen.h	/^        ~Screen();$/;"	p	class:Screen	access:public	signature:()
~Screen	.\Screen.h~	/^        ~Screen();$/;"	p	class:Screen	file:	access:public	signature:()
~Separate2D3DViewScene	.\Separate2D3DViewScene.cpp	/^Separate2D3DViewScene::~Separate2D3DViewScene(void)$/;"	f	class:Separate2D3DViewScene	signature:(void)
~Separate2D3DViewScene	.\Separate2D3DViewScene.cpp~	/^Separate2D3DViewScene::~Separate2D3DViewScene(void)$/;"	f	class:Separate2D3DViewScene	signature:(void)
~Separate2D3DViewScene	.\Separate2D3DViewScene.h	/^        virtual ~Separate2D3DViewScene(void);$/;"	p	class:Separate2D3DViewScene	access:public	signature:(void)
~Separate2D3DViewScene	.\Separate2D3DViewScene.h~	/^        virtual ~Separate2D3DViewScene(void);$/;"	p	class:Separate2D3DViewScene	file:	access:public	signature:(void)
~TestObject	.\TestObject.cpp	/^TestObject::~TestObject(void)$/;"	f	class:TestObject	signature:(void)
~TestObject	.\TestObject.cpp~	/^TestObject::~TestObject(void)$/;"	f	class:TestObject	signature:(void)
~TestObject	.\TestObject.h	/^        virtual ~TestObject(void);$/;"	p	class:TestObject	access:public	signature:(void)
~TestObject	.\TestObject.h~	/^        virtual ~TestObject(void);$/;"	p	class:TestObject	file:	access:public	signature:(void)
~TestObjectFactory	.\TestObjectFactory.cpp	/^TestObjectFactory::~TestObjectFactory(void)$/;"	f	class:TestObjectFactory	signature:(void)
~TestObjectFactory	.\TestObjectFactory.cpp~	/^TestObjectFactory::~TestObjectFactory(void)$/;"	f	class:TestObjectFactory	signature:(void)
~TestObjectFactory	.\TestObjectFactory.h	/^        virtual ~TestObjectFactory(void);$/;"	p	class:TestObjectFactory	access:public	signature:(void)
~TestObjectFactory	.\TestObjectFactory.h~	/^        virtual ~TestObjectFactory(void);$/;"	p	class:TestObjectFactory	file:	access:public	signature:(void)
~Trial	.\Trial.cpp	/^Trial::~Trial(void)$/;"	f	class:Trial	signature:(void)
~Trial	.\Trial.cpp~	/^Trial::~Trial(void)$/;"	f	class:Trial	signature:(void)
~Trial	.\Trial.h	/^        ~Trial();$/;"	p	class:Trial	access:public	signature:()
~Trial	.\Trial.h~	/^        ~Trial();$/;"	p	class:Trial	file:	access:public	signature:()
~groupBasedConditions	.\groupBasedConditions.cpp	/^groupBasedConditions::~groupBasedConditions(void)$/;"	f	class:groupBasedConditions	signature:(void)
~groupBasedConditions	.\groupBasedConditions.cpp~	/^groupBasedConditions::~groupBasedConditions(void)$/;"	f	class:groupBasedConditions	signature:(void)
~groupBasedConditions	.\groupBasedConditions.h	/^        virtual ~groupBasedConditions(void);$/;"	p	class:groupBasedConditions	access:public	signature:(void)
~groupBasedConditions	.\groupBasedConditions.h~	/^        virtual ~groupBasedConditions(void);$/;"	p	class:groupBasedConditions	file:	access:public	signature:(void)
~rangeType	.\rangeType.cpp~	/^rangeType<T>::~rangeType(void)$/;"	f	class:rangeType	signature:(void)
~rangeType	.\rangeType.h	/^        ~rangeType(void);$/;"	p	class:rangeType	access:public	signature:(void)
~rangeType	.\rangeType.h	/^rangeType<T>::~rangeType(void)$/;"	f	class:rangeType	signature:(void)
~rangeType	.\rangeType.h~	/^        ~rangeType(void);$/;"	p	class:rangeType	file:	access:public	signature:(void)
~rangeType	.\rangeType.h~	/^rangeType<T>::~rangeType(void)$/;"	f	class:rangeType	signature:(void)
~ÿ	.\Release\TestObject.obj	/^/;"	v
