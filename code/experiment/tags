!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CLOCKWISE	.\TestObject.h	/^enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	e	enum:enumRotDirection
CML_ALWAYS_PROMOTE_TO_DEFAULT_LAYOUT	.\cml_config.h	10;"	d
CML_AUTOMATIC_MATRIX_RESIZE_ON_ASSIGNMENT	.\cml_config.h	14;"	d
CML_AUTOMATIC_VECTOR_RESIZE_ON_ASSIGNMENT	.\cml_config.h	12;"	d
CML_CHECK_MATRIX_EXPR_SIZES	.\cml_config.h	15;"	d
CML_CHECK_VECTOR_EXPR_SIZES	.\cml_config.h	13;"	d
CML_DEFAULT_ARRAY_ALLOC	.\cml_config.h	11;"	d
CML_DEFAULT_ARRAY_LAYOUT	.\cml_config.h	9;"	d
CML_NO_2D_UNROLLER	.\cml_config.h	8;"	d
CML_VECTOR_DOT_UNROLL_LIMIT	.\cml_config.h	7;"	d
CML_VECTOR_UNROLL_LIMIT	.\cml_config.h	6;"	d
CONTINUOUS_DISPLAY	.\ConditionConstraints.h	/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$/;"	e	enum:DisplayMode
COUNTERCLOCKWISE	.\TestObject.h	/^enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	e	enum:enumRotDirection
Conditions	.\Conditions.cpp	/^Conditions::Conditions(ifstream& rFin, $/;"	f	class:Conditions
Conditions	.\Conditions.cpp	/^Conditions::Conditions(ifstream& rFin, int numConditions,$/;"	f	class:Conditions
Conditions	.\Conditions.h	/^class Conditions$/;"	c
ConfWnd	.\ConfWnd.cpp	/^ConfWnd::ConfWnd(void)$/;"	f	class:ConfWnd
ConfWnd	.\ConfWnd.h	/^class ConfWnd$/;"	c
CounterFrequency	.\Screen.h	/^        LARGE_INTEGER CounterFrequency;$/;"	m	class:Screen
CylinderFactory	.\CylinderFactory.cpp	/^CylinderFactory::CylinderFactory(void)$/;"	f	class:CylinderFactory
CylinderFactory	.\CylinderFactory.h	/^class CylinderFactory :$/;"	c
CylinderObject	.\CylinderObject.cpp	/^CylinderObject::CylinderObject(CylinderObject &rObj) : TestObject(rObj)$/;"	f	class:CylinderObject
CylinderObject	.\CylinderObject.cpp	/^CylinderObject::CylinderObject(rangeType<GLfloat>& pitchRange,$/;"	f	class:CylinderObject
CylinderObject	.\CylinderObject.h	/^class CylinderObject :$/;"	c
DISCRETE_DISPLAY	.\ConditionConstraints.h	/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$/;"	e	enum:DisplayMode
DISPLAY_BLACKSCREEN	.\Separate2D3DViewScene.h	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	e	enum:Separate2D3DViewScene::sepSceneStatus
DISPLAY_OBJECT	.\Separate2D3DViewScene.h	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	e	enum:Separate2D3DViewScene::sepSceneStatus
DisplayMode	.\ConditionConstraints.h	/^enum DisplayMode {CONTINUOUS_DISPLAY, DISCRETE_DISPLAY};$/;"	g
EXPERIMENT	.\experiment.h	/^enum enumExperiMode {EXPERIMENT = 0, PRACTICE = 1};$/;"	e	enum:enumExperiMode
Experiment	.\experiment.cpp	/^Experiment::Experiment(HINSTANCE hInstance):$/;"	f	class:Experiment
Experiment	.\experiment.h	/^class Experiment$/;"	c
FINISHED	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE, FINISHED};$/;"	e	enum:Trial::state
FPSCount	.\Screen.h	/^        LARGE_INTEGER FPSCount;$/;"	m	class:Screen
GenProjectionMatrix	.\StereoViewingFrameV2.cpp	/^void StereoViewingFrame::GenProjectionMatrix(int eyenum)$/;"	f	class:StereoViewingFrame
GetScreenPixels	.\StereoViewingFrameV2.cpp	/^void StereoViewingFrame::GetScreenPixels()$/;"	f	class:StereoViewingFrame
IDC_BUTTON1	.\resource.h	25;"	d
IDC_COMBO1	.\resource.h	19;"	d
IDC_EDIT1	.\resource.h	16;"	d
IDC_EDIT2	.\resource.h	17;"	d
IDC_EDIT3	.\resource.h	18;"	d
IDC_EDIT4	.\resource.h	22;"	d
IDC_EDIT5	.\resource.h	23;"	d
IDC_EDIT6	.\resource.h	24;"	d
IDC_EXPERIMENT	.\resource.h	13;"	d
IDC_MYICON	.\resource.h	5;"	d
IDC_RADIO1	.\resource.h	20;"	d
IDC_RADIO2	.\resource.h	21;"	d
IDC_STATIC	.\resource.h	27;"	d
IDD_ABOUTBOX	.\resource.h	8;"	d
IDD_CONFWND	.\resource.h	15;"	d
IDD_EXPERIMENT_DIALOG	.\resource.h	6;"	d
IDEXIT	.\resource.h	26;"	d
IDI_EXPERIMENT	.\resource.h	11;"	d
IDI_SMALL	.\resource.h	12;"	d
IDLE	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE, FINISHED};$/;"	e	enum:Trial::state
IDM_ABOUT	.\resource.h	9;"	d
IDM_EXIT	.\resource.h	10;"	d
IDR_MAINFRAME	.\resource.h	14;"	d
IDS_APP_TITLE	.\resource.h	7;"	d
JEFF_STEREO_VIEWING_FRAME	.\StereoViewingFrameV2.h	3;"	d
LoadFrame	.\StereoViewingFrameV2.cpp	/^bool StereoViewingFrame::LoadFrame(string filename)$/;"	f	class:StereoViewingFrame
MAIN_SCENE	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE, FINISHED};$/;"	e	enum:Trial::state
MakeProjectionMatrices	.\StereoViewingFrameV2.h	/^	void MakeProjectionMatrices()$/;"	f	class:StereoViewingFrame
MixedObjectViewScene	.\MixedObjectViewScene.cpp	/^MixedObjectViewScene::MixedObjectViewScene(void)$/;"	f	class:MixedObjectViewScene
MixedObjectViewScene	.\MixedObjectViewScene.h	/^class MixedObjectViewScene :$/;"	c
ORTHOGONAL	.\TestObject.h	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	e	enum:TestObject::enumProj2DMode
Overlapped2DViewScene	.\Overlapped2DViewScene.cpp	/^Overlapped2DViewScene::Overlapped2DViewScene(cond_t& cond):$/;"	f	class:Overlapped2DViewScene
Overlapped2DViewScene	.\Overlapped2DViewScene.h	/^class Overlapped2DViewScene :$/;"	c
POST_TRIAL_SCENE	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE, FINISHED};$/;"	e	enum:Trial::state
PRACTICE	.\experiment.h	/^enum enumExperiMode {EXPERIMENT = 0, PRACTICE = 1};$/;"	e	enum:enumExperiMode
PRE_TRIAL_SCENE	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE, FINISHED};$/;"	e	enum:Trial::state
PROJECTION	.\TestObject.h	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	e	enum:TestObject::enumProj2DMode
PostExperimentScene	.\PostExperimentScene.cpp	/^PostExperimentScene::PostExperimentScene(void)$/;"	f	class:PostExperimentScene
PostExperimentScene	.\PostExperimentScene.h	/^class PostExperimentScene :$/;"	c
PreTrialScene	.\PreTrialScene.cpp	/^PreTrialScene::PreTrialScene()$/;"	f	class:PreTrialScene
PreTrialScene	.\PreTrialScene.h	/^class PreTrialScene :$/;"	c
PureWordScene	.\PureWordScene.cpp	/^PureWordScene::PureWordScene()$/;"	f	class:PureWordScene
PureWordScene	.\PureWordScene.h	/^class PureWordScene : public Scene$/;"	c
ROTATION_TIMERID	.\Separate2D3DViewScene.h	/^        int ROTATION_TIMERID;$/;"	m	class:Separate2D3DViewScene
SWITCH_TIMERID	.\Separate2D3DViewScene.h	/^        int SWITCH_TIMERID;$/;"	m	class:Separate2D3DViewScene
SaveFrame	.\StereoViewingFrameV2.cpp	/^bool StereoViewingFrame::SaveFrame(string filename)$/;"	f	class:StereoViewingFrame
Scene	.\Scene.cpp	/^Scene::Scene():$/;"	f	class:Scene
Scene	.\Scene.h	/^class Scene$/;"	c
Screen	.\Screen.cpp	/^Screen::Screen(DEVMODE& devMode):$/;"	f	class:Screen
Screen	.\Screen.h	/^class Screen$/;"	c
Separate2D3DViewScene	.\Separate2D3DViewScene.cpp	/^Separate2D3DViewScene::Separate2D3DViewScene(cond_t& cond):$/;"	f	class:Separate2D3DViewScene
Separate2D3DViewScene	.\Separate2D3DViewScene.h	/^class Separate2D3DViewScene :$/;"	c
StereoViewingFrame	.\StereoViewingFrameV2.h	/^	StereoViewingFrame() : $/;"	f	class:StereoViewingFrame
StereoViewingFrame	.\StereoViewingFrameV2.h	/^	StereoViewingFrame(const StereoViewingFrame & vf) { *this = vf; }$/;"	f	class:StereoViewingFrame
StereoViewingFrame	.\StereoViewingFrameV2.h	/^class StereoViewingFrame$/;"	c
TestObject	.\TestObject.cpp	/^TestObject::TestObject(TestObject& rObj)$/;"	f	class:TestObject
TestObject	.\TestObject.cpp	/^TestObject::TestObject(rangeType<GLfloat>& pitchRange,$/;"	f	class:TestObject
TestObject	.\TestObject.h	/^class TestObject$/;"	c
TestObjectFactory	.\TestObjectFactory.cpp	/^TestObjectFactory::TestObjectFactory(void)$/;"	f	class:TestObjectFactory
TestObjectFactory	.\TestObjectFactory.h	/^class TestObjectFactory$/;"	c
Trial	.\Trial.cpp	/^Trial::Trial(int trialID, cond_t& cond, float minDuration):$/;"	f	class:Trial
Trial	.\Trial.h	/^class Trial$/;"	c
WGLExtensionSupported	.\Screen.cpp	/^BOOL Screen::WGLExtensionSupported(const char *extension_name)$/;"	f	class:Screen
WIN32_LEAN_AND_MEAN	.\stdafx.h	10;"	d
WINVER	.\targetver.h	11;"	d
WinMain	.\experiment.cpp	/^int APIENTRY WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance,$/;"	f
_APS_NEXT_COMMAND_VALUE	.\resource.h	35;"	d
_APS_NEXT_CONTROL_VALUE	.\resource.h	36;"	d
_APS_NEXT_RESOURCE_VALUE	.\resource.h	34;"	d
_APS_NEXT_SYMED_VALUE	.\resource.h	37;"	d
_APS_NO_MFC	.\resource.h	33;"	d
_H_CONFWND_	.\ConfWnd.h	2;"	d
_WIN32_IE	.\targetver.h	23;"	d
_WIN32_WINDOWS	.\targetver.h	19;"	d
_WIN32_WINNT	.\targetver.h	15;"	d
_currConditions	.\gBConditionsOneSecOneGroup.h	/^        vector<cond_t *> _currConditions;$/;"	m	class:gBConditionsOneSecOneGroup
_drawCylinderBody	.\CylinderObject.cpp	/^void CylinderObject::_drawCylinderBody(bool enableTexture)$/;"	f	class:CylinderObject
_duration	.\Scene.h	/^        float _duration;$/;"	m	class:Scene
_endTime	.\Scene.h	/^        LARGE_INTEGER _endTime;$/;"	m	class:Scene
_fps	.\Scene.h	/^        float _fps;$/;"	m	class:Scene
_generateAllParameterCombinations	.\CylinderFactory.cpp	/^void CylinderFactory::_generateAllParameterCombinations(vector<int>& bound,$/;"	f	class:CylinderFactory
_groupRepeatTimes	.\gBConditionsOneSecOneGroup.h	/^        vector<int> _groupRepeatTimes;$/;"	m	class:gBConditionsOneSecOneGroup
_hWnd	.\Screen.h	/^        HWND _hWnd;$/;"	m	class:Screen
_isStopConditionSatisfied	.\Separate2D3DViewScene.h	/^        inline BOOL _isStopConditionSatisfied() const $/;"	f	class:Separate2D3DViewScene
_lLastRenderTime	.\Separate2D3DViewScene.h	/^        LARGE_INTEGER _lLastRenderTime;$/;"	m	class:Separate2D3DViewScene
_minDuration	.\Scene.h	/^        float _minDuration;$/;"	m	class:Scene
_minDuration	.\Trial.h	/^        float _minDuration;$/;"	m	class:Trial
_modelCylinderBody	.\CylinderObject.cpp	/^void CylinderObject::_modelCylinderBody(int slices)$/;"	f	class:CylinderObject
_results	.\Trial.h	/^        vector<trialResult_t *> _results;$/;"	m	class:Trial
_sectionBounds	.\gBConditionsOneSecOneGroup.h	/^        vector<int> _sectionBounds;$/;"	m	class:gBConditionsOneSecOneGroup
_shuffleGroups	.\gBConditionsOneSecOneGroup.cpp	/^void gBConditionsOneSecOneGroup::_shuffleGroups(int times)$/;"	f	class:gBConditionsOneSecOneGroup
_startTime	.\Scene.h	/^        LARGE_INTEGER _startTime;$/;"	m	class:Scene
_textureFilterAnisotropicLargest	.\Screen.h	/^        GLfloat _textureFilterAnisotropicLargest;$/;"	m	class:Screen
_updateCurrentGroupID	.\gBConditionsOneSecOneGroup.cpp	/^void gBConditionsOneSecOneGroup::_updateCurrentGroupID()$/;"	f	class:gBConditionsOneSecOneGroup
_updateSectionBounds	.\gBConditionsOneSecOneGroup.cpp	/^void gBConditionsOneSecOneGroup::_updateSectionBounds()$/;"	f	class:gBConditionsOneSecOneGroup
addAllConditionsFromConstraint	.\Conditions.cpp	/^int Conditions::addAllConditionsFromConstraint(int constraintIndex)$/;"	f	class:Conditions
addCondition	.\Conditions.cpp	/^int Conditions::addCondition(cond_t* pCondition)$/;"	f	class:Conditions
addCondition	.\Conditions.cpp	/^int Conditions::addCondition(int constraintIndex)$/;"	f	class:Conditions
addConstraint	.\Conditions.cpp	/^int Conditions::addConstraint(condCons_t* pConstraint)$/;"	f	class:Conditions
adjZAsptRatio	.\TestObject.h	/^        GLfloat adjZAsptRatio;$/;"	m	class:TestObject
adjustAsptRatio	.\CylinderObject.cpp	/^BOOL CylinderObject::adjustAsptRatio(GLfloat delta)$/;"	f	class:CylinderObject
bottomTextureID	.\CylinderObject.h	/^        GLuint bottomTextureID;$/;"	m	class:CylinderObject
buildModel	.\CylinderObject.cpp	/^void CylinderObject::buildModel(void)$/;"	f	class:CylinderObject
buildString	.\PostExperimentScene.cpp	/^string PostExperimentScene::buildString()$/;"	f	class:PostExperimentScene
buildString	.\PreTrialScene.cpp	/^string PreTrialScene::buildString()$/;"	f	class:PreTrialScene
cancelKMBinds	.\Screen.cpp	/^BOOL Screen::cancelKMBinds()$/;"	f	class:Screen
centereye	.\StereoViewingFrameV2.h	/^	vector_3d centereye;$/;"	m	class:StereoViewingFrame
centerprojmatrix	.\StereoViewingFrameV2.h	/^	matrix_4x4 centerprojmatrix;$/;"	m	class:StereoViewingFrame
clear	.\Screen.cpp	/^BOOL Screen::clear()$/;"	f	class:Screen
clearConditions	.\Conditions.cpp	/^BOOL Conditions::clearConditions()$/;"	f	class:Conditions
clearConditions	.\gBConditionsOneSecAllGroups.cpp	/^BOOL gBConditionsOneSecAllGroups::clearConditions()$/;"	f	class:gBConditionsOneSecAllGroups
clearConditions	.\gBConditionsOneSecOneGroup.cpp	/^BOOL gBConditionsOneSecOneGroup::clearConditions()$/;"	f	class:gBConditionsOneSecOneGroup
clearConditions	.\groupBasedConditions.cpp	/^BOOL groupBasedConditions::clearConditions()$/;"	f	class:groupBasedConditions
closeOutputFile	.\experiment.cpp	/^BOOL Experiment::closeOutputFile()$/;"	f	class:Experiment
color	.\texture.h	/^        UINT color[3];$/;"	m	union:raw_textureStruct::__anon1
color	.\texture.h	/^        UINT color[3];$/;"	m	union:textureStruct::__anon2
colorIDs	.\Screen.h	/^        vector< vector<GLuint> > colorIDs;$/;"	m	class:Screen
condCons_t	.\ConditionConstraints.h	/^typedef struct conditionConstraints condCons_t;$/;"	t	typeref:struct:conditionConstraints
cond_t	.\Conditions.h	/^typedef struct conditionStruct cond_t;$/;"	t	typeref:struct:conditionStruct
condition	.\Overlapped2DViewScene.h	/^        cond_t& condition;$/;"	m	class:Overlapped2DViewScene
condition	.\Separate2D3DViewScene.h	/^        cond_t& condition;$/;"	m	class:Separate2D3DViewScene
condition	.\Trial.h	/^        cond_t& condition;$/;"	m	class:Trial
conditionConstraints	.\ConditionConstraints.h	/^struct conditionConstraints$/;"	s
conditionGroups	.\groupBasedConditions.h	/^        vector< vector<int> * > conditionGroups;$/;"	m	class:groupBasedConditions
conditionMode	.\experiment.h	/^        int conditionMode;$/;"	m	class:Experiment
conditionRepeatTimePerSec	.\experiment.h	/^        unsigned int conditionRepeatTimePerSec;$/;"	m	class:Experiment
conditionRepeatTimesPerSec	.\Conditions.h	/^        int conditionRepeatTimesPerSec;$/;"	m	class:Conditions
conditionStruct	.\Conditions.h	/^struct conditionStruct$/;"	s
conditions	.\Conditions.h	/^        vector<cond_t *> conditions;$/;"	m	class:Conditions
confWndProc	.\ConfWnd.cpp	/^INT_PTR CALLBACK ConfWnd::confWndProc(HWND hDlg, UINT message, UINT wParam, LONG lParam)$/;"	f	class:ConfWnd
confirmConfiguration	.\ConfWnd.cpp	/^void ConfWnd::confirmConfiguration(HWND hDlg)$/;"	f	class:ConfWnd
constraintGroupID	.\Conditions.h	/^    int constraintGroupID;$/;"	m	struct:conditionStruct
constraintGroups	.\groupBasedConditions.h	/^        vector< vector<int> * > constraintGroups;$/;"	m	class:groupBasedConditions
constraintID	.\Conditions.h	/^    int constraintID;$/;"	m	struct:conditionStruct
constraints	.\Conditions.h	/^        vector<condCons_t *> constraints;$/;"	m	class:Conditions
convert_grayscale	.\textures\convert_grayscale.m	/^function [ converted_img ] = convert_grayscale( img )$/;"	f
createAllObjects	.\CylinderFactory.cpp	/^vector<TestObject *> CylinderFactory::createAllObjects(condCons_t& constraint, vector<texture_t *>& textures)$/;"	f	class:CylinderFactory
createObject	.\CylinderFactory.cpp	/^TestObject* CylinderFactory::createObject(condCons_t& constraint, vector<texture_t *>& textures)$/;"	f	class:CylinderFactory
currGroupID	.\gBConditionsOneSecOneGroup.h	/^        int currGroupID;$/;"	m	class:gBConditionsOneSecOneGroup
currRotDeg	.\TestObject.h	/^        GLfloat currRotDeg;$/;"	m	class:TestObject
currScene	.\Scene.cpp	/^Scene *Scene::currScene;$/;"	m	class:Scene	file:
currScene	.\Scene.h	/^        static Scene *currScene;$/;"	m	class:Scene
currSecNo	.\experiment.h	/^        unsigned int currSecNo;$/;"	m	class:Experiment
currSection	.\gBConditionsOneSecOneGroup.h	/^        int currSection;$/;"	m	class:gBConditionsOneSecOneGroup
currState	.\Trial.h	/^        enum state currState;$/;"	m	class:Trial	typeref:enum:Trial::state
currStatus	.\Separate2D3DViewScene.h	/^        sepSceneStatus_t currStatus;$/;"	m	class:Separate2D3DViewScene
currTrialID	.\experiment.h	/^        unsigned int currTrialID;$/;"	m	class:Experiment
cylinderBodyCoordIndices	.\CylinderObject.h	/^        vector<UINT> cylinderBodyCoordIndices;$/;"	m	class:CylinderObject
cylinderBodyCoords	.\CylinderObject.h	/^        vector<GLfloat> cylinderBodyCoords;$/;"	m	class:CylinderObject
cylinderBodyTexCoords	.\CylinderObject.h	/^        vector<GLfloat> cylinderBodyTexCoords;$/;"	m	class:CylinderObject
cylinderParameterReadingFunction	.\Conditions.cpp	/^BOOL Conditions::cylinderParameterReadingFunction(ifstream& fin, condCons_t& constraint, int constraintID)$/;"	f	class:Conditions
debug	.\experiment.cpp	/^int const Experiment::debug = 0;$/;"	m	class:Experiment	file:
debug	.\experiment.h	/^        static const int debug;$/;"	m	class:Experiment
defaultRotDirection	.\TestObject.h	/^        enumRotDirection defaultRotDirection;$/;"	m	class:TestObject
devMode	.\ConfWnd.h	/^        DEVMODE devMode;$/;"	m	class:ConfWnd
devMode	.\experiment.h	/^        DEVMODE devMode; \/\/ display settings$/;"	m	class:Experiment
dispMode	.\ConditionConstraints.h	/^    displayMode_t dispMode;$/;"	m	struct:conditionConstraints
dispMode	.\Conditions.h	/^    displayMode_t dispMode;$/;"	m	struct:conditionStruct
dispatchKeyboardEvent	.\Scene.cpp	/^void Scene::dispatchKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:Scene
dispatchKeyboardSpecialEvent	.\Scene.cpp	/^void Scene::dispatchKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:Scene
dispatchMouseEvent	.\Scene.cpp	/^void Scene::dispatchMouseEvent(int button, int state, int x, int y)$/;"	f	class:Scene
dispatchMouseMotionEvent	.\Scene.cpp	/^void Scene::dispatchMouseMotionEvent(int x, int y)$/;"	f	class:Scene
dispatchMousePassiveMotionEvent	.\Scene.cpp	/^void Scene::dispatchMousePassiveMotionEvent(int x, int y)$/;"	f	class:Scene
dispatchReshape	.\Scene.cpp	/^void Scene::dispatchReshape(int w, int h)$/;"	f	class:Scene
dispatchSceneRender	.\Scene.cpp	/^void Scene::dispatchSceneRender()$/;"	f	class:Scene
dispatchTimerEvent	.\Scene.cpp	/^void Scene::dispatchTimerEvent(int timerID)$/;"	f	class:Scene
displayConfWnd	.\ConfWnd.cpp	/^INT_PTR ConfWnd::displayConfWnd(HINSTANCE ghInstance)$/;"	f	class:ConfWnd
displayMode	.\Screen.h	/^        UINT displayMode;$/;"	m	class:Screen
displayMode_t	.\ConditionConstraints.h	/^typedef enum DisplayMode displayMode_t;$/;"	t	typeref:enum:DisplayMode
displayString	.\Screen.cpp	/^BOOL Screen::displayString(string str, float x, float y)$/;"	f	class:Screen
disposeSystem	.\experiment.cpp	/^BOOL Experiment::disposeSystem()$/;"	f	class:Experiment
draw	.\CylinderObject.cpp	/^void CylinderObject::draw(int drawStyle,$/;"	f	class:CylinderObject
draw2D	.\CylinderObject.cpp	/^void CylinderObject::draw2D(int drawStyle,$/;"	f	class:CylinderObject
duration	.\Trial.h	/^    const float duration;$/;"	m	struct:trialResult_struct
enumExperiMode	.\experiment.h	/^enum enumExperiMode {EXPERIMENT = 0, PRACTICE = 1};$/;"	g
enumProj2DMode	.\TestObject.h	/^        enum enumProj2DMode {ORTHOGONAL, PROJECTION};$/;"	g	class:TestObject
enumRotDirection	.\TestObject.h	/^enum enumRotDirection {CLOCKWISE, COUNTERCLOCKWISE};$/;"	g
experiMode	.\ConfWnd.h	/^        enumExperiMode experiMode; \/\/ 0 -- experiment mode; 1 -- practice mode;$/;"	m	class:ConfWnd
experiMode	.\experiment.h	/^        enumExperiMode experiMode; \/\/ 0 -- experiment mode; 1 -- practice mode;$/;"	m	class:Experiment
experimentConditions	.\experiment.h	/^        Conditions *experimentConditions; $/;"	m	class:Experiment
finished	.\Trial.h	/^        BOOL finished;$/;"	m	class:Trial
fps	.\Screen.h	/^        float fps;$/;"	m	class:Screen
fps	.\Trial.h	/^    const float fps;$/;"	m	struct:trialResult_struct
frame_set	.\StereoViewingFrameV2.h	/^	bool frame_set; \/\/ flag for checking if calibrated$/;"	m	class:StereoViewingFrame
gBConditionsOneSecAllGroups	.\gBConditionsOneSecAllGroups.cpp	/^gBConditionsOneSecAllGroups::gBConditionsOneSecAllGroups(ifstream& rFin, int numConditions,$/;"	f	class:gBConditionsOneSecAllGroups
gBConditionsOneSecAllGroups	.\gBConditionsOneSecAllGroups.cpp	/^gBConditionsOneSecAllGroups::gBConditionsOneSecAllGroups(ifstream& rFin,$/;"	f	class:gBConditionsOneSecAllGroups
gBConditionsOneSecAllGroups	.\gBConditionsOneSecAllGroups.h	/^class gBConditionsOneSecAllGroups :$/;"	c
gBConditionsOneSecOneGroup	.\gBConditionsOneSecOneGroup.cpp	/^gBConditionsOneSecOneGroup::gBConditionsOneSecOneGroup(ifstream& rFin, int numConditions,$/;"	f	class:gBConditionsOneSecOneGroup
gBConditionsOneSecOneGroup	.\gBConditionsOneSecOneGroup.cpp	/^gBConditionsOneSecOneGroup::gBConditionsOneSecOneGroup(ifstream& rFin,$/;"	f	class:gBConditionsOneSecOneGroup
gBConditionsOneSecOneGroup	.\gBConditionsOneSecOneGroup.h	/^class gBConditionsOneSecOneGroup :$/;"	c
genDesc	.\ConditionConstraints.h	/^    string genDesc()$/;"	f	struct:conditionConstraints
genDescTitle	.\ConditionConstraints.h	/^    string genDescTitle()$/;"	f	struct:conditionConstraints
genObjDesc	.\CylinderObject.cpp	/^string CylinderObject::genObjDesc()$/;"	f	class:CylinderObject
genObjDesc	.\TestObject.cpp	/^string TestObject::genObjDesc()$/;"	f	class:TestObject
genObjDescTitle	.\CylinderObject.cpp	/^string CylinderObject::genObjDescTitle()$/;"	f	class:CylinderObject
genObjDescTitle	.\TestObject.cpp	/^string TestObject::genObjDescTitle()$/;"	f	class:TestObject
genObjPara	.\CylinderObject.cpp	/^string CylinderObject::genObjPara()$/;"	f	class:CylinderObject
genObjPara	.\TestObject.cpp	/^string TestObject::genObjPara()$/;"	f	class:TestObject
genObjParaTitle	.\CylinderObject.cpp	/^string CylinderObject::genObjParaTitle()$/;"	f	class:CylinderObject
genObjParaTitle	.\TestObject.cpp	/^string TestObject::genObjParaTitle()$/;"	f	class:TestObject
generateAllConditions	.\Conditions.cpp	/^BOOL Conditions::generateAllConditions()$/;"	f	class:Conditions
generateAllConditions	.\gBConditionsOneSecOneGroup.cpp	/^BOOL gBConditionsOneSecOneGroup::generateAllConditions()$/;"	f	class:gBConditionsOneSecOneGroup
generateAllConditions	.\groupBasedConditions.cpp	/^BOOL groupBasedConditions::generateAllConditions()$/;"	f	class:groupBasedConditions
generateConditions	.\Conditions.cpp	/^BOOL Conditions::generateConditions()$/;"	f	class:Conditions
generateConditions	.\gBConditionsOneSecOneGroup.cpp	/^BOOL gBConditionsOneSecOneGroup::generateConditions()$/;"	f	class:gBConditionsOneSecOneGroup
generateConditions	.\groupBasedConditions.cpp	/^BOOL groupBasedConditions::generateConditions()$/;"	f	class:groupBasedConditions
getAllConditions	.\Conditions.cpp	/^const vector<cond_t *>& Conditions::getAllConditions()$/;"	f	class:Conditions
getAllConditions	.\gBConditionsOneSecAllGroups.cpp	/^const vector<cond_t *>& gBConditionsOneSecAllGroups::getAllConditions()$/;"	f	class:gBConditionsOneSecAllGroups
getAllConditions	.\gBConditionsOneSecOneGroup.cpp	/^const vector<cond_t *>& gBConditionsOneSecOneGroup::getAllConditions()$/;"	f	class:gBConditionsOneSecOneGroup
getAllConstraints	.\Conditions.cpp	/^const vector<condCons_t *>& Conditions::getAllConstraints()$/;"	f	class:Conditions
getCounterFrequency	.\Screen.h	/^        inline const LARGE_INTEGER& getCounterFrequency() {return this->CounterFrequency;}$/;"	f	class:Screen
getDuration	.\Scene.h	/^        inline const float getDuration() const {return this->_duration;}$/;"	f	class:Scene
getFPS	.\Screen.cpp	/^float Screen::getFPS()$/;"	f	class:Screen
getFps	.\Scene.h	/^        inline const float getFps() const {return this->_fps; }$/;"	f	class:Scene
getFreeTimerID	.\Scene.cpp	/^int Scene::getFreeTimerID()$/;"	f	class:Scene
getInstance	.\ConfWnd.cpp	/^ConfWnd* ConfWnd::getInstance()$/;"	f	class:ConfWnd
getInstance	.\experiment.cpp	/^Experiment *Experiment::getInstance(HINSTANCE hInstance)$/;"	f	class:Experiment
getObjID	.\CylinderObject.cpp	/^UINT CylinderObject::getObjID()$/;"	f	class:CylinderObject
getObjName	.\CylinderObject.cpp	/^string CylinderObject::getObjName(void)$/;"	f	class:CylinderObject
getProductName	.\CylinderFactory.cpp	/^const string CylinderFactory::getProductName()$/;"	f	class:CylinderFactory
getRandomValue	.\rangeType.h	/^T rangeType<T>::getRandomValue()$/;"	f	class:rangeType
getTotalSectionNo	.\gBConditionsOneSecOneGroup.h	/^        inline int getTotalSectionNo() {return accumulate(_groupRepeatTimes.begin(), _groupRepeatTimes.end(), 0);}$/;"	f	class:gBConditionsOneSecOneGroup
groupBasedConditions	.\groupBasedConditions.cpp	/^groupBasedConditions::groupBasedConditions(ifstream& rFin, int numConditions,$/;"	f	class:groupBasedConditions
groupBasedConditions	.\groupBasedConditions.cpp	/^groupBasedConditions::groupBasedConditions(ifstream& rFin,$/;"	f	class:groupBasedConditions
groupBasedConditions	.\groupBasedConditions.h	/^class groupBasedConditions :$/;"	c
groupID	.\ConditionConstraints.h	/^    int groupID;$/;"	m	struct:conditionConstraints
hBitmap	.\texture.h	/^        HBITMAP hBitmap;$/;"	m	union:raw_textureStruct::__anon1
hFileOut	.\experiment.h	/^        fstream hFileOut;$/;"	m	class:Experiment
hInst	.\experiment.cpp	/^HINSTANCE Experiment::hInst = NULL;$/;"	m	class:Experiment	file:
hInst	.\experiment.h	/^        static HINSTANCE hInst;$/;"	m	class:Experiment
hWnd	.\Screen.h	/^        inline const HWND hWnd() {return this->_hWnd;}$/;"	f	class:Screen
handleKeyboardEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:Overlapped2DViewScene
handleKeyboardEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:PostExperimentScene
handleKeyboardEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:PreTrialScene
handleKeyboardEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleKeyboardEvent(unsigned char key, int x, int y)$/;"	f	class:Separate2D3DViewScene
handleKeyboardSpecialEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:Overlapped2DViewScene
handleKeyboardSpecialEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:PostExperimentScene
handleKeyboardSpecialEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:PreTrialScene
handleKeyboardSpecialEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleKeyboardSpecialEvent(int key, int x, int y)$/;"	f	class:Separate2D3DViewScene
handleMouseEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:Overlapped2DViewScene
handleMouseEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:PostExperimentScene
handleMouseEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:PreTrialScene
handleMouseEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleMouseEvent(int button, int state, int x, int y)$/;"	f	class:Separate2D3DViewScene
handleMouseMotionEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:Overlapped2DViewScene
handleMouseMotionEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:PostExperimentScene
handleMouseMotionEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:PreTrialScene
handleMouseMotionEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleMouseMotionEvent(int x, int y)$/;"	f	class:Separate2D3DViewScene
handleMousePassiveMotionEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:Overlapped2DViewScene
handleMousePassiveMotionEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:PostExperimentScene
handleMousePassiveMotionEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:PreTrialScene
handleMousePassiveMotionEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleMousePassiveMotionEvent(int x, int y)$/;"	f	class:Separate2D3DViewScene
handleTimerEvent	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::handleTimerEvent(int timerID)$/;"	f	class:Overlapped2DViewScene
handleTimerEvent	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::handleTimerEvent(int timerID)$/;"	f	class:PostExperimentScene
handleTimerEvent	.\PreTrialScene.cpp	/^BOOL PreTrialScene::handleTimerEvent(int timerID)$/;"	f	class:PreTrialScene
handleTimerEvent	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::handleTimerEvent(int timerID)$/;"	f	class:Separate2D3DViewScene
height	.\TestObject.h	/^        GLfloat height;$/;"	m	class:TestObject
heightRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> heightRange;$/;"	m	struct:conditionConstraints
heightRange	.\TestObject.h	/^        rangeType<GLfloat> heightRange;$/;"	m	class:TestObject
iFrames	.\Screen.h	/^        int iFrames;$/;"	m	class:Screen
id	.\ConditionConstraints.h	/^    int id;$/;"	m	struct:conditionConstraints
initConditions	.\Conditions.cpp	/^BOOL Conditions::initConditions()$/;"	f	class:Conditions
initConditions	.\gBConditionsOneSecAllGroups.cpp	/^BOOL gBConditionsOneSecAllGroups::initConditions()$/;"	f	class:gBConditionsOneSecAllGroups
initConditions	.\gBConditionsOneSecOneGroup.cpp	/^BOOL gBConditionsOneSecOneGroup::initConditions()$/;"	f	class:gBConditionsOneSecOneGroup
initConditions	.\groupBasedConditions.cpp	/^BOOL groupBasedConditions::initConditions()$/;"	f	class:groupBasedConditions
initDisplay	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::initDisplay()$/;"	f	class:Overlapped2DViewScene
initDisplay	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::initDisplay()$/;"	f	class:PostExperimentScene
initDisplay	.\PreTrialScene.cpp	/^BOOL PreTrialScene::initDisplay()$/;"	f	class:PreTrialScene
initDisplay	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::initDisplay()$/;"	f	class:Separate2D3DViewScene
initGlut	.\Screen.cpp	/^BOOL Screen::initGlut(UINT displayMode, string title)$/;"	f	class:Screen
initOutputFile	.\experiment.cpp	/^BOOL Experiment::initOutputFile()$/;"	f	class:Experiment
initSystem	.\experiment.cpp	/^BOOL Experiment::initSystem()$/;"	f	class:Experiment
initTextures	.\Screen.cpp	/^BOOL Screen::initTextures(vector<rTexture_t *>& textures)$/;"	f	class:Screen
initZAsptRatio	.\TestObject.h	/^        GLfloat initZAsptRatio;$/;"	m	class:TestObject
initZAsptRatioRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> initZAsptRatioRange;$/;"	m	struct:conditionConstraints
initZAsptRatioRange	.\TestObject.h	/^        rangeType<GLfloat> initZAsptRatioRange;$/;"	m	class:TestObject
isNewSection	.\experiment.cpp	/^BOOL Experiment::isNewSection()$/;"	f	class:Experiment
isRegisteredTimer	.\Scene.cpp	/^BOOL Scene::isRegisteredTimer(int timerID)$/;"	f	class:Scene
lastFreeTimerID	.\Scene.cpp	/^int Scene::lastFreeTimerID = 0;$/;"	m	class:Scene	file:
lastFreeTimerID	.\Scene.h	/^        static int lastFreeTimerID;$/;"	m	class:Scene
lefteye	.\StereoViewingFrameV2.h	/^	vector_3d lefteye;$/;"	m	class:StereoViewingFrame
leftprojmatrix	.\StereoViewingFrameV2.h	/^	matrix_4x4 leftprojmatrix;$/;"	m	class:StereoViewingFrame
leftscreenrot	.\StereoViewingFrameV2.h	/^	double leftscreenrot;$/;"	m	class:StereoViewingFrame
leftscreenshift	.\StereoViewingFrameV2.h	/^	vector_3d leftscreenshift;$/;"	m	class:StereoViewingFrame
m_pInstance	.\ConfWnd.cpp	/^auto_ptr<ConfWnd> ConfWnd::m_pInstance;$/;"	m	class:ConfWnd	file:
m_pInstance	.\ConfWnd.h	/^        static auto_ptr<ConfWnd> m_pInstance;$/;"	m	class:ConfWnd
m_pInstance	.\experiment.cpp	/^auto_ptr<Experiment> Experiment::m_pInstance;$/;"	m	class:Experiment	file:
m_pInstance	.\experiment.h	/^        static auto_ptr<Experiment> m_pInstance;$/;"	m	class:Experiment
m_secNo	.\ConfWnd.h	/^        string m_secNo;$/;"	m	class:ConfWnd
matrix_4x4	.\StereoViewingFrameV2.h	/^typedef cml::matrix<double, cml::fixed<4,4>, cml::col_basis> matrix_4x4;$/;"	t
maxRotDeg	.\TestObject.h	/^        GLfloat maxRotDeg;$/;"	m	class:TestObject
maxRotDegRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> maxRotDegRange;$/;"	m	struct:conditionConstraints
maxRotDegRange	.\TestObject.h	/^        rangeType<GLfloat> maxRotDegRange;$/;"	m	class:TestObject
maxSecNo	.\ConfWnd.h	/^        unsigned int maxSecNo;$/;"	m	class:ConfWnd
maxSecNo	.\experiment.h	/^        unsigned int maxSecNo;$/;"	m	class:Experiment
minDurationForEachTrial	.\experiment.h	/^        float minDurationForEachTrial;$/;"	m	class:Experiment
name	.\texture.h	/^    string name;$/;"	m	struct:raw_textureStruct
name	.\texture.h	/^    string name;$/;"	m	struct:textureStruct
newObj	.\CylinderObject.cpp	/^TestObject *CylinderObject::newObj(TestObject &rObject)$/;"	f	class:CylinderObject
nullTimerFunc	.\Screen.cpp	/^void Screen::nullTimerFunc(int timerID)$/;"	f	class:Screen
numConditions	.\Conditions.h	/^        int numConditions;$/;"	m	class:Conditions
numGroups	.\groupBasedConditions.h	/^        int numGroups;$/;"	m	class:groupBasedConditions
numSections	.\Conditions.h	/^        int numSections;$/;"	m	class:Conditions
objName	.\CylinderObject.h	/^        string objName;$/;"	m	class:CylinderObject
objName	.\TestObject.h	/^        string objName;$/;"	m	class:TestObject
objectFactories	.\Conditions.h	/^        vector<TestObjectFactory *>& objectFactories;$/;"	m	class:Conditions
objectFactories	.\experiment.h	/^        vector<TestObjectFactory *> objectFactories;$/;"	m	class:Experiment
objectFactoryNameMap	.\Conditions.h	/^        hash_map<string, TestObjectFactory *> objectFactoryNameMap;$/;"	m	class:Conditions
objectID	.\CylinderObject.cpp	/^const UINT CylinderObject::objectID = 1;$/;"	m	class:CylinderObject	file:
objectID	.\CylinderObject.h	/^        static const UINT objectID;$/;"	m	class:CylinderObject
objectID	.\TestObject.cpp	/^const UINT TestObject::objectID = 0;$/;"	m	class:TestObject	file:
objectID	.\TestObject.h	/^        static const UINT objectID;$/;"	m	class:TestObject
objectNames	.\ConditionConstraints.h	/^    vector<string> objectNames;$/;"	m	struct:conditionConstraints
onSampleFPS	.\Screen.h	/^        BOOL onSampleFPS;$/;"	m	class:Screen
operator <<	.\ConditionConstraints.h	/^    friend ostream& operator<<(ostream& os, timeStructForDiscreteCase& rtime)$/;"	f	class:timeStructForDiscreteCase
operator <<	.\rangeType.h	/^        friend ostream& operator<<(ostream& os, rangeType<T>& rt)$/;"	f	class:rangeType
operator =	.\StereoViewingFrameV2.cpp	/^const StereoViewingFrame & StereoViewingFrame::operator=(const StereoViewingFrame & vf)$/;"	f	class:StereoViewingFrame
operator []	.\Conditions.cpp	/^cond_t& Conditions::operator[](int &rhs)$/;"	f	class:Conditions
operator []	.\gBConditionsOneSecAllGroups.cpp	/^cond_t& gBConditionsOneSecAllGroups::operator[](int &rhs)$/;"	f	class:gBConditionsOneSecAllGroups
operator []	.\gBConditionsOneSecOneGroup.cpp	/^cond_t& gBConditionsOneSecOneGroup::operator[](int &rhs)$/;"	f	class:gBConditionsOneSecOneGroup
outFilename	.\ConfWnd.h	/^        string outFilename;$/;"	m	class:ConfWnd
outFilename	.\experiment.h	/^        string outFilename;$/;"	m	class:Experiment
overallFin	.\Conditions.h	/^        ifstream& overallFin;$/;"	m	class:Conditions
pRealObject	.\Conditions.h	/^    TestObject *pRealObject; \/\/ Store the real object's pointer here$/;"	m	struct:conditionStruct
pScreen	.\experiment.h	/^        Screen  *pScreen;$/;"	m	class:Experiment
pitch	.\TestObject.h	/^        GLfloat pitch;$/;"	m	class:TestObject
pitchRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> pitchRange;$/;"	m	struct:conditionConstraints
pitchRange	.\TestObject.h	/^        rangeType<GLfloat> pitchRange;$/;"	m	class:TestObject
pixelbottom	.\StereoViewingFrameV2.h	/^	unsigned int pixelbottom;$/;"	m	class:StereoViewingFrame
pixelleft	.\StereoViewingFrameV2.h	/^	unsigned int pixelleft;$/;"	m	class:StereoViewingFrame
pixelright	.\StereoViewingFrameV2.h	/^	unsigned int pixelright;$/;"	m	class:StereoViewingFrame
pixeltop	.\StereoViewingFrameV2.h	/^	unsigned int pixeltop;$/;"	m	class:StereoViewingFrame
printReadRangeError	.\Conditions.cpp	/^void Conditions::printReadRangeError(string name, int constraintID)$/;"	f	class:Conditions
proceedExperiment	.\experiment.cpp	/^BOOL Experiment::proceedExperiment()$/;"	f	class:Experiment
proceedNextScene	.\Trial.cpp	/^BOOL Trial::proceedNextScene()$/;"	f	class:Trial
productName	.\CylinderFactory.h	/^        string productName;$/;"	m	class:CylinderFactory
productName	.\TestObjectFactory.h	/^        string productName;$/;"	m	class:TestObjectFactory
proj2DMode	.\TestObject.h	/^        enumProj2DMode proj2DMode;$/;"	m	class:TestObject
rDevMode	.\Screen.h	/^        DEVMODE &rDevMode;$/;"	m	class:Screen
rScreen	.\Conditions.h	/^        Screen& rScreen;$/;"	m	class:Conditions
rScreen	.\Scene.h	/^        Screen& rScreen;$/;"	m	class:Scene
rTexture_t	.\texture.h	/^typedef struct raw_textureStruct rTexture_t;$/;"	t	typeref:struct:raw_textureStruct
radius	.\CylinderObject.h	/^        GLfloat radius;$/;"	m	class:CylinderObject
radiusRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> radiusRange;$/;"	m	struct:conditionConstraints
radiusRange	.\CylinderObject.h	/^        rangeType<GLfloat> radiusRange;$/;"	m	class:CylinderObject
range	.\rangeType.h	/^        vector<T> range;$/;"	m	class:rangeType
rangeType	.\rangeType.h	/^class rangeType$/;"	c
rangeType	.\rangeType.h	/^rangeType<T>::rangeType(void)$/;"	f	class:rangeType
raw_textureStruct	.\texture.h	/^struct raw_textureStruct$/;"	s
readConstraints	.\Conditions.cpp	/^BOOL Conditions::readConstraints(ifstream& fin, vector<condCons_t *>& rConstraints)$/;"	f	class:Conditions
readRange	.\Conditions.cpp	/^BOOL Conditions::readRange(ifstream& fin, rangeType<T>& vec)$/;"	f	class:Conditions
readTextures	.\Conditions.cpp	/^BOOL Conditions::readTextures(ifstream& fin)$/;"	f	class:Conditions
recordConfigurations	.\experiment.cpp	/^BOOL Experiment::recordConfigurations()$/;"	f	class:Experiment
recordConstraints	.\experiment.cpp	/^BOOL Experiment::recordConstraints()$/;"	f	class:Experiment
recordTrialInfo	.\Trial.cpp	/^BOOL Trial::recordTrialInfo()$/;"	f	class:Trial
registerTimer	.\Scene.cpp	/^int Scene::registerTimer()$/;"	f	class:Scene
registeredTimerID	.\Scene.cpp	/^hash_map<int, BOOL> Scene::registeredTimerID;$/;"	m	class:Scene	file:
registeredTimerID	.\Scene.h	/^        static hash_map<int, BOOL> registeredTimerID;$/;"	m	class:Scene
render	.\Screen.cpp	/^void Screen::render()$/;"	f	class:Screen
renderScene	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::renderScene()$/;"	f	class:Overlapped2DViewScene
renderScene	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::renderScene()$/;"	f	class:PostExperimentScene
renderScene	.\PreTrialScene.cpp	/^BOOL PreTrialScene::renderScene()$/;"	f	class:PreTrialScene
renderScene	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::renderScene()$/;"	f	class:Separate2D3DViewScene
repeatTime	.\Conditions.h	/^    int repeatTime; \/\/ the times that the condition need to be repeated in one section$/;"	m	struct:conditionStruct
reset	.\Conditions.cpp	/^void cond_t::reset()$/;"	f	class:cond_t
reset	.\Scene.cpp	/^void Scene::reset()$/;"	f	class:Scene
reset	.\TestObject.cpp	/^void TestObject::reset()$/;"	f	class:TestObject
resetAllFunc	.\Screen.cpp	/^BOOL Screen::resetAllFunc()$/;"	f	class:Screen
reshape	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::reshape(int w, int h)$/;"	f	class:Overlapped2DViewScene
reshape	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::reshape(int w, int h)$/;"	f	class:PostExperimentScene
reshape	.\PreTrialScene.cpp	/^BOOL PreTrialScene::reshape(int w, int h)$/;"	f	class:PreTrialScene
reshape	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::reshape(int w, int h)$/;"	f	class:Separate2D3DViewScene
reverseRotDirection	.\TestObject.cpp	/^void TestObject::reverseRotDirection()$/;"	f	class:TestObject
righteye	.\StereoViewingFrameV2.h	/^	vector_3d righteye;$/;"	m	class:StereoViewingFrame
rightprojmatrix	.\StereoViewingFrameV2.h	/^	matrix_4x4 rightprojmatrix;$/;"	m	class:StereoViewingFrame
rightscreenrot	.\StereoViewingFrameV2.h	/^	double rightscreenrot;$/;"	m	class:StereoViewingFrame
rightscreenshift	.\StereoViewingFrameV2.h	/^	vector_3d rightscreenshift;$/;"	m	class:StereoViewingFrame
roll	.\TestObject.h	/^        GLfloat roll;$/;"	m	class:TestObject
rollRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> rollRange;$/;"	m	struct:conditionConstraints
rollRange	.\TestObject.h	/^        rangeType<GLfloat> rollRange;$/;"	m	class:TestObject
rotDirection	.\TestObject.h	/^        enumRotDirection rotDirection;$/;"	m	class:TestObject
rotSpeed	.\TestObject.h	/^        GLfloat rotSpeed;$/;"	m	class:TestObject
rotSpeedRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> rotSpeedRange;$/;"	m	struct:conditionConstraints
rotSpeedRange	.\TestObject.h	/^        rangeType<GLfloat> rotSpeedRange;$/;"	m	class:TestObject
rotate	.\TestObject.cpp	/^void TestObject::rotate()$/;"	f	class:TestObject
rotate	.\TestObject.cpp	/^void TestObject::rotate(GLfloat degree)$/;"	f	class:TestObject
ruleKeywords	.\ConfWnd.cpp	/^const string ConfWnd::ruleKeywords[] = {"\/SID\/", "\/Date\/", "\/Time\/"};$/;"	m	class:ConfWnd	file:
ruleKeywords	.\ConfWnd.h	/^        static const string ruleKeywords[];$/;"	m	class:ConfWnd
ruleKeywordsNo	.\ConfWnd.cpp	/^const int ConfWnd::ruleKeywordsNo = 3;$/;"	m	class:ConfWnd	file:
ruleKeywordsNo	.\ConfWnd.h	/^        static const int ruleKeywordsNo;$/;"	m	class:ConfWnd
run	.\Screen.cpp	/^BOOL Screen::run()$/;"	f	class:Screen
screencoords	.\StereoViewingFrameV2.h	/^	cml::vector< double, cml::fixed<6> > screencoords;$/;"	m	class:StereoViewingFrame
secBlackScreen	.\ConditionConstraints.h	/^    float secBlackScreen; \/\/ seconds for displaying black screen$/;"	m	class:timeStructForDiscreteCase
secBlackScreen	.\Conditions.h	/^    float secBlackScreen; \/\/ seconds for displaying black screen$/;"	m	struct:conditionStruct
secDisplay	.\ConditionConstraints.h	/^    float secDisplay; \/\/ seconds for displaying object$/;"	m	class:timeStructForDiscreteCase
secDisplay	.\Conditions.h	/^    float secDisplay; \/\/ seconds for displaying object$/;"	m	struct:conditionStruct
sepSceneStatus	.\Separate2D3DViewScene.h	/^        enum sepSceneStatus {DISPLAY_OBJECT, DISPLAY_BLACKSCREEN};$/;"	g	class:Separate2D3DViewScene
sepSceneStatus_t	.\Separate2D3DViewScene.h	/^        typedef enum sepSceneStatus sepSceneStatus_t;$/;"	t	class:Separate2D3DViewScene	typeref:enum:Separate2D3DViewScene::sepSceneStatus
setDisplayFunc	.\Screen.cpp	/^BOOL Screen::setDisplayFunc(void (*displayFunc)(void))$/;"	f	class:Screen
setIdleFunc	.\Screen.cpp	/^BOOL Screen::setIdleFunc(void (*func)(void))$/;"	f	class:Screen
setKeyboardFunc	.\Screen.cpp	/^BOOL Screen::setKeyboardFunc(void (*func)(unsigned char key, int x, int y))$/;"	f	class:Screen
setKeyboardSpecialFunc	.\Screen.cpp	/^BOOL Screen::setKeyboardSpecialFunc(void (*func)(int key, int x, int y))$/;"	f	class:Screen
setMinDuration	.\Scene.h	/^        inline void setMinDuration(float minDuration) {this->_minDuration = minDuration;}$/;"	f	class:Scene
setMouseFunc	.\Screen.cpp	/^BOOL Screen::setMouseFunc(void (*func)(int button, int state, int x, int y))$/;"	f	class:Screen
setMouseMotionFunc	.\Screen.cpp	/^BOOL Screen::setMouseMotionFunc(void (*func)(int x, int y))$/;"	f	class:Screen
setMousePassiveMotionFunc	.\Screen.cpp	/^BOOL Screen::setMousePassiveMotionFunc(void (*func)(int x, int y))$/;"	f	class:Screen
setRandPara	.\CylinderObject.cpp	/^void CylinderObject::setRandPara()$/;"	f	class:CylinderObject
setRandPara	.\TestObject.cpp	/^void TestObject::setRandPara()$/;"	f	class:TestObject
setReshapeFunc	.\Screen.cpp	/^BOOL Screen::setReshapeFunc(void (*func)(int w, int h))$/;"	f	class:Screen
setTimerFunc	.\Screen.cpp	/^BOOL Screen::setTimerFunc(unsigned int msecs, void (*func)(int timerID), int timerID)$/;"	f	class:Screen
shuffleConditions	.\Conditions.cpp	/^void Conditions::shuffleConditions(int times)$/;"	f	class:Conditions
shuffleConditions	.\gBConditionsOneSecAllGroups.cpp	/^void gBConditionsOneSecAllGroups::shuffleConditions(int times)$/;"	f	class:gBConditionsOneSecAllGroups
shuffleConditions	.\gBConditionsOneSecOneGroup.cpp	/^void gBConditionsOneSecOneGroup::shuffleConditions(int times)$/;"	f	class:gBConditionsOneSecOneGroup
shuffledConditions	.\gBConditionsOneSecAllGroups.h	/^        vector<cond_t *> shuffledConditions;$/;"	m	class:gBConditionsOneSecAllGroups
sideTextureID	.\CylinderObject.h	/^        GLuint sideTextureID;$/;"	m	class:CylinderObject
startProgram	.\experiment.cpp	/^BOOL Experiment::startProgram()$/;"	f	class:Experiment
startSampleFPS	.\Screen.cpp	/^BOOL Screen::startSampleFPS()$/;"	f	class:Screen
startScene	.\Overlapped2DViewScene.cpp	/^BOOL Overlapped2DViewScene::startScene()$/;"	f	class:Overlapped2DViewScene
startScene	.\PostExperimentScene.cpp	/^BOOL PostExperimentScene::startScene()$/;"	f	class:PostExperimentScene
startScene	.\PreTrialScene.cpp	/^BOOL PreTrialScene::startScene()$/;"	f	class:PreTrialScene
startScene	.\Separate2D3DViewScene.cpp	/^BOOL Separate2D3DViewScene::startScene()$/;"	f	class:Separate2D3DViewScene
startTrial	.\Trial.cpp	/^BOOL Trial::startTrial()$/;"	f	class:Trial
state	.\Trial.h	/^        enum state {IDLE, PRE_TRIAL_SCENE, MAIN_SCENE, POST_TRIAL_SCENE, FINISHED};$/;"	g	class:Trial
status	.\Scene.h	/^        BOOL status;$/;"	m	class:Scene
stepSection	.\gBConditionsOneSecOneGroup.h	/^        inline void stepSection() {this->currSection ++;}$/;"	f	class:gBConditionsOneSecOneGroup
stereoFrame	.\Screen.h	/^        StereoViewingFrame stereoFrame;$/;"	m	class:Screen
stopSampleFPS	.\Screen.cpp	/^BOOL Screen::stopSampleFPS()$/;"	f	class:Screen
stopped	.\Screen.h	/^        BOOL stopped;$/;"	m	class:Screen
strDate	.\ConfWnd.h	/^        string strDate;$/;"	m	class:ConfWnd
strDate	.\experiment.h	/^        string strDate;$/;"	m	class:Experiment
strTime	.\ConfWnd.h	/^        string strTime;$/;"	m	class:ConfWnd
strTime	.\experiment.h	/^        string strTime;$/;"	m	class:Experiment
subjectID	.\ConfWnd.h	/^        string subjectID;$/;"	m	class:ConfWnd
subjectID	.\experiment.h	/^        string subjectID;$/;"	m	class:Experiment
testRenderScene	.\Screen.cpp	/^void Screen::testRenderScene()$/;"	f	class:Screen
texIDs	.\Screen.h	/^        GLuint *texIDs;$/;"	m	class:Screen
texNo	.\Screen.h	/^        int texNo;$/;"	m	class:Screen
textureFilterAnisotropicLargest	.\Screen.h	/^        inline const GLfloat textureFilterAnisotropicLargest() {return this->_textureFilterAnisotropicLargest;}$/;"	f	class:Screen
textureGroups	.\ConditionConstraints.h	/^    vector< vector<string> * > textureGroups;$/;"	m	struct:conditionConstraints
textureID	.\texture.h	/^        GLuint textureID;$/;"	m	union:textureStruct::__anon2
textureMap	.\Conditions.h	/^        hash_map<string, int> textureMap;$/;"	m	class:Conditions
textureStruct	.\texture.h	/^struct textureStruct$/;"	s
texture_t	.\texture.h	/^typedef struct textureStruct texture_t;$/;"	t	typeref:struct:textureStruct
textures	.\Conditions.h	/^        vector<rTexture_t *> textures;$/;"	m	class:Conditions
textures	.\Conditions.h	/^    vector<texture_t *> textures; \/\/ Stores the textures for the object$/;"	m	struct:conditionStruct
textures	.\TestObject.h	/^        vector<texture_t *> textures;$/;"	m	class:TestObject
time	.\ConditionConstraints.h	/^    rangeType<timeStruct_t> time;$/;"	m	struct:conditionConstraints
timeStructForDiscreteCase	.\ConditionConstraints.h	/^    timeStructForDiscreteCase(float display, float disappear):$/;"	f	class:timeStructForDiscreteCase
timeStructForDiscreteCase	.\ConditionConstraints.h	/^class timeStructForDiscreteCase$/;"	c
timeStruct_t	.\ConditionConstraints.h	/^typedef class timeStructForDiscreteCase timeStruct_t;$/;"	t	typeref:class:timeStructForDiscreteCase
topTextureID	.\CylinderObject.h	/^        GLuint topTextureID;$/;"	m	class:CylinderObject
trialID	.\Trial.h	/^        UINT trialID;$/;"	m	class:Trial
trialName	.\Trial.h	/^    const string trialName;$/;"	m	struct:trialResult_struct
trialResult_struct	.\Trial.h	/^    trialResult_struct::trialResult_struct(float rFps, float rDuration, string& rTrialName):$/;"	f	class:trialResult_struct::trialResult_struct
trialResult_struct	.\Trial.h	/^struct trialResult_struct$/;"	s
trialResult_t	.\Trial.h	/^typedef struct trialResult_struct trialResult_t;$/;"	t	typeref:struct:trialResult_struct
trialsInOneSec	.\ConfWnd.h	/^        unsigned int trialsInOneSec;$/;"	m	class:ConfWnd
trialsPerSec	.\experiment.h	/^        unsigned int trialsPerSec;$/;"	m	class:Experiment
type	.\rangeType.h	/^        char type;$/;"	m	class:rangeType
type	.\texture.h	/^    char type;$/;"	m	struct:raw_textureStruct
type	.\texture.h	/^    char type;$/;"	m	struct:textureStruct
unregisterTimer	.\Scene.cpp	/^void Scene::unregisterTimer(int timerID)$/;"	f	class:Scene
updateOutputFilename	.\ConfWnd.cpp	/^void ConfWnd::updateOutputFilename(HWND hDlg)$/;"	f	class:ConfWnd
updateShuffledConditions	.\gBConditionsOneSecAllGroups.cpp	/^void gBConditionsOneSecAllGroups::updateShuffledConditions()$/;"	f	class:gBConditionsOneSecAllGroups
updateTrialNo	.\ConfWnd.cpp	/^void ConfWnd::updateTrialNo(HWND hDlg)$/;"	f	class:ConfWnd
validateBlanks	.\ConfWnd.cpp	/^int ConfWnd::validateBlanks(HWND hDlg)$/;"	f	class:ConfWnd
validateFileExistance	.\ConfWnd.cpp	/^int ConfWnd::validateFileExistance(HWND hDlg)$/;"	f	class:ConfWnd
vector_3d	.\StereoViewingFrameV2.h	/^typedef cml::vector< double, cml::fixed<3> > vector_3d;$/;"	t
weight	.\ConditionConstraints.h	/^    int weight; \/\/ The weight of the constraint$/;"	m	struct:conditionConstraints
wglGetSwapIntervalEXT	.\Screen.h	/^        PFNWGLGETSWAPINTERVALEXTPROC wglGetSwapIntervalEXT;$/;"	m	class:Screen
wglSwapIntervalEXT	.\Screen.h	/^        PFNWGLSWAPINTERVALEXTPROC wglSwapIntervalEXT;$/;"	m	class:Screen
writeOutputs	.\experiment.cpp	/^BOOL Experiment::writeOutputs(string& strOutputs)$/;"	f	class:Experiment
xyz2D	.\Conditions.h	/^    vector<GLfloat> xyz2D;$/;"	m	struct:conditionStruct
xyz2D	.\experiment.h	/^        vector<GLfloat> xyz2D;$/;"	m	class:Experiment
xyz3D	.\Conditions.h	/^    vector<GLfloat> xyz3D;$/;"	m	struct:conditionStruct
xyz3D	.\experiment.h	/^        vector<GLfloat> xyz3D;$/;"	m	class:Experiment
yaw	.\TestObject.h	/^        GLfloat yaw;$/;"	m	class:TestObject
yawRange	.\ConditionConstraints.h	/^    rangeType<GLfloat> yawRange;$/;"	m	struct:conditionConstraints
yawRange	.\TestObject.h	/^        rangeType<GLfloat> yawRange;$/;"	m	class:TestObject
~Conditions	.\Conditions.cpp	/^Conditions::~Conditions(void)$/;"	f	class:Conditions
~ConfWnd	.\ConfWnd.cpp	/^ConfWnd::~ConfWnd(void)$/;"	f	class:ConfWnd
~CylinderFactory	.\CylinderFactory.cpp	/^CylinderFactory::~CylinderFactory(void)$/;"	f	class:CylinderFactory
~CylinderObject	.\CylinderObject.cpp	/^CylinderObject::~CylinderObject(void)$/;"	f	class:CylinderObject
~Experiment	.\experiment.cpp	/^Experiment::~Experiment(void)$/;"	f	class:Experiment
~MixedObjectViewScene	.\MixedObjectViewScene.cpp	/^MixedObjectViewScene::~MixedObjectViewScene(void)$/;"	f	class:MixedObjectViewScene
~Overlapped2DViewScene	.\Overlapped2DViewScene.cpp	/^Overlapped2DViewScene::~Overlapped2DViewScene(void)$/;"	f	class:Overlapped2DViewScene
~PostExperimentScene	.\PostExperimentScene.cpp	/^PostExperimentScene::~PostExperimentScene(void)$/;"	f	class:PostExperimentScene
~PreTrialScene	.\PreTrialScene.cpp	/^PreTrialScene::~PreTrialScene(void)$/;"	f	class:PreTrialScene
~PureWordScene	.\PureWordScene.cpp	/^PureWordScene::~PureWordScene(void)$/;"	f	class:PureWordScene
~Scene	.\Scene.cpp	/^Scene::~Scene()$/;"	f	class:Scene
~Screen	.\Screen.cpp	/^Screen::~Screen(void)$/;"	f	class:Screen
~Separate2D3DViewScene	.\Separate2D3DViewScene.cpp	/^Separate2D3DViewScene::~Separate2D3DViewScene(void)$/;"	f	class:Separate2D3DViewScene
~TestObject	.\TestObject.cpp	/^TestObject::~TestObject(void)$/;"	f	class:TestObject
~TestObjectFactory	.\TestObjectFactory.cpp	/^TestObjectFactory::~TestObjectFactory(void)$/;"	f	class:TestObjectFactory
~Trial	.\Trial.cpp	/^Trial::~Trial(void)$/;"	f	class:Trial
~gBConditionsOneSecAllGroups	.\gBConditionsOneSecAllGroups.cpp	/^gBConditionsOneSecAllGroups::~gBConditionsOneSecAllGroups(void)$/;"	f	class:gBConditionsOneSecAllGroups
~gBConditionsOneSecOneGroup	.\gBConditionsOneSecOneGroup.cpp	/^gBConditionsOneSecOneGroup::~gBConditionsOneSecOneGroup()$/;"	f	class:gBConditionsOneSecOneGroup
~groupBasedConditions	.\groupBasedConditions.cpp	/^groupBasedConditions::~groupBasedConditions(void)$/;"	f	class:groupBasedConditions
~rangeType	.\rangeType.h	/^rangeType<T>::~rangeType(void)$/;"	f	class:rangeType
